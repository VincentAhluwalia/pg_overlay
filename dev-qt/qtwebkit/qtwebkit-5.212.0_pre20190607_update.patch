diff --git a/README b/README
new file mode 100644
index 000000000..8a2bc8c5b
--- /dev/null
+++ b/README
@@ -0,0 +1,15 @@
+# Qt Port of WebKit
+
+WebKit is an open source web browser engine. WebKit's HTML and JavaScript code began as a branch of the KHTML and KJS libraries from KDE. As part of KDE framework KHTML was based on Qt but during their porting efforts Apple's engineers made WebKit toolkit independent. QtWebKit is a project aiming at porting this fabulous engine back to Qt.
+
+The Qt port of WebKit currently compiles and runs on Linux, *BSD, Windows and macOS.
+
+# Building
+
+See instructions at https://github.com/annulen/webkit/wiki
+
+# Contacts
+
+* Mailing list: webkit-qt@lists.webkit.org
+* IRC: #qtwebkit on irc.freenode.net
+* Blog: http://qtwebkit.blogspot.com
diff --git a/Source/WTF/wtf/spi/darwin/XPCSPI.h b/Source/WTF/wtf/spi/darwin/XPCSPI.h
index e30315ab5..2820b9d04 100644
--- a/Source/WTF/wtf/spi/darwin/XPCSPI.h
+++ b/Source/WTF/wtf/spi/darwin/XPCSPI.h
@@ -56,11 +56,15 @@ typedef void* xpc_connection_t;
 
 typedef const struct _xpc_type_s* xpc_type_t;
 
+#if PLATFORM(IOS) && __has_attribute(noescape)
+#define XPC_NOESCAPE __attribute__((__noescape__))
+#endif
+
 #if COMPILER_SUPPORTS(BLOCKS)
 typedef bool (^xpc_array_applier_t)(size_t index, xpc_object_t);
 typedef bool (^xpc_dictionary_applier_t)(const char *key, xpc_object_t value);
 typedef void (^xpc_handler_t)(xpc_object_t);
-#endif
+#endif // COMPILER_SUPPORTS(BLOCKS)
 
 typedef void (*xpc_connection_handler_t)(xpc_connection_t connection);
 
@@ -79,6 +83,10 @@ typedef void (*xpc_connection_handler_t)(xpc_connection_t connection);
 #include <xpc/private.h>
 #endif
 
+#if !defined(XPC_NOESCAPE)
+#define XPC_NOESCAPE
+#endif
+
 EXTERN_C const struct _xpc_dictionary_s _xpc_error_connection_invalid;
 EXTERN_C const struct _xpc_dictionary_s _xpc_error_termination_imminent;
 
@@ -90,8 +98,8 @@ EXTERN_C const struct _xpc_type_s _xpc_type_string;
 
 EXTERN_C xpc_object_t xpc_array_create(const xpc_object_t*, size_t count);
 #if COMPILER_SUPPORTS(BLOCKS)
-EXTERN_C bool xpc_array_apply(xpc_object_t, xpc_array_applier_t);
-EXTERN_C bool xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier);
+EXTERN_C bool xpc_array_apply(xpc_object_t, XPC_NOESCAPE xpc_array_applier_t);
+EXTERN_C bool xpc_dictionary_apply(xpc_object_t xdict, XPC_NOESCAPE xpc_dictionary_applier_t applier);
 #endif
 EXTERN_C size_t xpc_array_get_count(xpc_object_t);
 EXTERN_C const char* xpc_array_get_string(xpc_object_t, size_t index);
diff --git a/Source/WebCore/PlatformQt.cmake b/Source/WebCore/PlatformQt.cmake
index 8414d21e5..cd2e79d5d 100644
--- a/Source/WebCore/PlatformQt.cmake
+++ b/Source/WebCore/PlatformQt.cmake
@@ -2,6 +2,12 @@ include(platform/ImageDecoders.cmake)
 include(platform/Linux.cmake)
 include(platform/TextureMapper.cmake)
 
+if (NOT USE_LIBJPEG)
+    list(REMOVE_ITEM WebCore_SOURCES
+        platform/image-decoders/jpeg/JPEGImageDecoder.cpp
+    )
+endif ()
+
 if (JPEG_DEFINITIONS)
     add_definitions(${JPEG_DEFINITIONS})
 endif ()
diff --git a/Source/WebCore/platform/image-decoders/ImageDecoder.cpp b/Source/WebCore/platform/image-decoders/ImageDecoder.cpp
index 46366823f..0273dd3c2 100644
--- a/Source/WebCore/platform/image-decoders/ImageDecoder.cpp
+++ b/Source/WebCore/platform/image-decoders/ImageDecoder.cpp
@@ -28,7 +28,9 @@
 #if PLATFORM(QT)
 #include "ImageDecoderQt.h"
 #endif
+#if !PLATFORM(QT) || USE(LIBJPEG)
 #include "JPEGImageDecoder.h"
+#endif
 #include "PNGImageDecoder.h"
 #include "SharedBuffer.h"
 #if USE(WEBP)
@@ -115,8 +117,10 @@ ImageDecoder* ImageDecoder::create(const SharedBuffer& data, ImageSource::AlphaO
     if (matchesICOSignature(contents) || matchesCURSignature(contents))
         return new ICOImageDecoder(alphaOption, gammaAndColorProfileOption);
 
+#if !PLATFORM(QT) || USE(LIBJPEG)
     if (matchesJPEGSignature(contents))
         return new JPEGImageDecoder(alphaOption, gammaAndColorProfileOption);
+#endif
 
 #if USE(WEBP)
     if (matchesWebPSignature(contents))
diff --git a/Source/WebCore/platform/network/NetworkingContext.h b/Source/WebCore/platform/network/NetworkingContext.h
index 3de432e42..582bca647 100644
--- a/Source/WebCore/platform/network/NetworkingContext.h
+++ b/Source/WebCore/platform/network/NetworkingContext.h
@@ -28,10 +28,6 @@
 #include <wtf/SchedulePair.h>
 #endif
 
-#if PLATFORM(QT)
-#include <qglobal.h>
-#endif
-
 #if PLATFORM(COCOA)
 OBJC_CLASS NSOperationQueue;
 #endif
diff --git a/Source/WebCore/platform/network/qt/QNetworkReplyHandler.cpp b/Source/WebCore/platform/network/qt/QNetworkReplyHandler.cpp
index 631adf37d..0ce68838e 100644
--- a/Source/WebCore/platform/network/qt/QNetworkReplyHandler.cpp
+++ b/Source/WebCore/platform/network/qt/QNetworkReplyHandler.cpp
@@ -609,6 +609,7 @@ void QNetworkReplyHandler::sendResponseIfNeeded()
             response.setHTTPHeaderField(String(pair.first.constData(), pair.first.size()), String(pair.second.constData(), pair.second.size()));
     }
 
+    // Note: Qt sets RedirectionTargetAttribute only for 3xx responses, so Location header in 201 responce won't affect this code
     QUrl redirection = m_replyWrapper->reply()->attribute(QNetworkRequest::RedirectionTargetAttribute).toUrl();
     if (redirection.isValid()) {
         redirect(response, redirection);
@@ -651,8 +652,10 @@ void QNetworkReplyHandler::redirect(ResourceResponse& response, const QUrl& redi
     ASSERT(!m_queue.deferSignals());
 
     QUrl currentUrl = m_replyWrapper->reply()->url();
+
+    // RFC7231 section 7.1.2
     QUrl newUrl = currentUrl.resolved(redirection);
-    if (currentUrl.hasFragment())
+    if (!newUrl.hasFragment() && currentUrl.hasFragment())
         newUrl.setFragment(currentUrl.fragment());
 
     ResourceHandleClient* client = m_resourceHandle->client();
diff --git a/Source/WebCore/platform/network/qt/ResourceRequestQt.cpp b/Source/WebCore/platform/network/qt/ResourceRequestQt.cpp
index c54a8115b..694e2a764 100644
--- a/Source/WebCore/platform/network/qt/ResourceRequestQt.cpp
+++ b/Source/WebCore/platform/network/qt/ResourceRequestQt.cpp
@@ -27,16 +27,20 @@
 #include <QNetworkRequest>
 #include <QUrl>
 
-// HTTP/2 is implemented since Qt 5.8, but QTBUG-64359 makes it unusable in browser
-#if QT_VERSION >= QT_VERSION_CHECK(5, 9, 4)
+// HTTP/2 is implemented since Qt 5.8, but various QtNetwork bugs make it unusable in browser with Qt < 5.10.1
+// We also don't enable HTTP/2 for unencrypted connections because of possible compatibility issues; it can be
+// enabled manually by user application via custom QNAM subclass
+#if QT_VERSION >= QT_VERSION_CHECK(5, 10, 1)
+#include <QSslSocket>
 #define USE_HTTP2 1
-#endif
 
-// HTTP2AllowedAttribute enforces HTTP/2 instead of negotiating, see QTBUG-61397
-#if QT_VERSION < QT_VERSION_CHECK(5, 10, 0)
-#define HTTP2_IS_BUGGY_WITHOUT_HTTPS 1
-#else
-#define HTTP2_IS_BUGGY_WITHOUT_HTTPS 0
+// Don't enable HTTP/2 when ALPN support status is unknown
+// Before QTBUG-65903 is implemented there is no better way than to check OpenSSL version
+static bool alpnIsSupported()
+{
+    return QSslSocket::sslLibraryVersionNumber() > 0x10002000L &&
+        QSslSocket::sslLibraryVersionString().startsWith(QLatin1String("OpenSSL"));
+}
 #endif
 
 namespace WebCore {
@@ -74,15 +78,11 @@ QNetworkRequest ResourceRequest::toNetworkRequest(NetworkingContext *context) co
     request.setOriginatingObject(context ? context->originatingObject() : 0);
 
 #if USE(HTTP2)
-#if HTTP2_IS_BUGGY_WITHOUT_HTTPS
-    if (originalUrl.protocolIs("https"))
-#endif
-    {
+    static const bool NegotiateHttp2ForHttps = alpnIsSupported();
+    if (originalUrl.protocolIs("https") && NegotiateHttp2ForHttps)
         request.setAttribute(QNetworkRequest::HTTP2AllowedAttribute, true);
-    }
 #endif // USE(HTTP2)
 
-
     const HTTPHeaderMap &headers = httpHeaderFields();
     for (HTTPHeaderMap::const_iterator it = headers.begin(), end = headers.end();
          it != end; ++it) {
diff --git a/Source/WebKit/qt/README b/Source/WebKit/qt/README
new file mode 100644
index 000000000..8a2bc8c5b
--- /dev/null
+++ b/Source/WebKit/qt/README
@@ -0,0 +1,15 @@
+# Qt Port of WebKit
+
+WebKit is an open source web browser engine. WebKit's HTML and JavaScript code began as a branch of the KHTML and KJS libraries from KDE. As part of KDE framework KHTML was based on Qt but during their porting efforts Apple's engineers made WebKit toolkit independent. QtWebKit is a project aiming at porting this fabulous engine back to Qt.
+
+The Qt port of WebKit currently compiles and runs on Linux, *BSD, Windows and macOS.
+
+# Building
+
+See instructions at https://github.com/annulen/webkit/wiki
+
+# Contacts
+
+* Mailing list: webkit-qt@lists.webkit.org
+* IRC: #qtwebkit on irc.freenode.net
+* Blog: http://qtwebkit.blogspot.com
diff --git a/Source/cmake/OptionsQt.cmake b/Source/cmake/OptionsQt.cmake
index ff207fe77..ac1065d92 100644
--- a/Source/cmake/OptionsQt.cmake
+++ b/Source/cmake/OptionsQt.cmake
@@ -259,6 +259,7 @@ option(USE_STATIC_RUNTIME "Use static runtime (MSVC only)" OFF)
 # Private options specific to the Qt port. Changing these options is
 # completely unsupported. They are intended for use only by WebKit developers.
 WEBKIT_OPTION_DEFINE(ENABLE_TOUCH_ADJUSTMENT "Whether to use touch adjustment" PRIVATE ON)
+WEBKIT_OPTION_DEFINE(USE_LIBJPEG "Support JPEG format directly. If it is disabled, QImageReader will be used with possible degradation of user experience" PUBLIC ON)
 
 
 # Public options shared with other WebKit ports. There must be strong reason
@@ -439,23 +440,13 @@ endif ()
 
 find_package(Threads REQUIRED)
 
-if (NOT QT_BUNDLED_JPEG)
-    find_package(JPEG REQUIRED)
+if (USE_LIBJPEG)
+    find_package(JPEG)
+    if (NOT JPEG_FOUND)
+        message(FATAL_ERROR "libjpeg not found. Please make sure that CMake can find its header files and libraries, or build with -DUSE_LIBJPEG=OFF with possible degradation of user experience")
+    endif ()
 else ()
-    set(JPEG_FOUND 1)
-    # As of Qt 5.10, libjpeg-turbo shipped as a part of Qt requires using a few macro definitions
-    # WARNING: Keep in sync with libjpeg.pri
-    # FIXME: Change Qt so we can avoid this
-    include(CheckTypeSize)
-    check_type_size(size_t _SIZEOF_SIZE_T)
-    set(JPEG_DEFINITIONS
-        -DC_ARITH_CODING_SUPPORTED=1
-        -DD_ARITH_CODING_SUPPORTED=1
-        -DBITS_IN_JSAMPLE=8
-        -DJPEG_LIB_VERSION=80
-        -DSIZEOF_SIZE_T=${_SIZEOF_SIZE_T}
-    )
-    unset(_SIZEOF_SIZE_T)
+    message(WARNING "USE_LIBJPEG is disabled, will attempt using QImageReader to decode JPEG with possible degradation of user experience")
 endif ()
 
 if (NOT QT_BUNDLED_PNG)
diff --git a/Tools/qmake/projects/qtjpeg/qtjpeg.pro b/Tools/qmake/projects/qtjpeg/qtjpeg.pro
deleted file mode 100644
index 33aa665d3..000000000
--- a/Tools/qmake/projects/qtjpeg/qtjpeg.pro
+++ /dev/null
@@ -1,14 +0,0 @@
-load(functions)
-
-TARGET = qtjpeg
-
-CONFIG += \
-    static \
-    hide_symbols \
-    exceptions_off rtti_off warn_off
-
-load(qt_helper_lib)
-
-DESTDIR = $$ROOT_BUILD_DIR/lib
-
-include($$QTBASE_DIR/src/3rdparty/libjpeg.pri)
diff --git a/Tools/qmake/projects/run_cmake.pro b/Tools/qmake/projects/run_cmake.pro
index b9d0f08a2..ff6d1d562 100644
--- a/Tools/qmake/projects/run_cmake.pro
+++ b/Tools/qmake/projects/run_cmake.pro
@@ -35,15 +35,9 @@ build_pass|!debug_and_release {
     static_runtime: CMAKE_CONFIG += USE_STATIC_RUNTIME=ON
 
     QT_FOR_CONFIG += gui-private
-    !qtConfig(system-jpeg):exists($$QTBASE_DIR) {
-        CMAKE_CONFIG += \
-            QT_BUNDLED_JPEG=1 \
-            JPEG_LIBRARIES=$$staticLibPath(qtjpeg)
-
-        exists($$QTBASE_DIR/src/3rdparty/libjpeg/src/jpeglib.h): \
-            CMAKE_CONFIG += JPEG_INCLUDE_DIR=$$QTBASE_DIR/src/3rdparty/libjpeg/src
-        else: \
-            CMAKE_CONFIG += JPEG_INCLUDE_DIR=$$QTBASE_DIR/src/3rdparty/libjpeg
+    !qtConfig(system-jpeg):qtConfig(jpeg) {
+        # Use QImageReader for JPEG
+        CMAKE_CONFIG += USE_LIBJPEG=OFF
     }
 
     !qtConfig(system-png):qtConfig(png):exists($$QTBASE_DIR) {
diff --git a/Tools/qt/manifest.txt b/Tools/qt/manifest.txt
index 6fe3e9546..39414cc5f 100644
--- a/Tools/qt/manifest.txt
+++ b/Tools/qt/manifest.txt
@@ -99,8 +99,9 @@ file Source/WebKit/win/Plugins
 # Version
 file Source/WebKit/mac/Configurations/Version.xcconfig
 
-# Move LICENSE.LGPLv21 to the root
+# Move LICENSE.LGPLv21 and README to the root
 file Source/WebKit/qt/LICENSE.LGPLv21 LICENSE.LGPLv21
+file Source/WebKit/qt/README README
 
 directory Source/WebInspectorUI/UserInterface/Images
 exclude Source/WebInspectorUI/UserInterface/Images/.*
diff --git a/WebKit.pro b/WebKit.pro
index ca3b009aa..09debf182 100644
--- a/WebKit.pro
+++ b/WebKit.pro
@@ -9,9 +9,6 @@ isPlatformSupported() {
     !qtConfig(system-png):qtConfig(png):exists($$QTBASE_DIR): \
         SUBDIRS += $$PROJECTS_DIR/qtpng
 
-    !qtConfig(system-jpeg):exists($$QTBASE_DIR): \
-        SUBDIRS += $$PROJECTS_DIR/qtjpeg
-
     SUBDIRS += \
         $$PROJECTS_DIR/generate_cmake_toolchain_file.pro \
         $$PROJECTS_DIR/generate_forwarding_pris.pro \

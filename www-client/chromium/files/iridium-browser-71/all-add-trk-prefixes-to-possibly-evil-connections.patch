From a95ce3d69f9397427df283de43e7d02ebf388854 Mon Sep 17 00:00:00 2001
From: Jan Engelhardt <jengelh@inai.de>
Date: Mon, 3 Nov 2014 10:52:56 +0100
Subject: [PATCH 53/60] all: add trk: prefixes to possibly evil connections

Prefix URLs to Google services with trk: so that whenever something
tries to load them, the developer will be informed via printf and
dialog about this infraction.

If you see such dialog, we know that (a) either the URL needs to be
whitelisted, or (b) the feature that triggered it needs to be disabled
by default.
---
 build/mac/tweak_info_plist.py                  |  2 +-
 .../customization/customization_document.cc    |  2 +-
 .../file_manager/private_api_drive.cc          |  2 +-
 .../file_manager/private_api_misc.cc           |  2 +-
 .../file_manager/private_api_strings.cc        | 12 ++++++------
 .../cryptotoken_private_api.cc                 |  4 ++--
 chrome/browser/extensions/install_signer.cc    |  2 +-
 .../browser/nacl_host/nacl_infobar_delegate.cc |  2 +-
 .../profiles/profile_avatar_downloader.cc      |  2 +-
 .../chromevox/chromevox/background/prefs.js    |  4 ++--
 .../default_apps/external_extensions.json      |  6 +++---
 .../client_side_detection_service.cc           |  4 ++--
 .../download_protection/download_feedback.cc   |  2 +-
 .../spellcheck_hunspell_dictionary.cc          |  2 +-
 .../supervised_user/supervised_user_service.cc |  2 +-
 .../browser/tracing/crash_service_uploader.cc  |  2 +-
 .../ui/views/outdated_upgrade_bubble_view.cc   |  2 +-
 .../browser/ui/webui/ntp/ntp_resource_cache.cc |  8 ++++----
 .../extensions/chrome_extensions_client.cc     |  4 ++--
 .../installer/setup/google_chrome_behaviors.cc |  2 +-
 .../browser/service/cast_service_simple.cc     |  2 +-
 .../geolocation/simple_geolocation_provider.cc |  2 +-
 .../cloud_devices/common/cloud_devices_urls.cc |  8 ++++----
 components/crash/content/app/breakpad_linux.cc |  2 +-
 components/drive/service/drive_api_service.cc  |  4 ++--
 components/feedback/feedback_uploader.cc       |  2 +-
 components/gcm_driver/gcm_account_tracker.cc   |  4 ++--
 .../google/core/browser/google_url_tracker.cc  |  2 +-
 .../core/browser/web_history_service.cc        |  6 +++---
 .../invalidation/impl/gcm_network_channel.cc   |  2 +-
 .../invalidation/impl/p2p_invalidator.cc       |  2 +-
 components/metrics/url_constants.cc            |  2 +-
 .../core/browser/password_store.cc             |  8 ++++----
 .../policy/core/common/policy_loader_win.cc    |  2 +-
 components/rappor/rappor_service_impl.cc       |  2 +-
 components/safe_search_api/stub_url_checker.cc |  2 +-
 components/safe_search_api/url_checker.cc      |  2 +-
 .../core/browser/translate_url_fetcher.cc      |  1 +
 .../translate/core/common/translate_util.cc    |  2 +-
 .../variations/variations_url_constants.cc     |  2 +-
 .../speech/speech_recognition_engine.cc        |  2 +-
 content/browser/webauth/authenticator_impl.cc  |  4 ++--
 .../shell/browser/shell_browser_main_parts.cc  |  2 +-
 google_apis/gaia/gaia_constants.cc             | 18 +++++++++---------
 google_apis/gaia/google_service_auth_error.cc  |  2 +-
 google_apis/gcm/engine/gservices_settings.cc   |  6 +++---
 .../notifier/base/gaia_token_pre_xmpp_auth.cc  |  2 +-
 remoting/base/breakpad_mac.mm                  |  2 +-
 remoting/protocol/jingle_messages.cc           |  2 +-
 remoting/webapp/base/js/xmpp_login_handler.js  |  2 +-
 remoting/webapp/crd/manifest.json.jinja2       |  2 +-
 rlz/lib/lib_values.cc                          |  2 +-
 ui/views/examples/webview_example.cc           |  2 +-
 53 files changed, 88 insertions(+), 87 deletions(-)

diff --git a/build/mac/tweak_info_plist.py b/build/mac/tweak_info_plist.py
index 9ea794b1517f..8c22fc375dce 100755
--- a/build/mac/tweak_info_plist.py
+++ b/build/mac/tweak_info_plist.py
@@ -209,7 +209,7 @@ def _AddKeystoneKeys(plist, bundle_identifier):
   also requires the |bundle_identifier| argument (com.example.product)."""
   plist['KSVersion'] = plist['CFBundleShortVersionString']
   plist['KSProductID'] = bundle_identifier
-  plist['KSUpdateURL'] = 'https://tools.google.com/service/update2'
+  plist['KSUpdateURL'] = 'trk:132:https://tools.google.com/service/update2'
 
   _RemoveKeys(plist, 'KSChannelID')
   for tag_suffix in _TagSuffixes():
diff --git a/chrome/browser/chromeos/customization/customization_document.cc b/chrome/browser/chromeos/customization/customization_document.cc
index 1c60d717b544..6e3e23dccf62 100644
--- a/chrome/browser/chromeos/customization/customization_document.cc
+++ b/chrome/browser/chromeos/customization/customization_document.cc
@@ -174,7 +174,7 @@ std::string ReadFileInBackground(const base::FilePath& file) {
 
 // Template URL where to fetch OEM services customization manifest from.
 const char ServicesCustomizationDocument::kManifestUrl[] =
-    "https://ssl.gstatic.com/chrome/chromeos-customization/%s.json";
+    "trk:151:https://ssl.gstatic.com/chrome/chromeos-customization/%s.json";
 
 // A custom extensions::ExternalLoader that the ServicesCustomizationDocument
 // creates and uses to publish OEM default apps to the extensions system.
diff --git a/chrome/browser/chromeos/extensions/file_manager/private_api_drive.cc b/chrome/browser/chromeos/extensions/file_manager/private_api_drive.cc
index c7f75c3dba9c..ca1b98667e61 100644
--- a/chrome/browser/chromeos/extensions/file_manager/private_api_drive.cc
+++ b/chrome/browser/chromeos/extensions/file_manager/private_api_drive.cc
@@ -1663,7 +1663,7 @@ void FileManagerPrivateInternalGetDownloadUrlFunction::OnGotDownloadUrl(
       SigninManagerFactory::GetForProfile(GetProfile());
   const std::string& account_id = signin_manager->GetAuthenticatedAccountId();
   std::vector<std::string> scopes;
-  scopes.emplace_back("https://www.googleapis.com/auth/drive.readonly");
+  scopes.emplace_back("trk:208:https://www.googleapis.com/auth/drive.readonly");
 
   scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory =
       content::BrowserContext::GetDefaultStoragePartition(GetProfile())
diff --git a/chrome/browser/chromeos/extensions/file_manager/private_api_misc.cc b/chrome/browser/chromeos/extensions/file_manager/private_api_misc.cc
index c6bcb426b45c..2c71b7912054 100644
--- a/chrome/browser/chromeos/extensions/file_manager/private_api_misc.cc
+++ b/chrome/browser/chromeos/extensions/file_manager/private_api_misc.cc
@@ -77,7 +77,7 @@ namespace {
 
 using api::file_manager_private::ProfileInfo;
 
-const char kCWSScope[] = "https://www.googleapis.com/auth/chromewebstore";
+const char kCWSScope[] = "trk:209:https://www.googleapis.com/auth/chromewebstore";
 
 // Obtains the current app window.
 AppWindow* GetCurrentAppWindow(UIThreadExtensionFunction* function) {
diff --git a/chrome/browser/chromeos/extensions/file_manager/private_api_strings.cc b/chrome/browser/chromeos/extensions/file_manager/private_api_strings.cc
index 75a0736df948..69db3b3eb84b 100644
--- a/chrome/browser/chromeos/extensions/file_manager/private_api_strings.cc
+++ b/chrome/browser/chromeos/extensions/file_manager/private_api_strings.cc
@@ -24,26 +24,26 @@ namespace {
 
 // Location of the page to buy more storage for Google Drive.
 const char kGoogleDriveBuyStorageUrl[] =
-    "https://www.google.com/settings/storage";
+    "trk:210:https://www.google.com/settings/storage";
 
 // Location of the overview page about Google Drive.
 const char kGoogleDriveOverviewUrl[] =
-    "https://support.google.com/chromebook/?p=filemanager_drive";
+    "trk:210:https://support.google.com/chromebook/?p=filemanager_drive";
 
 // Location of Google drive redeem page.
 const char kGoogleDriveRedeemUrl[] =
-    "http://www.google.com/intl/en/chrome/devices/goodies.html"
+    "trk:211:http://www.google.com/intl/en/chrome/devices/goodies.html"
     "?utm_source=filesapp&utm_medium=banner&utm_campaign=gsg";
 
 // Location of Google Drive specific help.
 const char kGoogleDriveHelpUrl[] =
-    "https://support.google.com/chromebook/?p=filemanager_drivehelp";
+    "trk:212:https://support.google.com/chromebook/?p=filemanager_drivehelp";
 
 // Location of Google Drive root.
-const char kGoogleDriveRootUrl[] = "https://drive.google.com";
+const char kGoogleDriveRootUrl[] = "trk:213:https://drive.google.com";
 
 // Printf format
-const char kHelpURLFormat[] = "https://support.google.com/chromebook/answer/%d";
+const char kHelpURLFormat[] = "trk:214:https://support.google.com/chromebook/answer/%d";
 
 // Location of the help page for low space warning in the downloads directory.
 const int kDownloadsLowSpaceWarningHelpNumber = 1061547;
diff --git a/chrome/browser/extensions/api/cryptotoken_private/cryptotoken_private_api.cc b/chrome/browser/extensions/api/cryptotoken_private/cryptotoken_private_api.cc
index d4b2f5d60c5f..55001711bce8 100644
--- a/chrome/browser/extensions/api/cryptotoken_private/cryptotoken_private_api.cc
+++ b/chrome/browser/extensions/api/cryptotoken_private/cryptotoken_private_api.cc
@@ -46,8 +46,8 @@ enum class U2FAttestationPromptResult {
 
 const char kGoogleDotCom[] = "google.com";
 constexpr const char* kGoogleGstaticAppIds[] = {
-    "https://www.gstatic.com/securitykey/origins.json",
-    "https://www.gstatic.com/securitykey/a/google.com/origins.json"};
+    "trk:273:https://www.gstatic.com/securitykey/origins.json",
+    "trk:274:https://www.gstatic.com/securitykey/a/google.com/origins.json"};
 
 // ContainsAppIdByHash returns true iff the SHA-256 hash of one of the
 // elements of |list| equals |hash|.
diff --git a/chrome/browser/extensions/install_signer.cc b/chrome/browser/extensions/install_signer.cc
index 6341caf6541d..33d3ecc47bda 100644
--- a/chrome/browser/extensions/install_signer.cc
+++ b/chrome/browser/extensions/install_signer.cc
@@ -65,7 +65,7 @@ const int kSignatureFormatVersion = 2;
 const size_t kSaltBytes = 32;
 
 const char kBackendUrl[] =
-    "https://www.googleapis.com/chromewebstore/v1.1/items/verify";
+    "trk:222:https://www.googleapis.com/chromewebstore/v1.1/items/verify";
 
 const char kPublicKeyPEM[] =                                            \
     "-----BEGIN PUBLIC KEY-----"                                        \
diff --git a/chrome/browser/nacl_host/nacl_infobar_delegate.cc b/chrome/browser/nacl_host/nacl_infobar_delegate.cc
index 69da54d22388..0cb1638e109f 100644
--- a/chrome/browser/nacl_host/nacl_infobar_delegate.cc
+++ b/chrome/browser/nacl_host/nacl_infobar_delegate.cc
@@ -42,5 +42,5 @@ base::string16 NaClInfoBarDelegate::GetLinkText() const {
 }
 
 GURL NaClInfoBarDelegate::GetLinkURL() const {
-  return GURL("https://support.google.com/chrome/?p=ib_nacl");
+  return GURL("trk:143:https://support.google.com/chrome/?p=ib_nacl");
 }
diff --git a/chrome/browser/profiles/profile_avatar_downloader.cc b/chrome/browser/profiles/profile_avatar_downloader.cc
index 36939839fa5f..8a6111827c14 100644
--- a/chrome/browser/profiles/profile_avatar_downloader.cc
+++ b/chrome/browser/profiles/profile_avatar_downloader.cc
@@ -18,7 +18,7 @@
 
 namespace {
 const char kHighResAvatarDownloadUrlPrefix[] =
-    "https://www.gstatic.com/chrome/profile_avatars/";
+    "trk:271:https://www.gstatic.com/chrome/profile_avatars/";
 }
 
 ProfileAvatarDownloader::ProfileAvatarDownloader(
diff --git a/chrome/browser/resources/chromeos/chromevox/chromevox/background/prefs.js b/chrome/browser/resources/chromeos/chromevox/chromevox/background/prefs.js
index 6f3cdcba7be6..65654a8b08c2 100644
--- a/chrome/browser/resources/chromeos/chromevox/chromevox/background/prefs.js
+++ b/chrome/browser/resources/chromeos/chromevox/chromevox/background/prefs.js
@@ -84,9 +84,9 @@ cvox.ChromeVoxPrefs.DEFAULT_PREFS = {
   'position': '{}',
   'siteSpecificEnhancements': true,
   'siteSpecificScriptBase':
-      'https://ssl.gstatic.com/accessibility/javascript/ext/',
+      'trk:152:https://ssl.gstatic.com/accessibility/javascript/ext/',
   'siteSpecificScriptLoader':
-      'https://ssl.gstatic.com/accessibility/javascript/ext/loader.js',
+      'trk:153:https://ssl.gstatic.com/accessibility/javascript/ext/loader.js',
   'speakTextUnderMouse': false,
   'sticky': false,
   'typingEcho': 0,
diff --git a/chrome/browser/resources/default_apps/external_extensions.json b/chrome/browser/resources/default_apps/external_extensions.json
index 59a0f9ad07fd..888e42bb72e9 100644
--- a/chrome/browser/resources/default_apps/external_extensions.json
+++ b/chrome/browser/resources/default_apps/external_extensions.json
@@ -24,15 +24,15 @@
   },
   // Google Sheets
   "aapocclcgogkmnckokdopfmhonfmgoek" : {
-    "external_update_url": "https://clients2.google.com/service/update2/crx"
+    "external_update_url": "trk:03:https://clients2.google.com/service/update2/crx"
   },
   // Google Slides
   "felcaaldnbdncclmgdcncolpebgiejap" : {
-    "external_update_url": "https://clients2.google.com/service/update2/crx"
+    "external_update_url": "trk:04:https://clients2.google.com/service/update2/crx"
   },
   // Drive extension
   "ghbmnnjooekpmoecnnnilnnbdlolhkhi" : {
-    "external_update_url": "https://clients2.google.com/service/update2/crx"
+    "external_update_url": "trk:04:https://clients2.google.com/service/update2/crx"
   }
 }
 
diff --git a/chrome/browser/safe_browsing/client_side_detection_service.cc b/chrome/browser/safe_browsing/client_side_detection_service.cc
index 700f2b10ec47..1334b94c0309 100644
--- a/chrome/browser/safe_browsing/client_side_detection_service.cc
+++ b/chrome/browser/safe_browsing/client_side_detection_service.cc
@@ -81,9 +81,9 @@ const int ClientSideDetectionService::kNegativeCacheIntervalDays = 1;
 const int ClientSideDetectionService::kPositiveCacheIntervalMinutes = 30;
 
 const char ClientSideDetectionService::kClientReportPhishingUrl[] =
-    "https://sb-ssl.google.com/safebrowsing/clientreport/phishing";
+    "trk:148:https://sb-ssl.google.com/safebrowsing/clientreport/phishing";
 const char ClientSideDetectionService::kClientReportMalwareUrl[] =
-    "https://sb-ssl.google.com/safebrowsing/clientreport/malware-check";
+    "trk:149:https://sb-ssl.google.com/safebrowsing/clientreport/malware-check";
 
 struct ClientSideDetectionService::ClientPhishingReportInfo {
   std::unique_ptr<network::SimpleURLLoader> loader;
diff --git a/chrome/browser/safe_browsing/download_protection/download_feedback.cc b/chrome/browser/safe_browsing/download_protection/download_feedback.cc
index 421dcb58ca57..ef782a6fc7df 100644
--- a/chrome/browser/safe_browsing/download_protection/download_feedback.cc
+++ b/chrome/browser/safe_browsing/download_protection/download_feedback.cc
@@ -231,7 +231,7 @@ const int64_t DownloadFeedback::kMaxUploadSize = 50 * 1024 * 1024;
 
 // static
 const char DownloadFeedback::kSbFeedbackURL[] =
-    "https://safebrowsing.google.com/safebrowsing/uploads/chrome";
+    "trk:164:https://safebrowsing.google.com/safebrowsing/uploads/chrome";
 
 // static
 DownloadFeedbackFactory* DownloadFeedback::factory_ = nullptr;
diff --git a/chrome/browser/spellchecker/spellcheck_hunspell_dictionary.cc b/chrome/browser/spellchecker/spellcheck_hunspell_dictionary.cc
index 5259be40f207..524a2ccbd7fc 100644
--- a/chrome/browser/spellchecker/spellcheck_hunspell_dictionary.cc
+++ b/chrome/browser/spellchecker/spellcheck_hunspell_dictionary.cc
@@ -258,7 +258,7 @@ GURL SpellcheckHunspellDictionary::GetDictionaryURL() {
   DCHECK(!bdict_file.empty());
 
   static const char kDownloadServerUrl[] =
-      "https://redirector.gvt1.com/edgedl/chrome/dict/";
+      "trk:173:https://redirector.gvt1.com/edgedl/chrome/dict/";
 
   return GURL(std::string(kDownloadServerUrl) +
               base::ToLowerASCII(bdict_file));
diff --git a/chrome/browser/supervised_user/supervised_user_service.cc b/chrome/browser/supervised_user/supervised_user_service.cc
index b2625451afd8..0a68bcb29694 100644
--- a/chrome/browser/supervised_user/supervised_user_service.cc
+++ b/chrome/browser/supervised_user/supervised_user_service.cc
@@ -81,7 +81,7 @@ namespace {
 
 // The URL from which to download a host blacklist if no local one exists yet.
 const char kBlacklistURL[] =
-    "https://www.gstatic.com/chrome/supervised_user/blacklist-20141001-1k.bin";
+    "trk:272:https://www.gstatic.com/chrome/supervised_user/blacklist-20141001-1k.bin";
 // The filename under which we'll store the blacklist (in the user data dir).
 const char kBlacklistFilename[] = "su-blacklist.bin";
 
diff --git a/chrome/browser/tracing/crash_service_uploader.cc b/chrome/browser/tracing/crash_service_uploader.cc
index 4f34fcacc9d9..ee9e72f7e989 100644
--- a/chrome/browser/tracing/crash_service_uploader.cc
+++ b/chrome/browser/tracing/crash_service_uploader.cc
@@ -41,7 +41,7 @@ using std::string;
 
 namespace {
 
-const char kUploadURL[] = "https://clients2.google.com/cr/report";
+const char kUploadURL[] = "trk:109:https://clients2.google.com/cr/report";
 const char kCrashUploadContentType[] = "multipart/form-data";
 const char kCrashMultipartBoundary[] =
     "----**--yradnuoBgoLtrapitluMklaTelgooG--**----";
diff --git a/chrome/browser/ui/views/outdated_upgrade_bubble_view.cc b/chrome/browser/ui/views/outdated_upgrade_bubble_view.cc
index f5d3be5bc957..cf0ff4a582af 100644
--- a/chrome/browser/ui/views/outdated_upgrade_bubble_view.cc
+++ b/chrome/browser/ui/views/outdated_upgrade_bubble_view.cc
@@ -31,7 +31,7 @@ namespace {
 
 // The URL to be used to re-install Chrome when auto-update failed for too long.
 constexpr char kDownloadChromeUrl[] =
-    "https://www.google.com/chrome/?&brand=CHWL"
+    "trk:242:https://www.google.com/chrome/?&brand=CHWL"
     "&utm_campaign=en&utm_source=en-et-na-us-chrome-bubble&utm_medium=et";
 
 // The maximum number of ignored bubble we track in the NumLaterPerReinstall
diff --git a/chrome/browser/ui/webui/ntp/ntp_resource_cache.cc b/chrome/browser/ui/webui/ntp/ntp_resource_cache.cc
index b99f2360879e..b72a62f5b234 100644
--- a/chrome/browser/ui/webui/ntp/ntp_resource_cache.cc
+++ b/chrome/browser/ui/webui/ntp/ntp_resource_cache.cc
@@ -67,17 +67,17 @@ namespace {
 // The URL for the the Learn More page shown on incognito new tab.
 const char kLearnMoreIncognitoUrl[] =
 #if defined(OS_CHROMEOS)
-    "https://support.google.com/chromebook/?p=incognito";
+    "trk:246:https://support.google.com/chromebook/?p=incognito";
 #else
-    "https://support.google.com/chrome/?p=incognito";
+    "trk:247:https://support.google.com/chrome/?p=incognito";
 #endif
 
 // The URL for the Learn More page shown on guest session new tab.
 const char kLearnMoreGuestSessionUrl[] =
 #if defined(OS_CHROMEOS)
-    "https://support.google.com/chromebook/?p=chromebook_guest";
+    "trk:248:https://support.google.com/chromebook/?p=chromebook_guest";
 #else
-    "https://support.google.com/chrome/?p=ui_guest";
+    "trk:261:https://support.google.com/chrome/?p=ui_guest";
 #endif
 
 SkColor GetThemeColor(const ui::ThemeProvider& tp, int id) {
diff --git a/chrome/common/extensions/chrome_extensions_client.cc b/chrome/common/extensions/chrome_extensions_client.cc
index 299f60cbc7ef..f56ca5a5f754 100644
--- a/chrome/common/extensions/chrome_extensions_client.cc
+++ b/chrome/common/extensions/chrome_extensions_client.cc
@@ -43,9 +43,9 @@ namespace {
 
 // TODO(battre): Delete the HTTP URL once the blacklist is downloaded via HTTPS.
 const char kExtensionBlocklistUrlPrefix[] =
-    "http://www.gstatic.com/chrome/extensions/blacklist";
+    "trk:269:http://www.gstatic.com/chrome/extensions/blacklist";
 const char kExtensionBlocklistHttpsUrlPrefix[] =
-    "https://www.gstatic.com/chrome/extensions/blacklist";
+    "trk:270:https://www.gstatic.com/chrome/extensions/blacklist";
 
 const char kThumbsWhiteListedExtension[] = "khopmbdjffemhegeeobelklnbglcdgfh";
 
diff --git a/chrome/installer/setup/google_chrome_behaviors.cc b/chrome/installer/setup/google_chrome_behaviors.cc
index 138006545a52..29fbff07d31f 100644
--- a/chrome/installer/setup/google_chrome_behaviors.cc
+++ b/chrome/installer/setup/google_chrome_behaviors.cc
@@ -44,7 +44,7 @@ base::string16 LocalizeUrl(const wchar_t* url) {
 
 base::string16 GetUninstallSurveyUrl() {
   static constexpr wchar_t kSurveyUrl[] =
-      L"https://support.google.com/chrome/contact/chromeuninstall3?hl=$1";
+      L"trk:253:https://support.google.com/chrome/contact/chromeuninstall3?hl=$1";
   return LocalizeUrl(kSurveyUrl);
 }
 
diff --git a/chromecast/browser/service/cast_service_simple.cc b/chromecast/browser/service/cast_service_simple.cc
index 863e95315e3a..e52e9897ad29 100644
--- a/chromecast/browser/service/cast_service_simple.cc
+++ b/chromecast/browser/service/cast_service_simple.cc
@@ -27,7 +27,7 @@ GURL GetStartupURL() {
   const base::CommandLine::StringVector& args = command_line->GetArgs();
 
   if (args.empty())
-    return GURL("http://www.google.com/");
+    return GURL("trk:255:http://www.google.com/");
 
   GURL url(args[0]);
   if (url.is_valid() && url.has_scheme())
diff --git a/chromeos/geolocation/simple_geolocation_provider.cc b/chromeos/geolocation/simple_geolocation_provider.cc
index 14fd85fb6659..8ccd4e7ba91f 100644
--- a/chromeos/geolocation/simple_geolocation_provider.cc
+++ b/chromeos/geolocation/simple_geolocation_provider.cc
@@ -20,7 +20,7 @@ namespace chromeos {
 namespace {
 
 const char kDefaultGeolocationProviderUrl[] =
-    "https://www.googleapis.com/geolocation/v1/geolocate?";
+    "trk:215:https://www.googleapis.com/geolocation/v1/geolocate?";
 
 }  // namespace
 
diff --git a/components/cloud_devices/common/cloud_devices_urls.cc b/components/cloud_devices/common/cloud_devices_urls.cc
index b08cc6f08781..e23589a65257 100644
--- a/components/cloud_devices/common/cloud_devices_urls.cc
+++ b/components/cloud_devices/common/cloud_devices_urls.cc
@@ -14,20 +14,20 @@
 namespace cloud_devices {
 
 const char kCloudPrintAuthScope[] =
-    "https://www.googleapis.com/auth/cloudprint";
+    "trk:197:https://www.googleapis.com/auth/cloudprint";
 
 const char kCloudPrintLearnMoreURL[] =
-    "https://www.google.com/support/cloudprint";
+    "trk:199:https://www.google.com/support/cloudprint";
 
 const char kCloudPrintTestPageURL[] =
-    "http://www.google.com/landing/cloudprint/enable.html?print=true";
+    "trk:200:http://www.google.com/landing/cloudprint/enable.html?print=true";
 
 namespace {
 
 // Url must not be matched by "urls" section of
 // cloud_print_app/manifest.json. If it's matched, print driver dialog will
 // open sign-in page in separate window.
-const char kCloudPrintURL[] = "https://www.google.com/cloudprint";
+const char kCloudPrintURL[] = "trk:201:https://www.google.com/cloudprint";
 
 }
 
diff --git a/components/crash/content/app/breakpad_linux.cc b/components/crash/content/app/breakpad_linux.cc
index a7378204ffaa..eaf817697dc5 100644
--- a/components/crash/content/app/breakpad_linux.cc
+++ b/components/crash/content/app/breakpad_linux.cc
@@ -88,7 +88,7 @@ namespace breakpad {
 namespace {
 
 #if !defined(OS_CHROMEOS)
-const char kUploadURL[] = "https://clients2.google.com/cr/report";
+const char kUploadURL[] = "trk:06:https://clients2.google.com/cr/report";
 #endif
 
 bool g_is_crash_reporter_enabled = false;
diff --git a/components/drive/service/drive_api_service.cc b/components/drive/service/drive_api_service.cc
index 7d37d95edb42..3f728dd1b6b2 100644
--- a/components/drive/service/drive_api_service.cc
+++ b/components/drive/service/drive_api_service.cc
@@ -74,9 +74,9 @@ namespace drive {
 namespace {
 
 // OAuth2 scopes for Drive API.
-const char kDriveScope[] = "https://www.googleapis.com/auth/drive";
+const char kDriveScope[] = "trk:217:https://www.googleapis.com/auth/drive";
 const char kDriveAppsReadonlyScope[] =
-    "https://www.googleapis.com/auth/drive.apps.readonly";
+    "trk:218:https://www.googleapis.com/auth/drive.apps.readonly";
 const char kDriveAppsScope[] = "https://www.googleapis.com/auth/drive.apps";
 
 // Mime type to create a directory.
diff --git a/components/feedback/feedback_uploader.cc b/components/feedback/feedback_uploader.cc
index 7b536c084418..f303e076c5f1 100644
--- a/components/feedback/feedback_uploader.cc
+++ b/components/feedback/feedback_uploader.cc
@@ -26,7 +26,7 @@ constexpr base::FilePath::CharType kFeedbackReportPath[] =
     FILE_PATH_LITERAL("Feedback Reports");
 
 constexpr char kFeedbackPostUrl[] =
-    "https://www.google.com/tools/feedback/chrome/__submit";
+    "trk:232:https://www.google.com/tools/feedback/chrome/__submit";
 
 constexpr char kProtoBufMimeType[] = "application/x-protobuf";
 
diff --git a/components/gcm_driver/gcm_account_tracker.cc b/components/gcm_driver/gcm_account_tracker.cc
index b85bfc6d2107..c79081232aa1 100644
--- a/components/gcm_driver/gcm_account_tracker.cc
+++ b/components/gcm_driver/gcm_account_tracker.cc
@@ -25,9 +25,9 @@ namespace gcm {
 namespace {
 
 // Scopes needed by the OAuth2 access tokens.
-const char kGCMGroupServerScope[] = "https://www.googleapis.com/auth/gcm";
+const char kGCMGroupServerScope[] = "trk:230:https://www.googleapis.com/auth/gcm";
 const char kGCMCheckinServerScope[] =
-    "https://www.googleapis.com/auth/android_checkin";
+    "trk:231:https://www.googleapis.com/auth/android_checkin";
 // Name of the GCM account tracker for fetching access tokens.
 const char kGCMAccountTrackerName[] = "gcm_account_tracker";
 // Minimum token validity when sending to GCM groups server.
diff --git a/components/google/core/browser/google_url_tracker.cc b/components/google/core/browser/google_url_tracker.cc
index d66190375b6e..e044742211bd 100644
--- a/components/google/core/browser/google_url_tracker.cc
+++ b/components/google/core/browser/google_url_tracker.cc
@@ -34,7 +34,7 @@
  * (So the naming problem was spotted, yet remains unfixed even today…)
  */
 const char GoogleURLTracker::kDefaultGoogleHomepage[] =
-    "https://www.google.com/";
+    "trk:192:https://www.google.com/";
 const char GoogleURLTracker::kSearchDomainCheckURL[] =
 /* trk:193 */    "https://www.google.com/searchdomaincheck?format=domain&type=chrome";
 const base::Feature GoogleURLTracker::kNoSearchDomainCheck{
diff --git a/components/history/core/browser/web_history_service.cc b/components/history/core/browser/web_history_service.cc
index ecd48e62fc21..47ad8895d586 100644
--- a/components/history/core/browser/web_history_service.cc
+++ b/components/history/core/browser/web_history_service.cc
@@ -41,13 +41,13 @@ namespace history {
 namespace {
 
 const char kHistoryOAuthScope[] =
-    "https://www.googleapis.com/auth/chromesync";
+    "trk:138:https://www.googleapis.com/auth/chromesync";
 
 const char kHistoryQueryHistoryUrl[] =
-    "https://history.google.com/history/api/lookup?client=chrome";
+    "trk:139:https://history.google.com/history/api/lookup?client=chrome";
 
 const char kHistoryDeleteHistoryUrl[] =
-    "https://history.google.com/history/api/delete?client=chrome";
+    "trk:140:https://history.google.com/history/api/delete?client=chrome";
 
 const char kHistoryAudioHistoryUrl[] =
     "https://history.google.com/history/api/lookup?client=audio";
diff --git a/components/invalidation/impl/gcm_network_channel.cc b/components/invalidation/impl/gcm_network_channel.cc
index a81c6debf271..8343362f2d22 100644
--- a/components/invalidation/impl/gcm_network_channel.cc
+++ b/components/invalidation/impl/gcm_network_channel.cc
@@ -40,7 +40,7 @@ namespace syncer {
 namespace {
 
 const char kCacheInvalidationEndpointUrl[] =
-    "https://clients4.google.com/invalidation/android/request/";
+    "trk:264:https://clients4.google.com/invalidation/android/request/";
 const char kCacheInvalidationPackageName[] = "com.google.chrome.invalidations";
 
 // Register backoff policy.
diff --git a/components/invalidation/impl/p2p_invalidator.cc b/components/invalidation/impl/p2p_invalidator.cc
index 80a92d663ca4..58c0014a8523 100644
--- a/components/invalidation/impl/p2p_invalidator.cc
+++ b/components/invalidation/impl/p2p_invalidator.cc
@@ -21,7 +21,7 @@
 
 namespace syncer {
 
-const char kSyncP2PNotificationChannel[] = "http://www.google.com/chrome/sync";
+const char kSyncP2PNotificationChannel[] = "trk:191:http://www.google.com/chrome/sync";
 
 namespace {
 
diff --git a/components/metrics/url_constants.cc b/components/metrics/url_constants.cc
index f60d33bfa162..d768d60b8178 100644
--- a/components/metrics/url_constants.cc
+++ b/components/metrics/url_constants.cc
@@ -7,7 +7,7 @@
 namespace metrics {
 
 const char kNewMetricsServerUrl[] =
-    "https://clientservices.googleapis.com/uma/v2";
+    "trk:265:https://clientservices.googleapis.com/uma/v2";
 
 const char kNewMetricsServerUrlInsecure[] =
     "http://clientservices.googleapis.com/uma/v2";
diff --git a/components/password_manager/core/browser/password_store.cc b/components/password_manager/core/browser/password_store.cc
index 14fef30f8f93..c9046f24a381 100644
--- a/components/password_manager/core/browser/password_store.cc
+++ b/components/password_manager/core/browser/password_store.cc
@@ -224,10 +224,10 @@ void PasswordStore::GetLogins(const FormDigest& form,
   // TODO(mdm): actually delete them at some point, say M24 or so.
   base::Time ignore_logins_cutoff;  // the null time
   if (form.scheme == PasswordForm::SCHEME_HTML &&
-      (form.signon_realm == "http://www.google.com" ||
-       form.signon_realm == "http://www.google.com/" ||
-       form.signon_realm == "https://www.google.com" ||
-       form.signon_realm == "https://www.google.com/")) {
+      (form.signon_realm == "trk:187:http://www.google.com" ||
+       form.signon_realm == "trk:188:http://www.google.com/" ||
+       form.signon_realm == "trk:189:https://www.google.com" ||
+       form.signon_realm == "trk:190:https://www.google.com/")) {
     static const base::Time::Exploded exploded_cutoff =
         { 2012, 1, 0, 1, 0, 0, 0, 0 };  // 00:00 Jan 1 2012
     base::Time out_time;
diff --git a/components/policy/core/common/policy_loader_win.cc b/components/policy/core/common/policy_loader_win.cc
index 7fc507cec069..662edd975ca2 100644
--- a/components/policy/core/common/policy_loader_win.cc
+++ b/components/policy/core/common/policy_loader_win.cc
@@ -57,7 +57,7 @@ const char kKeyThirdParty[] = "3rdparty";
 
 // The web store url that is the only trusted source for extensions.
 const char kExpectedWebStoreUrl[] =
-    ";https://clients2.google.com/service/update2/crx";
+    ";trk:15:https://cache.iridiumbrowser.de/clients2.google.com/service/update2/crx";
 // String to be prepended to each blocked entry.
 const char kBlockedExtensionPrefix[] = "[BLOCKED]";
 
diff --git a/components/rappor/rappor_service_impl.cc b/components/rappor/rappor_service_impl.cc
index 976e0376276b..891bbd08230c 100644
--- a/components/rappor/rappor_service_impl.cc
+++ b/components/rappor/rappor_service_impl.cc
@@ -32,7 +32,7 @@ const char kMimeType[] = "application/vnd.chrome.rappor";
 const char kRapporDailyEventHistogram[] = "Rappor.DailyEvent.IntervalType";
 
 // The rappor server's URL.
-const char kDefaultServerUrl[] = "https://clients4.google.com/rappor";
+const char kDefaultServerUrl[] = "trk:266:https://clients4.google.com/rappor";
 
 }  // namespace
 
diff --git a/components/safe_search_api/stub_url_checker.cc b/components/safe_search_api/stub_url_checker.cc
index 0871c75ee19b..926a6ebb8ea4 100644
--- a/components/safe_search_api/stub_url_checker.cc
+++ b/components/safe_search_api/stub_url_checker.cc
@@ -17,7 +17,7 @@ namespace safe_search_api {
 namespace {
 
 constexpr char kSafeSearchApiUrl[] =
-    "https://safesearch.googleapis.com/v1:classify";
+    "trk:238:https://safesearch.googleapis.com/v1:classify";
 
 std::string BuildResponse(bool is_porn) {
   base::DictionaryValue dict;
diff --git a/components/safe_search_api/url_checker.cc b/components/safe_search_api/url_checker.cc
index c36b32219fcd..f5aa51be9cc7 100644
--- a/components/safe_search_api/url_checker.cc
+++ b/components/safe_search_api/url_checker.cc
@@ -32,7 +32,7 @@ namespace safe_search_api {
 namespace {
 
 const char kSafeSearchApiUrl[] =
-    "https://safesearch.googleapis.com/v1:classify";
+    "trk:238:https://safesearch.googleapis.com/v1:classify";
 const char kDataContentType[] = "application/x-www-form-urlencoded";
 const char kDataFormat[] = "key=%s&urls=%s&region_code=%s";
 
diff --git a/components/translate/core/browser/translate_url_fetcher.cc b/components/translate/core/browser/translate_url_fetcher.cc
index 9dae29174d5f..53a4237a855b 100644
--- a/components/translate/core/browser/translate_url_fetcher.cc
+++ b/components/translate/core/browser/translate_url_fetcher.cc
@@ -100,6 +100,7 @@ bool TranslateURLFetcher::Request(const GURL& url,
   if (!extra_request_header_.empty())
     resource_request->headers.AddHeadersFromString(extra_request_header_);
 
+  fprintf(stderr, "translator: fetching something from %s\n", url_.spec().c_str());
   simple_loader_ =
       variations::CreateSimpleURLLoaderWithVariationsHeadersUnknownSignedIn(
           std::move(resource_request),
diff --git a/components/translate/core/common/translate_util.cc b/components/translate/core/common/translate_util.cc
index 6e1ec09ce1fc..a413be58f3fd 100644
--- a/components/translate/core/common/translate_util.cc
+++ b/components/translate/core/common/translate_util.cc
@@ -57,7 +57,7 @@ const LanguageCodePair kLanguageCodeChineseCompatiblePairs[] = {
     {"zh-CN", "zh-SG"},
 };
 
-const char kSecurityOrigin[] = "https://translate.googleapis.com/";
+const char kSecurityOrigin[] = "trk:220:https://translate.googleapis.com/";
 
 void ToTranslateLanguageSynonym(std::string* language) {
   for (size_t i = 0; i < arraysize(kLanguageCodeSimilitudes); ++i) {
diff --git a/components/variations/variations_url_constants.cc b/components/variations/variations_url_constants.cc
index d97573e63c50..499891816b00 100644
--- a/components/variations/variations_url_constants.cc
+++ b/components/variations/variations_url_constants.cc
@@ -8,7 +8,7 @@ namespace variations {
 
 // Default server of Variations seed info.
 const char kDefaultServerUrl[] =
-    "https://clientservices.googleapis.com/chrome-variations/seed";
+    "trk:142:https://clientservices.googleapis.com/chrome-variations/seed";
 
 const char kDefaultInsecureServerUrl[] =
     "http://clientservices.googleapis.com/chrome-variations/seed";
diff --git a/content/browser/speech/speech_recognition_engine.cc b/content/browser/speech/speech_recognition_engine.cc
index 3bb628ae218b..99644d748275 100644
--- a/content/browser/speech/speech_recognition_engine.cc
+++ b/content/browser/speech/speech_recognition_engine.cc
@@ -32,7 +32,7 @@ namespace content {
 namespace {
 
 const char kWebServiceBaseUrl[] =
-    "https://www.google.com/speech-api/full-duplex/v1";
+    "trk:184:https://www.google.com/speech-api/full-duplex/v1";
 const char kDownstreamUrl[] = "/down?";
 const char kUpstreamUrl[] = "/up?";
 
diff --git a/content/browser/webauth/authenticator_impl.cc b/content/browser/webauth/authenticator_impl.cc
index 0bbb8c099e20..45cacfcf44d9 100644
--- a/content/browser/webauth/authenticator_impl.cc
+++ b/content/browser/webauth/authenticator_impl.cc
@@ -188,9 +188,9 @@ bool IsAppIdAllowedForOrigin(const GURL& appid, const url::Origin& origin) {
   // special-case AppIDs. Firefox also does this:
   // https://groups.google.com/forum/#!msg/mozilla.dev.platform/Uiu3fwnA2xw/201ynAiPAQAJ
   const GURL kGstatic1 =
-      GURL("https://www.gstatic.com/securitykey/origins.json");
+      GURL("trk:276:https://www.gstatic.com/securitykey/origins.json");
   const GURL kGstatic2 =
-      GURL("https://www.gstatic.com/securitykey/a/google.com/origins.json");
+      GURL("trk:277:https://www.gstatic.com/securitykey/a/google.com/origins.json");
   DCHECK(kGstatic1.is_valid() && kGstatic2.is_valid());
 
   if (origin.DomainIs("google.com") && !appid.has_ref() &&
diff --git a/content/shell/browser/shell_browser_main_parts.cc b/content/shell/browser/shell_browser_main_parts.cc
index 5dac9b3f005e..700f4402c282 100644
--- a/content/shell/browser/shell_browser_main_parts.cc
+++ b/content/shell/browser/shell_browser_main_parts.cc
@@ -74,7 +74,7 @@ GURL GetStartupURL() {
 #endif
 
   if (args.empty())
-    return GURL("https://www.google.com/");
+    return GURL("trk:183:https://www.google.com/");
 
   GURL url(args[0]);
   if (url.is_valid() && url.has_scheme())
diff --git a/google_apis/gaia/gaia_constants.cc b/google_apis/gaia/gaia_constants.cc
index d3d0cd9cc95f..91210c88c596 100644
--- a/google_apis/gaia/gaia_constants.cc
+++ b/google_apis/gaia/gaia_constants.cc
@@ -24,31 +24,31 @@ const char kSyncService[] = "chromiumsync";
 const char kRemotingService[] = "chromoting";
 
 // OAuth scopes.
-const char kOAuth1LoginScope[] = "https://www.google.com/accounts/OAuthLogin";
+const char kOAuth1LoginScope[] = "trk:181:https://www.google.com/accounts/OAuthLogin";
 const char kOAuthWrapBridgeUserInfoScope[] =
-    "https://www.googleapis.com/auth/userinfo.email";
+    "trk:101:https://www.googleapis.com/auth/userinfo.email";
 
 // Service/scope names for device management (cloud-based policy) server.
 const char kDeviceManagementServiceOAuth[] =
-    "https://www.googleapis.com/auth/chromeosdevicemanagement";
+    "trk:102:https://www.googleapis.com/auth/chromeosdevicemanagement";
 
 // OAuth2 scope for access to all Google APIs.
-const char kAnyApiOAuth2Scope[] = "https://www.googleapis.com/auth/any-api";
+const char kAnyApiOAuth2Scope[] = "trk:103:https://www.googleapis.com/auth/any-api";
 
 // OAuth2 scope for access to Chrome sync APIs
 const char kChromeSyncOAuth2Scope[] =
-    "https://www.googleapis.com/auth/chromesync";
+    "trk:104:https://www.googleapis.com/auth/chromesync";
 // OAuth2 scope for access to the Chrome Sync APIs for managed profiles.
 const char kChromeSyncSupervisedOAuth2Scope[] =
-    "https://www.googleapis.com/auth/chromesync_playpen";
+    "trk:105:https://www.googleapis.com/auth/chromesync_playpen";
 // OAuth2 scope for access to Google Talk APIs (XMPP).
 const char kGoogleTalkOAuth2Scope[] =
-    "https://www.googleapis.com/auth/googletalk";
+    "trk:106:https://www.googleapis.com/auth/googletalk";
 
 const char kGoogleUserInfoEmail[] =
-    "https://www.googleapis.com/auth/userinfo.email";
+    "trk:107:https://www.googleapis.com/auth/userinfo.email";
 const char kGoogleUserInfoProfile[] =
-    "https://www.googleapis.com/auth/userinfo.profile";
+    "trk:260:https://www.googleapis.com/auth/userinfo.profile";
 
  // Used to mint uber auth tokens when needed.
 const char kGaiaSid[] = "sid";
diff --git a/google_apis/gaia/google_service_auth_error.cc b/google_apis/gaia/google_service_auth_error.cc
index 3feba3cf9c4d..b6a7ba2674a3 100644
--- a/google_apis/gaia/google_service_auth_error.cc
+++ b/google_apis/gaia/google_service_auth_error.cc
@@ -212,7 +212,7 @@ std::string GoogleServiceAuthError::ToString() const {
     case WEB_LOGIN_REQUIRED:
       return "Less secure apps may not authenticate with this account. "
              "Please visit: "
-             "https://www.google.com/settings/security/lesssecureapps";
+             "trk:180:https://www.google.com/settings/security/lesssecureapps";
     default:
       NOTREACHED();
       return std::string();
diff --git a/google_apis/gcm/engine/gservices_settings.cc b/google_apis/gcm/engine/gservices_settings.cc
index d66e576c8c38..81c8ec8e57fc 100644
--- a/google_apis/gcm/engine/gservices_settings.cc
+++ b/google_apis/gcm/engine/gservices_settings.cc
@@ -29,18 +29,18 @@ const char kRegistrationURLKey[] = "gcm_registration_url";
 
 const int64_t kDefaultCheckinInterval = 2 * 24 * 60 * 60;  // seconds = 2 days.
 const int64_t kMinimumCheckinInterval = 12 * 60 * 60;  // seconds = 12 hours.
-const char kDefaultCheckinURL[] = "https://android.clients.google.com/checkin";
+const char kDefaultCheckinURL[] = "trk:110:https://android.clients.google.com/checkin";
 const char kDefaultMCSHostname[] = "mtalk.google.com";
 const int kDefaultMCSMainSecurePort = 5228;
 const int kDefaultMCSFallbackSecurePort = 443;
 const char kDefaultRegistrationURL[] =
-    "https://android.clients.google.com/c2dm/register3";
+    "trk:111:https://android.clients.google.com/c2dm/register3";
 // Settings that are to be deleted are marked with this prefix in checkin
 // response.
 const char kDeleteSettingPrefix[] = "delete_";
 // Settings digest starts with verison number followed by '-'.
 const char kDigestVersionPrefix[] = "1-";
-const char kMCSEnpointTemplate[] = "https://%s:%d";
+const char kMCSEnpointTemplate[] = "trk:112:https://%s:%d";
 const int kMaxSecurePort = 65535;
 
 std::string MakeMCSEndpoint(const std::string& mcs_hostname, int port) {
diff --git a/jingle/notifier/base/gaia_token_pre_xmpp_auth.cc b/jingle/notifier/base/gaia_token_pre_xmpp_auth.cc
index 44192bf58b25..ed2fca30bf6c 100644
--- a/jingle/notifier/base/gaia_token_pre_xmpp_auth.cc
+++ b/jingle/notifier/base/gaia_token_pre_xmpp_auth.cc
@@ -33,7 +33,7 @@ class GaiaCookieMechanism : public buzz::SaslCookieMechanism {
     // These attributes are necessary for working with non-gmail gaia
     // accounts.
     const std::string NS_GOOGLE_AUTH_PROTOCOL(
-        "http://www.google.com/talk/protocol/auth");
+        "trk:179:http://www.google.com/talk/protocol/auth");
     const buzz::QName QN_GOOGLE_ALLOW_GENERATED_JID_XMPP_LOGIN(
         NS_GOOGLE_AUTH_PROTOCOL, "allow-generated-jid");
     const buzz::QName QN_GOOGLE_AUTH_CLIENT_USES_FULL_BIND_RESULT(
diff --git a/remoting/base/breakpad_mac.mm b/remoting/base/breakpad_mac.mm
index 3cd6ef3154f4..1590926c33df 100644
--- a/remoting/base/breakpad_mac.mm
+++ b/remoting/base/breakpad_mac.mm
@@ -56,7 +56,7 @@ void InitializeCrashReporting() {
                         forKey:@BREAKPAD_REPORT_INTERVAL];
   }
   if (![breakpad_config objectForKey:@BREAKPAD_URL]) {
-    [breakpad_config setObject:@"https://clients2.google.com/cr/report"
+    [breakpad_config setObject:@"trk:108:https://clients2.google.com/cr/report"
                         forKey:@BREAKPAD_URL];
   }
 
diff --git a/remoting/protocol/jingle_messages.cc b/remoting/protocol/jingle_messages.cc
index a6390090bc2e..5cd67e335482 100644
--- a/remoting/protocol/jingle_messages.cc
+++ b/remoting/protocol/jingle_messages.cc
@@ -25,7 +25,7 @@ const char kJabberNamespace[] = "jabber:client";
 const char kJingleNamespace[] = "urn:xmpp:jingle:1";
 
 // Namespace for transport messages when using standard ICE.
-const char kIceTransportNamespace[] = "google:remoting:ice";
+const char kIceTransportNamespace[] = "trk:100:google:remoting:ice";
 
 const char kWebrtcTransportNamespace[] = "google:remoting:webrtc";
 
diff --git a/remoting/webapp/base/js/xmpp_login_handler.js b/remoting/webapp/base/js/xmpp_login_handler.js
index b80e88c8f145..267c83719bcc 100644
--- a/remoting/webapp/base/js/xmpp_login_handler.js
+++ b/remoting/webapp/base/js/xmpp_login_handler.js
@@ -295,7 +295,7 @@ remoting.XmppLoginHandler.prototype.startAuthStream_ = function() {
              'auth:allow-generated-jid="true" ' +
              'auth:client-uses-full-bind-result="true" ' +
              'auth:allow-non-google-login="true" ' +
-             'xmlns:auth="http://www.google.com/talk/protocol/auth">' +
+             'xmlns:auth="trk:176:http://www.google.com/talk/protocol/auth">' +
         cookie +
       '</auth>');
 };
diff --git a/remoting/webapp/crd/manifest.json.jinja2 b/remoting/webapp/crd/manifest.json.jinja2
index fe97207b9b04..89c52cc529c5 100644
--- a/remoting/webapp/crd/manifest.json.jinja2
+++ b/remoting/webapp/crd/manifest.json.jinja2
@@ -24,7 +24,7 @@
     "client_id": "{{ REMOTING_IDENTITY_API_CLIENT_ID }}",
     "scopes": [
       {% if USE_GCD %}
-      "https://www.googleapis.com/auth/clouddevices",
+      "trk:198:https://www.googleapis.com/auth/clouddevices",
       {% endif %}
       "https://www.googleapis.com/auth/chromoting",
       "https://www.googleapis.com/auth/googletalk",
diff --git a/rlz/lib/lib_values.cc b/rlz/lib/lib_values.cc
index d9cfbbe1480a..4c6cee0e30ef 100644
--- a/rlz/lib/lib_values.cc
+++ b/rlz/lib/lib_values.cc
@@ -41,7 +41,7 @@ const char kSetDccResponseVariable[] = "set_dcc";
 //
 
 const char kFinancialPingPath[] = "/tools/pso/ping";
-const char kFinancialServer[]   = "clients1.google.com";
+const char kFinancialServer[]   = "cache.iridiumbrowser.de/clients1.google.com"; /* not using URLRequest! catch with cache.ir */
 const int kFinancialPort = 443;
 
 // Ping times in 100-nanosecond intervals.
diff --git a/ui/views/examples/webview_example.cc b/ui/views/examples/webview_example.cc
index f23b646fd551..4f6f355aa8cf 100644
--- a/ui/views/examples/webview_example.cc
+++ b/ui/views/examples/webview_example.cc
@@ -27,7 +27,7 @@ void WebViewExample::CreateExampleView(View* container) {
   container->SetLayoutManager(std::make_unique<FillLayout>());
   container->AddChildView(webview_);
 
-  webview_->LoadInitialURL(GURL("http://www.google.com/"));
+  webview_->LoadInitialURL(GURL("trk:174:http://www.google.com/"));
   webview_->GetWebContents()->Focus();
 }
 
-- 
2.19.1


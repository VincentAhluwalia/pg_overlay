# Disables various detections of Google hosts and functionality specific to them

--- a/net/base/url_util.cc
+++ b/net/base/url_util.cc
@@ -393,28 +393,6 @@ void GetIdentityFromURL(const GURL& url,
 }
 
 bool HasGoogleHost(const GURL& url) {
-  static const char* kGoogleHostSuffixes[] = {
-      ".google.com",
-      ".youtube.com",
-      ".gmail.com",
-      ".doubleclick.net",
-      ".gstatic.com",
-      ".googlevideo.com",
-      ".googleusercontent.com",
-      ".googlesyndication.com",
-      ".google-analytics.com",
-      ".googleadservices.com",
-      ".googleapis.com",
-      ".ytimg.com",
-  };
-  base::StringPiece host = url.host_piece();
-  for (const char* suffix : kGoogleHostSuffixes) {
-    // Here it's possible to get away with faster case-sensitive comparisons
-    // because the list above is all lowercase, and a GURL's host name will
-    // always be canonicalized to lowercase as well.
-    if (base::EndsWith(host, suffix, base::CompareCase::SENSITIVE))
-      return true;
-  }
   return false;
 }
 
--- a/chrome/browser/prerender/prerender_util.cc
+++ b/chrome/browser/prerender/prerender_util.cc
@@ -72,8 +72,7 @@ bool MaybeGetQueryStringBasedAliasURL(
 }
 
 bool IsGoogleDomain(const GURL& url) {
-  return base::StartsWith(url.host_piece(), "www.google.",
-                          base::CompareCase::SENSITIVE);
+  return false;
 }
 
 bool IsGoogleSearchResultURL(const GURL& url) {
--- a/components/google/core/browser/google_util.cc
+++ b/components/google/core/browser/google_util.cc
@@ -43,46 +43,6 @@ bool IsPathHomePageBase(base::StringPiece path) {
   return (path == "/") || (path == "/webhp");
 }
 
-// True if |host| is "[www.]<domain_in_lower_case>.<TLD>" with a valid TLD. If
-// |subdomain_permission| is ALLOW_SUBDOMAIN, we check against host
-// "*.<domain_in_lower_case>.<TLD>" instead.
-bool IsValidHostName(base::StringPiece host,
-                     base::StringPiece domain_in_lower_case,
-                     google_util::SubdomainPermission subdomain_permission) {
-  size_t tld_length = net::registry_controlled_domains::GetRegistryLength(
-      host,
-      net::registry_controlled_domains::EXCLUDE_UNKNOWN_REGISTRIES,
-      net::registry_controlled_domains::EXCLUDE_PRIVATE_REGISTRIES);
-  if ((tld_length == 0) || (tld_length == std::string::npos))
-    return false;
-
-  // Removes the tld and the preceding dot.
-  base::StringPiece host_minus_tld =
-      host.substr(0, host.length() - tld_length - 1);
-  if (base::LowerCaseEqualsASCII(host_minus_tld, domain_in_lower_case))
-    return true;
-
-  if (subdomain_permission == google_util::ALLOW_SUBDOMAIN) {
-    std::string dot_domain(".");
-    domain_in_lower_case.AppendToString(&dot_domain);
-    return base::EndsWith(host_minus_tld, dot_domain,
-                          base::CompareCase::INSENSITIVE_ASCII);
-  }
-
-  std::string www_domain("www.");
-  domain_in_lower_case.AppendToString(&www_domain);
-  return base::LowerCaseEqualsASCII(host_minus_tld, www_domain);
-}
-
-// True if |url| is a valid URL with HTTP or HTTPS scheme. If |port_permission|
-// is DISALLOW_NON_STANDARD_PORTS, this also requires |url| to use the standard
-// port for its scheme (80 for HTTP, 443 for HTTPS).
-bool IsValidURL(const GURL& url, google_util::PortPermission port_permission) {
-  return url.is_valid() && url.SchemeIsHTTPOrHTTPS() &&
-      (url.port().empty() ||
-       (port_permission == google_util::ALLOW_NON_STANDARD_PORTS));
-}
-
 }  // namespace
 
 
@@ -91,14 +51,6 @@ namespace google_util {
 // Global functions -----------------------------------------------------------
 
 bool HasGoogleSearchQueryParam(base::StringPiece str) {
-  url::Component query(0, static_cast<int>(str.length())), key, value;
-  while (url::ExtractQueryKeyValue(str.data(), &query, &key, &value)) {
-    if (value.is_nonempty()) {
-      base::StringPiece key_str = str.substr(key.begin, key.len);
-      if (key_str == "q" || key_str == "as_q")
-        return true;
-    }
-  }
   return false;
 }
 
@@ -180,18 +132,13 @@ bool StartsWithCommandLineGoogleBaseURL(const GURL& url) {
 
 bool IsGoogleHostname(base::StringPiece host,
                       SubdomainPermission subdomain_permission) {
-  const GURL& base_url(CommandLineGoogleBaseURL());
-  if (base_url.is_valid() && (host == base_url.host_piece()))
-    return true;
-
-  return IsValidHostName(host, "google", subdomain_permission);
+  return false;
 }
 
 bool IsGoogleDomainUrl(const GURL& url,
                        SubdomainPermission subdomain_permission,
                        PortPermission port_permission) {
-  return IsValidURL(url, port_permission) &&
-      IsGoogleHostname(url.host(), subdomain_permission);
+  return false;
 }
 
 bool IsGoogleHomePageUrl(const GURL& url) {
@@ -225,8 +172,7 @@ bool IsGoogleSearchUrl(const GURL& url) {
 bool IsYoutubeDomainUrl(const GURL& url,
                         SubdomainPermission subdomain_permission,
                         PortPermission port_permission) {
-  return IsValidURL(url, port_permission) &&
-      IsValidHostName(url.host_piece(), "youtube", subdomain_permission);
+  return false;
 }
 
 }  // namespace google_util
--- a/chrome/renderer/page_load_histograms.cc
+++ b/chrome/renderer/page_load_histograms.cc
@@ -189,6 +189,7 @@ bool ViaHeaderContains(WebFrame* frame, const std::string& via_value) {
 // purposes.
 // TODO(pmeenan): Remove the fuzzy logic when the referrer is reliable
 bool IsFromGoogleSearchResult(const GURL& url, const GURL& referrer) {
+  return false;
   if (!base::StartsWith(referrer.host(), "www.google.",
                         base::CompareCase::SENSITIVE))
     return false;
--- a/components/variations/net/variations_http_headers.cc
+++ b/components/variations/net/variations_http_headers.cc
@@ -17,62 +17,16 @@ namespace variations {
 
 namespace {
 
-const char* kSuffixesToSetHeadersFor[] = {
-    ".android.com",
-    ".doubleclick.com",
-    ".doubleclick.net",
-    ".ggpht.com",
-    ".googleadservices.com",
-    ".googleapis.com",
-    ".googlesyndication.com",
-    ".googleusercontent.com",
-    ".googlevideo.com",
-    ".gstatic.com",
-    ".ytimg.com",
-};
-
-// Exact hostnames in lowercase to set headers for.
-const char* kHostsToSetHeadersFor[] = {
-    "googleweblight.com",
-};
-
-const char kChromeUMAEnabled[] = "X-Chrome-UMA-Enabled";
-const char kClientData[] = "X-Client-Data";
-
 }  // namespace
 
 void AppendVariationHeaders(const GURL& url,
                             bool incognito,
                             bool uma_enabled,
                             net::HttpRequestHeaders* headers) {
-  // Note the criteria for attaching client experiment headers:
-  // 1. We only transmit to Google owned domains which can evaluate experiments.
-  //    1a. These include hosts which have a standard postfix such as:
-  //         *.doubleclick.net or *.googlesyndication.com or
-  //         exactly www.googleadservices.com or
-  //         international TLD domains *.google.<TLD> or *.youtube.<TLD>.
-  // 2. Only transmit for non-Incognito profiles.
-  // 3. For the X-Chrome-UMA-Enabled bit, only set it if UMA is in fact enabled
-  //    for this install of Chrome.
-  // 4. For the X-Client-Data header, only include non-empty variation IDs.
-  if (incognito || !internal::ShouldAppendVariationHeaders(url))
-    return;
-
-  if (uma_enabled)
-    headers->SetHeaderIfMissing(kChromeUMAEnabled, "1");
-
-  const std::string variation_ids_header =
-      VariationsHttpHeaderProvider::GetInstance()->GetClientDataHeader();
-  if (!variation_ids_header.empty()) {
-    // Note that prior to M33 this header was named X-Chrome-Variations.
-    headers->SetHeaderIfMissing(kClientData, variation_ids_header);
-  }
 }
 
 std::set<std::string> GetVariationHeaderNames() {
   std::set<std::string> headers;
-  headers.insert(kChromeUMAEnabled);
-  headers.insert(kClientData);
   return headers;
 }
 
@@ -80,29 +34,7 @@ namespace internal {
 
 // static
 bool ShouldAppendVariationHeaders(const GURL& url) {
-  if (google_util::IsGoogleDomainUrl(url, google_util::ALLOW_SUBDOMAIN,
-                                     google_util::ALLOW_NON_STANDARD_PORTS)) {
-    return true;
-  }
-
-  if (!url.is_valid() || !url.SchemeIsHTTPOrHTTPS())
-    return false;
-
-  // Some domains don't have international TLD extensions, so testing for them
-  // is very straight forward.
-  const std::string host = url.host();
-  for (size_t i = 0; i < arraysize(kSuffixesToSetHeadersFor); ++i) {
-    if (base::EndsWith(host, kSuffixesToSetHeadersFor[i],
-                       base::CompareCase::INSENSITIVE_ASCII))
-      return true;
-  }
-  for (size_t i = 0; i < arraysize(kHostsToSetHeadersFor); ++i) {
-    if (base::LowerCaseEqualsASCII(host, kHostsToSetHeadersFor[i]))
-      return true;
-  }
-
-  return google_util::IsYoutubeDomainUrl(url, google_util::ALLOW_SUBDOMAIN,
-                                         google_util::ALLOW_NON_STANDARD_PORTS);
+  return false;
 }
 
 }  // namespace internal
--- a/chrome/browser/page_load_metrics/observers/from_gws_page_load_metrics_observer.cc
+++ b/chrome/browser/page_load_metrics/observers/from_gws_page_load_metrics_observer.cc
@@ -196,6 +196,7 @@ bool WasAbortedInForeground(UserAbortType abort_type,
 // static
 bool FromGWSPageLoadMetricsLogger::IsGoogleSearchHostname(
     base::StringPiece host) {
+  return false;
   const char kGoogleSearchHostnamePrefix[] = "www.";
 
   // Hostname must start with 'www.' Hostnames are not case sensitive.
--- a/components/search_engines/template_url.cc
+++ b/components/search_engines/template_url.cc
@@ -445,11 +445,6 @@ base::string16 TemplateURLRef::SearchTermToString16(
 bool TemplateURLRef::HasGoogleBaseURLs(
     const SearchTermsData& search_terms_data) const {
   ParseIfNecessary(search_terms_data);
-  for (size_t i = 0; i < replacements_.size(); ++i) {
-    if ((replacements_[i].type == GOOGLE_BASE_URL) ||
-        (replacements_[i].type == GOOGLE_BASE_SUGGEST_URL))
-      return true;
-  }
   return false;
 }
 

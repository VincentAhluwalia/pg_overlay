# Disables saving site properties to the Preferences file, including per_host_zoom_levels and pattern_pairs keys

--- a/net/http/http_server_properties_manager.cc
+++ b/net/http/http_server_properties_manager.cc
@@ -1151,8 +1151,6 @@ void HttpServerPropertiesManager::UpdatePrefsOnPrefThread(
   SaveQuicServerInfoMapToServerPrefs(quic_server_info_map,
                                      &http_server_properties_dict);
 
-  setting_prefs_ = true;
-  pref_delegate_->SetServerProperties(http_server_properties_dict);
   setting_prefs_ = false;
 
   // Note that |completion| will be fired after we have written everything to
--- a/chrome/browser/ui/zoom/chrome_zoom_level_prefs.cc
+++ b/chrome/browser/ui/zoom/chrome_zoom_level_prefs.cc
@@ -92,34 +92,6 @@ ChromeZoomLevelPrefs::RegisterDefaultZoomLevelCallback(
 
 void ChromeZoomLevelPrefs::OnZoomLevelChanged(
     const content::HostZoomMap::ZoomLevelChange& change) {
-  // If there's a manager to aggregate ZoomLevelChanged events, pass this event
-  // along. Since we already hold a subscription to our associated HostZoomMap,
-  // we don't need to create a separate subscription for this.
-  if (zoom_event_manager_)
-    zoom_event_manager_->OnZoomLevelChanged(change);
-
-  if (change.mode != content::HostZoomMap::ZOOM_CHANGED_FOR_HOST)
-    return;
-  double level = change.zoom_level;
-  DictionaryPrefUpdate update(pref_service_,
-                              prefs::kPartitionPerHostZoomLevels);
-  base::DictionaryValue* host_zoom_dictionaries = update.Get();
-  DCHECK(host_zoom_dictionaries);
-
-  bool modification_is_removal =
-      content::ZoomValuesEqual(level, host_zoom_map_->GetDefaultZoomLevel());
-
-  base::DictionaryValue* host_zoom_dictionary = nullptr;
-  if (!host_zoom_dictionaries->GetDictionary(partition_key_,
-                                             &host_zoom_dictionary)) {
-    host_zoom_dictionary = new base::DictionaryValue();
-    host_zoom_dictionaries->Set(partition_key_, host_zoom_dictionary);
-  }
-
-  if (modification_is_removal)
-    host_zoom_dictionary->RemoveWithoutPathExpansion(change.host, nullptr);
-  else
-    host_zoom_dictionary->SetDoubleWithoutPathExpansion(change.host, level);
 }
 
 // TODO(wjmaclean): Remove the dictionary_path once the migration code is
@@ -187,19 +159,6 @@ void ChromeZoomLevelPrefs::InitHostZoomMap(
   // Initialize the default zoom level.
   host_zoom_map_->SetDefaultZoomLevel(GetDefaultZoomLevelPref());
 
-  // Initialize the HostZoomMap with per-host zoom levels from the persisted
-  // zoom-level preference values.
-  const base::DictionaryValue* host_zoom_dictionaries =
-      pref_service_->GetDictionary(prefs::kPartitionPerHostZoomLevels);
-  const base::DictionaryValue* host_zoom_dictionary = nullptr;
-  if (host_zoom_dictionaries->GetDictionary(partition_key_,
-                                            &host_zoom_dictionary)) {
-    // Since we're calling this before setting up zoom_subscription_ below we
-    // don't need to worry that host_zoom_dictionary is indirectly affected
-    // by calls to HostZoomMap::SetZoomLevelForHost().
-    ExtractPerHostZoomLevels(host_zoom_dictionary,
-                             true /* sanitize_partition_host_zoom_levels */);
-  }
   zoom_subscription_ = host_zoom_map_->AddZoomLevelChangedCallback(base::Bind(
       &ChromeZoomLevelPrefs::OnZoomLevelChanged, base::Unretained(this)));
 }
--- a/components/syncable_prefs/pref_model_associator.cc
+++ b/components/syncable_prefs/pref_model_associator.cc
@@ -230,7 +230,7 @@ scoped_ptr<base::Value> PrefModelAssociator::MergePreference(
     const base::Value& server_value) {
   // This function special cases preferences individually, so don't attempt
   // to merge for all migrated values.
-  if (client_) {
+  if (false) {
     std::string new_pref_name;
     if (client_->IsMergeableListPreference(name))
       return make_scoped_ptr(MergeListValues(local_value, server_value));
--- a/components/content_settings/core/browser/content_settings_pref.cc
+++ b/components/content_settings/core/browser/content_settings_pref.cc
@@ -130,7 +130,7 @@ bool ContentSettingsPref::SetWebsiteSetting(
     }
   }
   // Update the content settings preference.
-  if (!is_incognito_) {
+  if (false) {
     UpdatePref(primary_pattern,
                secondary_pattern,
                resource_identifier,
@@ -176,6 +176,7 @@ void ContentSettingsPref::UpdateLastUsage(
     const ContentSettingsPattern& primary_pattern,
     const ContentSettingsPattern& secondary_pattern,
     base::Clock* clock) {
+  return;
   // Don't write if in incognito.
   if (is_incognito_) {
     return;
@@ -244,6 +245,7 @@ bool ContentSettingsPref::TryLockForTesting() const {
 }

 void ContentSettingsPref::ReadContentSettingsFromPref() {
+  return;
   // |DictionaryPrefUpdate| sends out notifications when destructed. This
   // construction order ensures |AutoLock| gets destroyed first and |lock_| is
   // not held when the notifications are sent. Also, |auto_reset| must be still

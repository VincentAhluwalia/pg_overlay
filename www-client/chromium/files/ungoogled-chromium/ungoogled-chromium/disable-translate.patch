# Disables browser translation

--- a/components/translate/core/browser/translate_manager.cc
+++ b/components/translate/core/browser/translate_manager.cc
@@ -175,8 +175,7 @@ void TranslateManager::InitiateTranslation(const std::string& page_lang) {
     return;
   }
 
-  PrefService* prefs = translate_client_->GetPrefs();
-  if (!prefs->GetBoolean(prefs::kEnableTranslate)) {
+  if (true) {
     TranslateBrowserMetrics::ReportInitiationStatus(
         TranslateBrowserMetrics::INITIATION_STATUS_DISABLED_BY_PREFS);
     const std::string& locale =
--- a/components/translate/content/renderer/translate_helper.cc
+++ b/components/translate/content/renderer/translate_helper.cc
@@ -66,38 +66,6 @@ const char kContentSecurityPolicy[] = "script-src 'self' 'unsafe-eval'";
 // should not be translated.
 // TODO(dglazkov): This logic should be moved into Blink.
 bool HasNoTranslateMeta(WebDocument* document) {
-  WebElement head = document->head();
-  if (head.isNull() || head.firstChild().isNull())
-    return false;
-
-  const WebString meta(ASCIIToUTF16("meta"));
-  const WebString name(ASCIIToUTF16("name"));
-  const WebString google(ASCIIToUTF16("google"));
-  const WebString value(ASCIIToUTF16("value"));
-  const WebString content(ASCIIToUTF16("content"));
-
-  for (WebNode child = head.firstChild(); !child.isNull();
-       child = child.nextSibling()) {
-    if (!child.isElementNode())
-      continue;
-    WebElement element = child.to<WebElement>();
-    // Check if a tag is <meta>.
-    if (!element.hasHTMLTagName(meta))
-      continue;
-    // Check if the tag contains name="google".
-    WebString attribute = element.getAttribute(name);
-    if (attribute.isNull() || attribute != google)
-      continue;
-    // Check if the tag contains value="notranslate", or content="notranslate".
-    attribute = element.getAttribute(value);
-    if (attribute.isNull())
-      attribute = element.getAttribute(content);
-    if (attribute.isNull())
-      continue;
-    if (base::LowerCaseEqualsASCII(base::StringPiece16(attribute),
-                                   "notranslate"))
-      return true;
-  }
   return false;
 }
 
@@ -116,7 +84,9 @@ TranslateHelper::TranslateHelper(content::RenderFrame* render_frame,
       extension_group_(extension_group),
       extension_scheme_(extension_scheme),
       binding_(this),
-      weak_method_factory_(this) {}
+      weak_method_factory_(this) {
+  CancelPendingTranslation();
+}
 
 TranslateHelper::~TranslateHelper() {
 }
--- a/components/translate/core/browser/translate_script.cc
+++ b/components/translate/core/browser/translate_script.cc
@@ -132,9 +132,8 @@ void TranslateScript::OnScriptFetchComplete(
     data_ = base::StringPrintf("var translateApiKey = '%s';\n",
                                google_apis::GetAPIKey().c_str());
 
-    GURL security_origin = translate::GetTranslateSecurityOrigin();
     base::StringAppendF(
-        &data_, "var securityOrigin = '%s';", security_origin.spec().c_str());
+        &data_, "var securityOrigin = '';");
 
     // Append embedded translate.js and a remote element library.
     base::StringPiece str = ResourceBundle::GetSharedInstance().


From bdd9ee0f493d1ddc0afd1603bfeceb04a5df96d7 Mon Sep 17 00:00:00 2001
From: Tilmann Meyer <me@atiltedtree.dev>
Date: Fri, 15 Apr 2022 14:07:48 +0200
Subject: [PATCH 02/11] Add wayland required code getting opt-out by disabling
 MOZ_X11

---
 dom/base/nsDOMWindowUtils.cpp        |  6 +-
 gfx/cairo/cairo/src/cairo-features.h |  4 +-
 gfx/thebes/gfxPlatformGtk.cpp        |  8 ++-
 gfx/thebes/gfxPlatformGtk.h          |  2 -
 widget/CompositorWidget.h            |  3 +-
 widget/gtk/TaskbarProgress.cpp       |  2 -
 widget/gtk/components.conf           | 86 +++++++++++++---------------
 widget/gtk/nsWidgetFactory.cpp       |  6 +-
 8 files changed, 56 insertions(+), 61 deletions(-)

diff --git a/dom/base/nsDOMWindowUtils.cpp b/dom/base/nsDOMWindowUtils.cpp
index c6dce5c9fdf7e..1ea3bd345caf5 100644
--- a/dom/base/nsDOMWindowUtils.cpp
+++ b/dom/base/nsDOMWindowUtils.cpp
@@ -74,9 +74,11 @@
 #include "mozilla/dom/DOMRect.h"
 #include <algorithm>
 
-#if defined(MOZ_X11) && defined(MOZ_WIDGET_GTK)
+#if defined(MOZ_WIDGET_GTK)
 #  include <gdk/gdk.h>
-#  include <gdk/gdkx.h>
+#  if defined(MOZ_X11)
+#    include <gdk/gdkx.h>
+#  endif
 #endif
 
 #include "Layers.h"
diff --git a/gfx/cairo/cairo/src/cairo-features.h b/gfx/cairo/cairo/src/cairo-features.h
index cfed9d9a2f7b7..d57f954463d4e 100644
--- a/gfx/cairo/cairo/src/cairo-features.h
+++ b/gfx/cairo/cairo/src/cairo-features.h
@@ -55,8 +55,10 @@
 #define CAIRO_HAS_PDF_SURFACE 1
 #endif
 
-#ifdef MOZ_X11
+#if defined(MOZ_X11) || defined(MOZ_WAYLAND)
 #define CAIRO_HAS_PS_SURFACE 1
+#endif
+#ifdef MOZ_X11
 #define CAIRO_HAS_XLIB_XRENDER_SURFACE 0
 #define CAIRO_HAS_XLIB_SURFACE 1
 #endif
diff --git a/gfx/thebes/gfxPlatformGtk.cpp b/gfx/thebes/gfxPlatformGtk.cpp
index 415532297892d..5195f256d3996 100644
--- a/gfx/thebes/gfxPlatformGtk.cpp
+++ b/gfx/thebes/gfxPlatformGtk.cpp
@@ -325,7 +325,6 @@ already_AddRefed<gfxASurface> gfxPlatformGtk::CreateOffscreenSurface(
 
   RefPtr<gfxASurface> newSurface;
   bool needsClear = true;
-#ifdef MOZ_X11
   // XXX we really need a different interface here, something that passes
   // in more context, including the display and/or target surface type that
   // we should try to match
@@ -336,7 +335,6 @@ already_AddRefed<gfxASurface> gfxPlatformGtk::CreateOffscreenSurface(
     // waste time clearing again
     needsClear = false;
   }
-#endif
 
   if (!newSurface) {
     // We couldn't create a native surface for whatever reason;
@@ -951,8 +949,10 @@ class XrandrSoftwareVsyncSource final : public SoftwareVsyncSource {
     return rate;
   }
 };
+#endif
 
 already_AddRefed<gfx::VsyncSource> gfxPlatformGtk::CreateHardwareVsyncSource() {
+#ifdef MOZ_X11
   if (IsHeadless() || IsWaylandDisplay()) {
     // On Wayland we can not create a global hardware based vsync source, thus
     // use a software based one here. We create window specific ones later.
@@ -988,8 +988,10 @@ already_AddRefed<gfx::VsyncSource> gfxPlatformGtk::CreateHardwareVsyncSource() {
 
   RefPtr<VsyncSource> softwareVsync = new XrandrSoftwareVsyncSource();
   return softwareVsync.forget();
-}
+#else
+  return gfxPlatform::CreateHardwareVsyncSource();
 #endif
+}
 
 void gfxPlatformGtk::BuildContentDeviceData(ContentDeviceData* aOut) {
   gfxPlatform::BuildContentDeviceData(aOut);
diff --git a/gfx/thebes/gfxPlatformGtk.h b/gfx/thebes/gfxPlatformGtk.h
index ed59359bd9dfe..115b655cf9f34 100644
--- a/gfx/thebes/gfxPlatformGtk.h
+++ b/gfx/thebes/gfxPlatformGtk.h
@@ -55,10 +55,8 @@ class gfxPlatformGtk final : public gfxPlatform {
 
   bool AccelerateLayersByDefault() override;
 
-#ifdef MOZ_X11
   already_AddRefed<mozilla::gfx::VsyncSource> CreateHardwareVsyncSource()
       override;
-#endif
 
   bool IsX11Display() { return mIsX11Display; }
   bool IsWaylandDisplay() override {
diff --git a/widget/CompositorWidget.h b/widget/CompositorWidget.h
index 4d38bc6220358..d5e2fb664b617 100644
--- a/widget/CompositorWidget.h
+++ b/widget/CompositorWidget.h
@@ -62,7 +62,8 @@ class CompositorWidgetDelegate {
 };
 
 // Platforms that support out-of-process widgets.
-#if defined(XP_WIN) || defined(MOZ_X11) || defined(MOZ_WIDGET_ANDROID)
+#if defined(XP_WIN) || defined(MOZ_X11) || defined(MOZ_WIDGET_ANDROID) || \
+    defined(MOZ_WAYLAND)
 // CompositorWidgetParent should implement CompositorWidget and
 // PCompositorWidgetParent.
 class CompositorWidgetParent;
diff --git a/widget/gtk/TaskbarProgress.cpp b/widget/gtk/TaskbarProgress.cpp
index 2aad109eab1a5..396f39b5e7e54 100644
--- a/widget/gtk/TaskbarProgress.cpp
+++ b/widget/gtk/TaskbarProgress.cpp
@@ -33,7 +33,6 @@ TaskbarProgress::~TaskbarProgress() {
 NS_IMETHODIMP
 TaskbarProgress::SetProgressState(nsTaskbarProgressState aState,
                                   uint64_t aCurrentValue, uint64_t aMaxValue) {
-#ifdef MOZ_X11
   NS_ENSURE_ARG_RANGE(aState, 0, STATE_PAUSED);
 
   if (aState == STATE_NO_PROGRESS || aState == STATE_INDETERMINATE) {
@@ -72,7 +71,6 @@ TaskbarProgress::SetProgressState(nsTaskbarProgressState aState,
           ("GtkTaskbarProgress::SetProgressState progress: %lu", progress));
 
   mPrimaryWindow->SetProgress(progress);
-#endif
 
   return NS_OK;
 }
diff --git a/widget/gtk/components.conf b/widget/gtk/components.conf
index 82e24d33542df..d98c43c9f9fcc 100644
--- a/widget/gtk/components.conf
+++ b/widget/gtk/components.conf
@@ -76,53 +76,49 @@ Classes = [
         'headers': ['/widget/gtk/nsApplicationChooser.h'],
         'processes': ProcessSelector.MAIN_PROCESS_ONLY,
     },
+    {
+        'js_name': 'clipboard',
+        'cid': '{8b5314ba-db01-11d2-96ce-0060b0fb9956}',
+        'contract_ids': ['@mozilla.org/widget/clipboard;1'],
+        'interfaces': ['nsIClipboard'],
+        'type': 'nsIClipboard',
+        'processes': ProcessSelector.MAIN_PROCESS_ONLY,
+        'overridable': True,
+    },
+    {
+        'cid': '{77221d5a-1dd2-11b2-8c69-c710f15d2ed5}',
+        'contract_ids': ['@mozilla.org/widget/clipboardhelper;1'],
+        'type': 'nsClipboardHelper',
+        'headers': ['/widget/nsClipboardHelper.h'],
+    },
+    {
+        'cid': '{8b5314bb-db01-11d2-96ce-0060b0fb9956}',
+        'contract_ids': ['@mozilla.org/widget/dragservice;1'],
+        'singleton': True,
+        'type': 'nsDragService',
+        'headers': ['/widget/gtk/nsDragService.h'],
+        'constructor': 'nsDragService::GetInstance',
+        'processes': ProcessSelector.MAIN_PROCESS_ONLY,
+    },
+    {
+        'name': 'GfxInfo',
+        'cid': '{d755a760-9f27-11df-0800-200c9a664242}',
+        'contract_ids': ['@mozilla.org/gfx/info;1'],
+        'type': 'mozilla::widget::GfxInfo',
+        'headers': ['/widget/gtk/GfxInfo.h'],
+        'init_method': 'Init',
+        'processes': ProcessSelector.ALLOW_IN_GPU_PROCESS,
+    },
+    {
+        'cid': '{6987230e-0098-4e78-bc5f-1493ee7519fa}',
+        'contract_ids': ['@mozilla.org/widget/useridleservice;1'],
+        'singleton': True,
+        'type': 'nsUserIdleService',
+        'headers': ['/widget/gtk/nsUserIdleServiceGTK.h'],
+        'constructor': 'nsUserIdleServiceGTK::GetInstance',
+    },
 ]
 
-if defined('MOZ_X11'):
-    Classes += [
-        {
-            'js_name': 'clipboard',
-            'cid': '{8b5314ba-db01-11d2-96ce-0060b0fb9956}',
-            'contract_ids': ['@mozilla.org/widget/clipboard;1'],
-            'interfaces': ['nsIClipboard'],
-            'type': 'nsIClipboard',
-            'processes': ProcessSelector.MAIN_PROCESS_ONLY,
-            'overridable': True,
-        },
-        {
-            'cid': '{77221d5a-1dd2-11b2-8c69-c710f15d2ed5}',
-            'contract_ids': ['@mozilla.org/widget/clipboardhelper;1'],
-            'type': 'nsClipboardHelper',
-            'headers': ['/widget/nsClipboardHelper.h'],
-        },
-        {
-            'cid': '{8b5314bb-db01-11d2-96ce-0060b0fb9956}',
-            'contract_ids': ['@mozilla.org/widget/dragservice;1'],
-            'singleton': True,
-            'type': 'nsDragService',
-            'headers': ['/widget/gtk/nsDragService.h'],
-            'constructor': 'nsDragService::GetInstance',
-            'processes': ProcessSelector.MAIN_PROCESS_ONLY,
-        },
-        {
-            'name': 'GfxInfo',
-            'cid': '{d755a760-9f27-11df-0800-200c9a664242}',
-            'contract_ids': ['@mozilla.org/gfx/info;1'],
-            'type': 'mozilla::widget::GfxInfo',
-            'headers': ['/widget/gtk/GfxInfo.h'],
-            'init_method': 'Init',
-            'processes': ProcessSelector.ALLOW_IN_GPU_PROCESS,
-        },
-        {
-            'cid': '{6987230e-0098-4e78-bc5f-1493ee7519fa}',
-            'contract_ids': ['@mozilla.org/widget/useridleservice;1'],
-            'singleton': True,
-            'type': 'nsUserIdleService',
-            'headers': ['/widget/gtk/nsUserIdleServiceGTK.h'],
-            'constructor': 'nsUserIdleServiceGTK::GetInstance',
-        },
-    ]
-
 if defined('NS_PRINTING'):
     Classes += [
         {
diff --git a/widget/gtk/nsWidgetFactory.cpp b/widget/gtk/nsWidgetFactory.cpp
index d649c7e0bfe6c..70b47d5124fc0 100644
--- a/widget/gtk/nsWidgetFactory.cpp
+++ b/widget/gtk/nsWidgetFactory.cpp
@@ -20,9 +20,7 @@
 #include "nsHTMLFormatConverter.h"
 #include "HeadlessClipboard.h"
 #include "IMContextWrapper.h"
-#ifdef MOZ_X11
-#  include "nsClipboard.h"
-#endif
+#include "nsClipboard.h"
 #include "TaskbarProgress.h"
 #include "nsFilePicker.h"
 #include "nsSound.h"
@@ -36,7 +34,6 @@
 using namespace mozilla;
 using namespace mozilla::widget;
 
-#ifdef MOZ_X11
 NS_IMPL_COMPONENT_FACTORY(nsIClipboard) {
   nsCOMPtr<nsIClipboard> inst;
   if (gfxPlatform::IsHeadless()) {
@@ -51,7 +48,6 @@ NS_IMPL_COMPONENT_FACTORY(nsIClipboard) {
 
   return inst.forget().downcast<nsISupports>();
 }
-#endif
 
 nsresult nsWidgetGtk2ModuleCtor() { return nsAppShellInit(); }
 
-- 
2.35.1


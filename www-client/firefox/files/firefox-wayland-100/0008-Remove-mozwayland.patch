From f6a874c524f385ae8bedee0e0a6c007497a1428c Mon Sep 17 00:00:00 2001
From: Tilmann Meyer <me@atiltedtree.dev>
Date: Fri, 15 Apr 2022 14:58:36 +0200
Subject: [PATCH 08/11] Remove mozwayland

---
 browser/installer/package-manifest.in         |   3 -
 toolkit/library/moz.build                     |   4 +-
 toolkit/moz.configure                         |   2 +-
 widget/gtk/moz.build                          |   2 +-
 widget/gtk/mozwayland/moz.build               |  16 --
 widget/gtk/mozwayland/mozwayland.c            | 209 ------------------
 widget/gtk/wayland/moz.build                  |   1 +
 .../gtk/{mozwayland => wayland}/mozwayland.h  |   0
 8 files changed, 4 insertions(+), 233 deletions(-)
 delete mode 100644 widget/gtk/mozwayland/moz.build
 delete mode 100644 widget/gtk/mozwayland/mozwayland.c
 rename widget/gtk/{mozwayland => wayland}/mozwayland.h (100%)

diff --git a/browser/installer/package-manifest.in b/browser/installer/package-manifest.in
index 9f19db2dba4f7..3c9b9a0e65221 100644
--- a/browser/installer/package-manifest.in
+++ b/browser/installer/package-manifest.in
@@ -103,9 +103,6 @@
 @BINPATH@/ucrtbase.dll
 #endif
 #endif
-#ifdef MOZ_WAYLAND
-@BINPATH@/@DLL_PREFIX@mozwayland@DLL_SUFFIX@
-#endif
 
 ; We don't have a complete view of which dlls to expect when doing an artifact
 ; build because we haven't run the relevant parts of configure, so we guess
diff --git a/toolkit/library/moz.build b/toolkit/library/moz.build
index a1393ad6f4a13..70f301da411be 100644
--- a/toolkit/library/moz.build
+++ b/toolkit/library/moz.build
@@ -170,9 +170,7 @@ if CONFIG["MOZ_WIDGET_TOOLKIT"] == "gtk":
     OS_LIBS += CONFIG["MOZ_GTK3_LIBS"]
 
 if CONFIG["MOZ_WAYLAND"]:
-    USE_LIBS += [
-        "mozwayland",
-    ]
+    OS_LIBS += CONFIG["MOZ_WAYLAND_LIBS"]
 
 if CONFIG["MOZ_JPROF"]:
     USE_LIBS += [
diff --git a/toolkit/moz.configure b/toolkit/moz.configure
index e80b6070ddf9c..7a1bb95944d8b 100644
--- a/toolkit/moz.configure
+++ b/toolkit/moz.configure
@@ -461,7 +461,7 @@ def toolkit_gtk(toolkit):
 # ==============================================================
 wayland_headers = pkg_check_modules(
     "MOZ_WAYLAND",
-    "gtk+-wayland-3.0 >= 3.14 xkbcommon >= 0.4.1 libdrm >= 2.4",
+    ["gtk+-wayland-3.0 >= 3.14", "xkbcommon >= 0.4.1", "libdrm >= 2.4", "wayland-client", "wayland-egl"],
     allow_missing=depends(full_toolkit)(lambda t: t == "cairo-gtk3"),
     when=depends(full_toolkit)(lambda t: t in ("cairo-gtk3", "cairo-gtk3-wayland")),
 )
diff --git a/widget/gtk/moz.build b/widget/gtk/moz.build
index 1d6aef4c07876..fc685a26e44c6 100644
--- a/widget/gtk/moz.build
+++ b/widget/gtk/moz.build
@@ -20,7 +20,7 @@ with Files("*nsGtkKeyUtils*"):
     BUG_COMPONENT = ("Core", "DOM: UI Events & Focus Handling")
 
 if CONFIG["MOZ_WAYLAND"]:
-    DIRS += ["wayland", "mozwayland"]
+    DIRS += ["wayland"]
 
 EXPORTS += [
     "MozContainer.h",
diff --git a/widget/gtk/mozwayland/moz.build b/widget/gtk/mozwayland/moz.build
deleted file mode 100644
index 0df3f0f6857a2..0000000000000
--- a/widget/gtk/mozwayland/moz.build
+++ /dev/null
@@ -1,16 +0,0 @@
-# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
-# vim: set filetype=python:
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-
-SOURCES += [
-    "mozwayland.c",
-]
-EXPORTS.mozilla.widget += [
-    "mozwayland.h",
-]
-
-SharedLibrary("mozwayland")
-
-CFLAGS += CONFIG["MOZ_GTK3_CFLAGS"]
diff --git a/widget/gtk/mozwayland/mozwayland.c b/widget/gtk/mozwayland/mozwayland.c
deleted file mode 100644
index 1a86468b4f3d1..0000000000000
--- a/widget/gtk/mozwayland/mozwayland.c
+++ /dev/null
@@ -1,209 +0,0 @@
-/* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim:expandtab:shiftwidth=4:tabstop=4:
- */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-#include <stdlib.h>
-#include "mozilla/Types.h"
-#include <gtk/gtk.h>
-#include <gtk/gtkx.h>
-#include <gdk/gdkwayland.h>
-
-union wl_argument;
-
-/* Those strucures are just placeholders and will be replaced by
- * real symbols from libwayland during run-time linking. We need to make
- * them explicitly visible.
- */
-#pragma GCC visibility push(default)
-const struct wl_interface wl_buffer_interface;
-const struct wl_interface wl_callback_interface;
-const struct wl_interface wl_data_device_interface;
-const struct wl_interface wl_data_device_manager_interface;
-const struct wl_interface wl_keyboard_interface;
-const struct wl_interface wl_pointer_interface;
-const struct wl_interface wl_region_interface;
-const struct wl_interface wl_registry_interface;
-const struct wl_interface wl_shm_interface;
-const struct wl_interface wl_shm_pool_interface;
-const struct wl_interface wl_seat_interface;
-const struct wl_interface wl_surface_interface;
-const struct wl_interface wl_subsurface_interface;
-const struct wl_interface wl_compositor_interface;
-const struct wl_interface wl_subcompositor_interface;
-const struct wl_interface wl_output_interface;
-#pragma GCC visibility pop
-
-MOZ_EXPORT void wl_event_queue_destroy(struct wl_event_queue* queue) {}
-
-MOZ_EXPORT void wl_proxy_marshal(struct wl_proxy* p, uint32_t opcode, ...) {}
-
-MOZ_EXPORT void wl_proxy_marshal_array(struct wl_proxy* p, uint32_t opcode,
-                                       union wl_argument* args) {}
-
-MOZ_EXPORT struct wl_proxy* wl_proxy_create(
-    struct wl_proxy* factory, const struct wl_interface* interface) {
-  return NULL;
-}
-
-MOZ_EXPORT void* wl_proxy_create_wrapper(void* proxy) { return NULL; }
-
-MOZ_EXPORT void wl_proxy_wrapper_destroy(void* proxy_wrapper) {}
-
-MOZ_EXPORT struct wl_proxy* wl_proxy_marshal_constructor(
-    struct wl_proxy* proxy, uint32_t opcode,
-    const struct wl_interface* interface, ...) {
-  return NULL;
-}
-
-MOZ_EXPORT struct wl_proxy* wl_proxy_marshal_constructor_versioned(
-    struct wl_proxy* proxy, uint32_t opcode,
-    const struct wl_interface* interface, uint32_t version, ...) {
-  return NULL;
-}
-
-MOZ_EXPORT struct wl_proxy* wl_proxy_marshal_array_constructor(
-    struct wl_proxy* proxy, uint32_t opcode, union wl_argument* args,
-    const struct wl_interface* interface) {
-  return NULL;
-}
-
-MOZ_EXPORT struct wl_proxy* wl_proxy_marshal_array_constructor_versioned(
-    struct wl_proxy* proxy, uint32_t opcode, union wl_argument* args,
-    const struct wl_interface* interface, uint32_t version) {
-  return NULL;
-}
-
-MOZ_EXPORT void wl_proxy_destroy(struct wl_proxy* proxy) {}
-
-MOZ_EXPORT int wl_proxy_add_listener(struct wl_proxy* proxy,
-                                     void (**implementation)(void),
-                                     void* data) {
-  return -1;
-}
-
-MOZ_EXPORT const void* wl_proxy_get_listener(struct wl_proxy* proxy) {
-  return NULL;
-}
-
-typedef int (*wl_dispatcher_func_t)(const void*, void*, uint32_t,
-                                    const struct wl_message*,
-                                    union wl_argument*);
-
-MOZ_EXPORT int wl_proxy_add_dispatcher(struct wl_proxy* proxy,
-                                       wl_dispatcher_func_t dispatcher_func,
-                                       const void* dispatcher_data,
-                                       void* data) {
-  return -1;
-}
-
-MOZ_EXPORT void wl_proxy_set_user_data(struct wl_proxy* proxy,
-                                       void* user_data) {}
-
-MOZ_EXPORT void* wl_proxy_get_user_data(struct wl_proxy* proxy) { return NULL; }
-
-MOZ_EXPORT uint32_t wl_proxy_get_version(struct wl_proxy* proxy) { return -1; }
-
-MOZ_EXPORT uint32_t wl_proxy_get_id(struct wl_proxy* proxy) { return -1; }
-
-MOZ_EXPORT const char* wl_proxy_get_class(struct wl_proxy* proxy) {
-  return NULL;
-}
-
-MOZ_EXPORT void wl_proxy_set_queue(struct wl_proxy* proxy,
-                                   struct wl_event_queue* queue) {}
-
-MOZ_EXPORT struct wl_display* wl_display_connect(const char* name) {
-  return NULL;
-}
-
-MOZ_EXPORT struct wl_display* wl_display_connect_to_fd(int fd) { return NULL; }
-
-MOZ_EXPORT void wl_display_disconnect(struct wl_display* display) {}
-
-MOZ_EXPORT int wl_display_get_fd(struct wl_display* display) { return -1; }
-
-MOZ_EXPORT int wl_display_dispatch(struct wl_display* display) { return -1; }
-
-MOZ_EXPORT int wl_display_dispatch_queue(struct wl_display* display,
-                                         struct wl_event_queue* queue) {
-  return -1;
-}
-
-MOZ_EXPORT int wl_display_dispatch_queue_pending(struct wl_display* display,
-                                                 struct wl_event_queue* queue) {
-  return -1;
-}
-
-MOZ_EXPORT int wl_display_dispatch_pending(struct wl_display* display) {
-  return -1;
-}
-
-MOZ_EXPORT int wl_display_get_error(struct wl_display* display) { return -1; }
-
-MOZ_EXPORT uint32_t wl_display_get_protocol_error(
-    struct wl_display* display, const struct wl_interface** interface,
-    uint32_t* id) {
-  return -1;
-}
-
-MOZ_EXPORT int wl_display_flush(struct wl_display* display) { return -1; }
-
-MOZ_EXPORT int wl_display_roundtrip_queue(struct wl_display* display,
-                                          struct wl_event_queue* queue) {
-  return -1;
-}
-
-MOZ_EXPORT int wl_display_roundtrip(struct wl_display* display) { return -1; }
-
-MOZ_EXPORT struct wl_event_queue* wl_display_create_queue(
-    struct wl_display* display) {
-  return NULL;
-}
-
-MOZ_EXPORT int wl_display_prepare_read_queue(struct wl_display* display,
-                                             struct wl_event_queue* queue) {
-  return -1;
-}
-
-MOZ_EXPORT int wl_display_prepare_read(struct wl_display* display) {
-  return -1;
-}
-
-MOZ_EXPORT void wl_display_cancel_read(struct wl_display* display) {}
-
-MOZ_EXPORT int wl_display_read_events(struct wl_display* display) { return -1; }
-
-MOZ_EXPORT void wl_log_set_handler_client(wl_log_func_t handler) {}
-
-MOZ_EXPORT struct wl_egl_window* wl_egl_window_create(
-    struct wl_surface* surface, int width, int height) {
-  return NULL;
-}
-
-MOZ_EXPORT void wl_egl_window_destroy(struct wl_egl_window* egl_window) {}
-
-MOZ_EXPORT void wl_egl_window_resize(struct wl_egl_window* egl_window,
-                                     int width, int height, int dx, int dy) {}
-
-MOZ_EXPORT void wl_list_init(struct wl_list* list) {}
-
-MOZ_EXPORT void wl_list_insert(struct wl_list* list, struct wl_list* elm) {}
-
-MOZ_EXPORT void wl_list_remove(struct wl_list* elm) {}
-
-MOZ_EXPORT int wl_list_length(const struct wl_list* list) { return -1; }
-
-MOZ_EXPORT int wl_list_empty(const struct wl_list* list) { return -1; }
-
-MOZ_EXPORT void wl_list_insert_list(struct wl_list* list,
-                                    struct wl_list* other) {}
-
-MOZ_EXPORT struct wl_proxy* wl_proxy_marshal_flags(
-    struct wl_proxy* proxy, uint32_t opcode,
-    const struct wl_interface* interface, uint32_t version, uint32_t flags,
-    ...) {
-  return NULL;
-}
diff --git a/widget/gtk/wayland/moz.build b/widget/gtk/wayland/moz.build
index 2bd15b3844e7a..1b6011b151452 100644
--- a/widget/gtk/wayland/moz.build
+++ b/widget/gtk/wayland/moz.build
@@ -24,6 +24,7 @@ EXPORTS.mozilla.widget += [
     "gtk-primary-selection-client-protocol.h",
     "idle-inhibit-unstable-v1-client-protocol.h",
     "linux-dmabuf-unstable-v1-client-protocol.h",
+    "mozwayland.h",
     "pointer-constraints-unstable-v1-client-protocol.h",
     "primary-selection-unstable-v1-client-protocol.h",
     "relative-pointer-unstable-v1-client-protocol.h",
diff --git a/widget/gtk/mozwayland/mozwayland.h b/widget/gtk/wayland/mozwayland.h
similarity index 100%
rename from widget/gtk/mozwayland/mozwayland.h
rename to widget/gtk/wayland/mozwayland.h
-- 
2.35.1


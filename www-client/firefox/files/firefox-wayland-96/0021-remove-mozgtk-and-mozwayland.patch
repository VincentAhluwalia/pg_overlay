From 95e30e2a40ea91a879c9c74a4dd3c2caf0e68fd2 Mon Sep 17 00:00:00 2001
From: Tilmann Meyer <me@atiltedtree.dev>
Date: Mon, 13 Dec 2021 22:42:39 +0100
Subject: [PATCH 21/23] remove mozgtk and mozwayland

---
 browser/installer/package-manifest.in         |   6 -
 toolkit/library/moz.build                     |  19 +-
 toolkit/moz.configure                         |   2 +-
 toolkit/xre/glxtest.cpp                       |   3 +-
 widget/gtk/moz.build                          |  12 +-
 widget/gtk/mozgtk/moz.build                   |  36 ---
 widget/gtk/mozgtk/mozgtk.c                    |  21 --
 widget/gtk/mozwayland/moz.build               |  16 --
 widget/gtk/mozwayland/mozwayland.c            | 208 ------------------
 widget/gtk/mozwayland/mozwayland.h            | 134 -----------
 widget/gtk/nsClipboardWayland.cpp             |   4 +-
 widget/gtk/nsWaylandDisplay.h                 |   4 +-
 widget/gtk/nsWindow.cpp                       |   4 -
 .../gtk-primary-selection-client-protocol.h   |   1 -
 14 files changed, 13 insertions(+), 457 deletions(-)
 delete mode 100644 widget/gtk/mozgtk/moz.build
 delete mode 100644 widget/gtk/mozgtk/mozgtk.c
 delete mode 100644 widget/gtk/mozwayland/moz.build
 delete mode 100644 widget/gtk/mozwayland/mozwayland.c
 delete mode 100644 widget/gtk/mozwayland/mozwayland.h

diff --git a/browser/installer/package-manifest.in b/browser/installer/package-manifest.in
index 4d7a4810a7f27..75075807e6c55 100644
--- a/browser/installer/package-manifest.in
+++ b/browser/installer/package-manifest.in
@@ -103,12 +103,6 @@
 @BINPATH@/ucrtbase.dll
 #endif
 #endif
-#ifdef MOZ_GTK
-@BINPATH@/@DLL_PREFIX@mozgtk@DLL_SUFFIX@
-#ifdef MOZ_WAYLAND
-@BINPATH@/@DLL_PREFIX@mozwayland@DLL_SUFFIX@
-#endif
-#endif
 
 ; We don't have a complete view of which dlls to expect when doing an artifact
 ; build because we haven't run the relevant parts of configure, so we guess
diff --git a/toolkit/library/moz.build b/toolkit/library/moz.build
index 2c3f86948ed16..68e6b57076c50 100644
--- a/toolkit/library/moz.build
+++ b/toolkit/library/moz.build
@@ -166,27 +166,10 @@ USE_LIBS += [
 ]
 
 if CONFIG["MOZ_WIDGET_TOOLKIT"] == "gtk":
-    # The mozgtk library is a workaround that makes Gtk+ use libwayland-client
-    # instead of mozwayland. The reason it works is that by being a dependency
-    # of libxul, mozgtk appears in dependentlibs.list, preceding mozwayland
-    # (which is important and guaranteed by the USE_LIBS order in this file).
-    # That, in turn, makes firefox dlopen() mozgtk before mozwayland, which
-    # will trigger the loading of the Gtk+ libraries (mozgtk depending on them).
-    # Those libraries, if they depend on libwayland-client, will use the symbols
-    # from libwayland-client because mozwayland is not loaded yet.
-    # When eventually libxul is loaded after both mozgtk and mozwayland, it will
-    # get symbols from libwayland-client too.
-    # In the case where Gtk+ doesn't have wayland support, libwayland-client is
-    # not loaded, and libxul ends up using the mozwayland symbols.
-    USE_LIBS += [
-        "mozgtk",
-    ]
     OS_LIBS += CONFIG["MOZ_GTK3_LIBS"]
 
 if CONFIG["MOZ_WAYLAND"]:
-    USE_LIBS += [
-        "mozwayland",
-    ]
+    OS_LIBS += CONFIG["MOZ_WAYLAND_LIBS"]
 
 if CONFIG["MOZ_JPROF"]:
     USE_LIBS += [
diff --git a/toolkit/moz.configure b/toolkit/moz.configure
index 2e196226f17b3..44d05a130ef57 100644
--- a/toolkit/moz.configure
+++ b/toolkit/moz.configure
@@ -328,7 +328,7 @@ def with_wayland(value, toolkit_gtk, artifacts):
 
 wayland_headers = pkg_check_modules(
     "MOZ_WAYLAND",
-    "gtk+-wayland-3.0 >= 3.14 xkbcommon >= 0.4.1 libdrm >= 2.4",
+    ["gtk+-wayland-3.0 >= 3.14", "xkbcommon >= 0.4.1", "libdrm >= 2.4", "wayland-client", "wayland-egl"],
     when=with_wayland,
 )
 
diff --git a/toolkit/xre/glxtest.cpp b/toolkit/xre/glxtest.cpp
index 6eb6b179bf0c1..d3b4aa571dcd2 100644
--- a/toolkit/xre/glxtest.cpp
+++ b/toolkit/xre/glxtest.cpp
@@ -24,6 +24,7 @@
 #include <dlfcn.h>
 #include <fcntl.h>
 #include <unistd.h>
+#include <sys/param.h>
 
 #include "mozilla/Unused.h"
 #include "nsAppRunner.h"  // for IsWaylandEnabled on IsX11EGLEnabled
@@ -40,7 +41,7 @@
 #endif
 
 #ifdef MOZ_WAYLAND
-#  include "mozilla/widget/mozwayland.h"
+#  include <wayland-client.h>
 #  include "mozilla/widget/xdg-output-unstable-v1-client-protocol.h"
 #endif
 
diff --git a/widget/gtk/moz.build b/widget/gtk/moz.build
index 3e2936ad56897..ef47017cb6321 100644
--- a/widget/gtk/moz.build
+++ b/widget/gtk/moz.build
@@ -19,10 +19,8 @@ with Files("*IMContextWrapper*"):
 with Files("*nsGtkKeyUtils*"):
     BUG_COMPONENT = ("Core", "DOM: UI Events & Focus Handling")
 
-DIRS += ["mozgtk"]
-
 if CONFIG["MOZ_WAYLAND"]:
-    DIRS += ["wayland", "mozwayland"]
+    DIRS += ["wayland"]
 
 EXPORTS += [
     "MozContainer.h",
@@ -143,11 +141,6 @@ LOCAL_INCLUDES += [
     "/widget/headless",
 ]
 
-if CONFIG["MOZ_X11"]:
-    LOCAL_INCLUDES += [
-        "/widget/x11",
-    ]
-
 DEFINES["CAIRO_GFX"] = True
 
 DEFINES["MOZ_APP_NAME"] = '"%s"' % CONFIG["MOZ_APP_NAME"]
@@ -155,6 +148,9 @@ DEFINES["MOZ_APP_NAME"] = '"%s"' % CONFIG["MOZ_APP_NAME"]
 CFLAGS += CONFIG["TK_CFLAGS"]
 CXXFLAGS += CONFIG["TK_CFLAGS"]
 
+CFLAGS += CONFIG["MOZ_GTK3_CFLAGS"]
+CXXFLAGS += CONFIG["MOZ_GTK3_CFLAGS"]
+
 if CONFIG["MOZ_WAYLAND"]:
     CFLAGS += CONFIG["MOZ_WAYLAND_CFLAGS"]
     CXXFLAGS += CONFIG["MOZ_WAYLAND_CFLAGS"]
diff --git a/widget/gtk/mozgtk/moz.build b/widget/gtk/mozgtk/moz.build
deleted file mode 100644
index f860f8217879e..0000000000000
--- a/widget/gtk/mozgtk/moz.build
+++ /dev/null
@@ -1,36 +0,0 @@
-# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
-# vim: set filetype=python:
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-
-SharedLibrary("mozgtk")
-
-SOURCES += [
-    "mozgtk.c",
-]
-
-CFLAGS += CONFIG["MOZ_X11_CFLAGS"]
-
-# If LDFLAGS contains -Wl,--as-needed or if it's the default for the toolchain,
-# we need to add -Wl,--no-as-needed before the gtk libraries, otherwise the
-# linker will drop those dependencies because no symbols are used from them.
-# But those dependencies need to be kept for things to work properly.
-# Ideally, we'd only add -Wl,--no-as-needed if necessary, but it's just simpler
-# to add it unconditionally. This library is also simple enough that forcing
-# -Wl,--as-needed after the gtk libraries is not going to make a significant
-# difference.
-if CONFIG["GCC_USE_GNU_LD"]:
-    no_as_needed = ["-Wl,--no-as-needed"]
-    as_needed = ["-Wl,--as-needed"]
-else:
-    no_as_needed = []
-    as_needed = []
-
-OS_LIBS += [f for f in CONFIG["MOZ_GTK3_LIBS"] if f.startswith("-L")]
-OS_LIBS += no_as_needed
-OS_LIBS += [
-    "gtk-3",
-    "gdk-3",
-]
-OS_LIBS += as_needed
diff --git a/widget/gtk/mozgtk/mozgtk.c b/widget/gtk/mozgtk/mozgtk.c
deleted file mode 100644
index 677f9b356160a..0000000000000
--- a/widget/gtk/mozgtk/mozgtk.c
+++ /dev/null
@@ -1,21 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ts=8 sts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-#include "mozilla/Types.h"
-
-#include <X11/Xlib.h>
-// Bug 1271100
-// We need to trick system Cairo into not using the XShm extension due to
-// a race condition in it that results in frequent BadAccess errors. Cairo
-// relies upon XShmQueryExtension to initially detect if XShm is available.
-// So we define our own stub that always indicates XShm not being present.
-// mozgtk loads before libXext/libcairo and so this stub will take priority.
-// Our tree usage goes through xcb and remains unaffected by this.
-//
-// This is also used to force libxul to depend on the mozgtk library. If we
-// ever can remove this workaround for system Cairo, we'll need something
-// to replace it for that purpose.
-MOZ_EXPORT Bool XShmQueryExtension(Display* aDisplay) { return False; }
diff --git a/widget/gtk/mozwayland/moz.build b/widget/gtk/mozwayland/moz.build
deleted file mode 100644
index 94eca8a785238..0000000000000
--- a/widget/gtk/mozwayland/moz.build
+++ /dev/null
@@ -1,16 +0,0 @@
-# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
-# vim: set filetype=python:
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-
-SOURCES += [
-    "mozwayland.c",
-]
-EXPORTS.mozilla.widget += [
-    "mozwayland.h",
-]
-
-SharedLibrary("mozwayland")
-
-CFLAGS += CONFIG["TK_CFLAGS"]
diff --git a/widget/gtk/mozwayland/mozwayland.c b/widget/gtk/mozwayland/mozwayland.c
deleted file mode 100644
index eee67ed3a9788..0000000000000
--- a/widget/gtk/mozwayland/mozwayland.c
+++ /dev/null
@@ -1,208 +0,0 @@
-/* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim:expandtab:shiftwidth=4:tabstop=4:
- */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-#include <stdlib.h>
-#include "mozilla/Types.h"
-#include <gtk/gtk.h>
-#include <gdk/gdkwayland.h>
-
-union wl_argument;
-
-/* Those strucures are just placeholders and will be replaced by
- * real symbols from libwayland during run-time linking. We need to make
- * them explicitly visible.
- */
-#pragma GCC visibility push(default)
-const struct wl_interface wl_buffer_interface;
-const struct wl_interface wl_callback_interface;
-const struct wl_interface wl_data_device_interface;
-const struct wl_interface wl_data_device_manager_interface;
-const struct wl_interface wl_keyboard_interface;
-const struct wl_interface wl_pointer_interface;
-const struct wl_interface wl_region_interface;
-const struct wl_interface wl_registry_interface;
-const struct wl_interface wl_shm_interface;
-const struct wl_interface wl_shm_pool_interface;
-const struct wl_interface wl_seat_interface;
-const struct wl_interface wl_surface_interface;
-const struct wl_interface wl_subsurface_interface;
-const struct wl_interface wl_compositor_interface;
-const struct wl_interface wl_subcompositor_interface;
-const struct wl_interface wl_output_interface;
-#pragma GCC visibility pop
-
-MOZ_EXPORT void wl_event_queue_destroy(struct wl_event_queue* queue) {}
-
-MOZ_EXPORT void wl_proxy_marshal(struct wl_proxy* p, uint32_t opcode, ...) {}
-
-MOZ_EXPORT void wl_proxy_marshal_array(struct wl_proxy* p, uint32_t opcode,
-                                       union wl_argument* args) {}
-
-MOZ_EXPORT struct wl_proxy* wl_proxy_create(
-    struct wl_proxy* factory, const struct wl_interface* interface) {
-  return NULL;
-}
-
-MOZ_EXPORT void* wl_proxy_create_wrapper(void* proxy) { return NULL; }
-
-MOZ_EXPORT void wl_proxy_wrapper_destroy(void* proxy_wrapper) {}
-
-MOZ_EXPORT struct wl_proxy* wl_proxy_marshal_constructor(
-    struct wl_proxy* proxy, uint32_t opcode,
-    const struct wl_interface* interface, ...) {
-  return NULL;
-}
-
-MOZ_EXPORT struct wl_proxy* wl_proxy_marshal_constructor_versioned(
-    struct wl_proxy* proxy, uint32_t opcode,
-    const struct wl_interface* interface, uint32_t version, ...) {
-  return NULL;
-}
-
-MOZ_EXPORT struct wl_proxy* wl_proxy_marshal_array_constructor(
-    struct wl_proxy* proxy, uint32_t opcode, union wl_argument* args,
-    const struct wl_interface* interface) {
-  return NULL;
-}
-
-MOZ_EXPORT struct wl_proxy* wl_proxy_marshal_array_constructor_versioned(
-    struct wl_proxy* proxy, uint32_t opcode, union wl_argument* args,
-    const struct wl_interface* interface, uint32_t version) {
-  return NULL;
-}
-
-MOZ_EXPORT void wl_proxy_destroy(struct wl_proxy* proxy) {}
-
-MOZ_EXPORT int wl_proxy_add_listener(struct wl_proxy* proxy,
-                                     void (**implementation)(void),
-                                     void* data) {
-  return -1;
-}
-
-MOZ_EXPORT const void* wl_proxy_get_listener(struct wl_proxy* proxy) {
-  return NULL;
-}
-
-typedef int (*wl_dispatcher_func_t)(const void*, void*, uint32_t,
-                                    const struct wl_message*,
-                                    union wl_argument*);
-
-MOZ_EXPORT int wl_proxy_add_dispatcher(struct wl_proxy* proxy,
-                                       wl_dispatcher_func_t dispatcher_func,
-                                       const void* dispatcher_data,
-                                       void* data) {
-  return -1;
-}
-
-MOZ_EXPORT void wl_proxy_set_user_data(struct wl_proxy* proxy,
-                                       void* user_data) {}
-
-MOZ_EXPORT void* wl_proxy_get_user_data(struct wl_proxy* proxy) { return NULL; }
-
-MOZ_EXPORT uint32_t wl_proxy_get_version(struct wl_proxy* proxy) { return -1; }
-
-MOZ_EXPORT uint32_t wl_proxy_get_id(struct wl_proxy* proxy) { return -1; }
-
-MOZ_EXPORT const char* wl_proxy_get_class(struct wl_proxy* proxy) {
-  return NULL;
-}
-
-MOZ_EXPORT void wl_proxy_set_queue(struct wl_proxy* proxy,
-                                   struct wl_event_queue* queue) {}
-
-MOZ_EXPORT struct wl_display* wl_display_connect(const char* name) {
-  return NULL;
-}
-
-MOZ_EXPORT struct wl_display* wl_display_connect_to_fd(int fd) { return NULL; }
-
-MOZ_EXPORT void wl_display_disconnect(struct wl_display* display) {}
-
-MOZ_EXPORT int wl_display_get_fd(struct wl_display* display) { return -1; }
-
-MOZ_EXPORT int wl_display_dispatch(struct wl_display* display) { return -1; }
-
-MOZ_EXPORT int wl_display_dispatch_queue(struct wl_display* display,
-                                         struct wl_event_queue* queue) {
-  return -1;
-}
-
-MOZ_EXPORT int wl_display_dispatch_queue_pending(struct wl_display* display,
-                                                 struct wl_event_queue* queue) {
-  return -1;
-}
-
-MOZ_EXPORT int wl_display_dispatch_pending(struct wl_display* display) {
-  return -1;
-}
-
-MOZ_EXPORT int wl_display_get_error(struct wl_display* display) { return -1; }
-
-MOZ_EXPORT uint32_t wl_display_get_protocol_error(
-    struct wl_display* display, const struct wl_interface** interface,
-    uint32_t* id) {
-  return -1;
-}
-
-MOZ_EXPORT int wl_display_flush(struct wl_display* display) { return -1; }
-
-MOZ_EXPORT int wl_display_roundtrip_queue(struct wl_display* display,
-                                          struct wl_event_queue* queue) {
-  return -1;
-}
-
-MOZ_EXPORT int wl_display_roundtrip(struct wl_display* display) { return -1; }
-
-MOZ_EXPORT struct wl_event_queue* wl_display_create_queue(
-    struct wl_display* display) {
-  return NULL;
-}
-
-MOZ_EXPORT int wl_display_prepare_read_queue(struct wl_display* display,
-                                             struct wl_event_queue* queue) {
-  return -1;
-}
-
-MOZ_EXPORT int wl_display_prepare_read(struct wl_display* display) {
-  return -1;
-}
-
-MOZ_EXPORT void wl_display_cancel_read(struct wl_display* display) {}
-
-MOZ_EXPORT int wl_display_read_events(struct wl_display* display) { return -1; }
-
-MOZ_EXPORT void wl_log_set_handler_client(wl_log_func_t handler) {}
-
-MOZ_EXPORT struct wl_egl_window* wl_egl_window_create(
-    struct wl_surface* surface, int width, int height) {
-  return NULL;
-}
-
-MOZ_EXPORT void wl_egl_window_destroy(struct wl_egl_window* egl_window) {}
-
-MOZ_EXPORT void wl_egl_window_resize(struct wl_egl_window* egl_window,
-                                     int width, int height, int dx, int dy) {}
-
-MOZ_EXPORT void wl_list_init(struct wl_list* list) {}
-
-MOZ_EXPORT void wl_list_insert(struct wl_list* list, struct wl_list* elm) {}
-
-MOZ_EXPORT void wl_list_remove(struct wl_list* elm) {}
-
-MOZ_EXPORT int wl_list_length(const struct wl_list* list) { return -1; }
-
-MOZ_EXPORT int wl_list_empty(const struct wl_list* list) { return -1; }
-
-MOZ_EXPORT void wl_list_insert_list(struct wl_list* list,
-                                    struct wl_list* other) {}
-
-MOZ_EXPORT struct wl_proxy* wl_proxy_marshal_flags(
-    struct wl_proxy* proxy, uint32_t opcode,
-    const struct wl_interface* interface, uint32_t version, uint32_t flags,
-    ...) {
-  return NULL;
-}
diff --git a/widget/gtk/mozwayland/mozwayland.h b/widget/gtk/mozwayland/mozwayland.h
deleted file mode 100644
index 22f80d6315a94..0000000000000
--- a/widget/gtk/mozwayland/mozwayland.h
+++ /dev/null
@@ -1,134 +0,0 @@
-/* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim:expandtab:shiftwidth=4:tabstop=4:
- */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-/* Wayland compatibility header, it makes Firefox build with
-   wayland-1.2 and Gtk+ 3.10.
-*/
-
-#ifndef __MozWayland_h_
-#define __MozWayland_h_
-
-#include "mozilla/Types.h"
-#include <gtk/gtk.h>
-#include <gdk/gdkwayland.h>
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-MOZ_EXPORT struct wl_display* wl_display_connect(const char* name);
-MOZ_EXPORT int wl_display_roundtrip_queue(struct wl_display* display,
-                                          struct wl_event_queue* queue);
-MOZ_EXPORT uint32_t wl_proxy_get_version(struct wl_proxy* proxy);
-MOZ_EXPORT void wl_proxy_marshal(struct wl_proxy* p, uint32_t opcode, ...);
-MOZ_EXPORT struct wl_proxy* wl_proxy_marshal_constructor(
-    struct wl_proxy* proxy, uint32_t opcode,
-    const struct wl_interface* interface, ...);
-MOZ_EXPORT struct wl_proxy* wl_proxy_marshal_constructor_versioned(
-    struct wl_proxy* proxy, uint32_t opcode,
-    const struct wl_interface* interface, uint32_t version, ...);
-MOZ_EXPORT void wl_proxy_destroy(struct wl_proxy* proxy);
-MOZ_EXPORT void* wl_proxy_create_wrapper(void* proxy);
-MOZ_EXPORT void wl_proxy_wrapper_destroy(void* proxy_wrapper);
-
-/* We need implement some missing functions from wayland-client-protocol.h
- */
-#ifndef WL_DATA_DEVICE_MANAGER_DND_ACTION_ENUM
-enum wl_data_device_manager_dnd_action {
-  WL_DATA_DEVICE_MANAGER_DND_ACTION_NONE = 0,
-  WL_DATA_DEVICE_MANAGER_DND_ACTION_COPY = 1,
-  WL_DATA_DEVICE_MANAGER_DND_ACTION_MOVE = 2,
-  WL_DATA_DEVICE_MANAGER_DND_ACTION_ASK = 4
-};
-#endif
-
-#ifndef WL_DATA_OFFER_SET_ACTIONS
-#  define WL_DATA_OFFER_SET_ACTIONS 4
-
-struct moz_wl_data_offer_listener {
-  void (*offer)(void* data, struct wl_data_offer* wl_data_offer,
-                const char* mime_type);
-  void (*source_actions)(void* data, struct wl_data_offer* wl_data_offer,
-                         uint32_t source_actions);
-  void (*action)(void* data, struct wl_data_offer* wl_data_offer,
-                 uint32_t dnd_action);
-};
-
-static inline void wl_data_offer_set_actions(
-    struct wl_data_offer* wl_data_offer, uint32_t dnd_actions,
-    uint32_t preferred_action) {
-  wl_proxy_marshal((struct wl_proxy*)wl_data_offer, WL_DATA_OFFER_SET_ACTIONS,
-                   dnd_actions, preferred_action);
-}
-#else
-typedef struct wl_data_offer_listener moz_wl_data_offer_listener;
-#endif
-
-#ifndef WL_SUBCOMPOSITOR_GET_SUBSURFACE
-#  define WL_SUBCOMPOSITOR_GET_SUBSURFACE 1
-struct wl_subcompositor;
-
-// Emulate what mozilla header wrapper does - make the
-// wl_subcompositor_interface always visible.
-#  pragma GCC visibility push(default)
-extern const struct wl_interface wl_subsurface_interface;
-extern const struct wl_interface wl_subcompositor_interface;
-#  pragma GCC visibility pop
-
-#  define WL_SUBSURFACE_DESTROY 0
-#  define WL_SUBSURFACE_SET_POSITION 1
-#  define WL_SUBSURFACE_PLACE_ABOVE 2
-#  define WL_SUBSURFACE_PLACE_BELOW 3
-#  define WL_SUBSURFACE_SET_SYNC 4
-#  define WL_SUBSURFACE_SET_DESYNC 5
-
-static inline struct wl_subsurface* wl_subcompositor_get_subsurface(
-    struct wl_subcompositor* wl_subcompositor, struct wl_surface* surface,
-    struct wl_surface* parent) {
-  struct wl_proxy* id;
-
-  id = wl_proxy_marshal_constructor(
-      (struct wl_proxy*)wl_subcompositor, WL_SUBCOMPOSITOR_GET_SUBSURFACE,
-      &wl_subsurface_interface, NULL, surface, parent);
-
-  return (struct wl_subsurface*)id;
-}
-
-static inline void wl_subsurface_set_position(
-    struct wl_subsurface* wl_subsurface, int32_t x, int32_t y) {
-  wl_proxy_marshal((struct wl_proxy*)wl_subsurface, WL_SUBSURFACE_SET_POSITION,
-                   x, y);
-}
-
-static inline void wl_subsurface_set_desync(
-    struct wl_subsurface* wl_subsurface) {
-  wl_proxy_marshal((struct wl_proxy*)wl_subsurface, WL_SUBSURFACE_SET_DESYNC);
-}
-
-static inline void wl_subsurface_destroy(struct wl_subsurface* wl_subsurface) {
-  wl_proxy_marshal((struct wl_proxy*)wl_subsurface, WL_SUBSURFACE_DESTROY);
-
-  wl_proxy_destroy((struct wl_proxy*)wl_subsurface);
-}
-#endif
-
-#ifndef WL_SURFACE_DAMAGE_BUFFER
-#  define WL_SURFACE_DAMAGE_BUFFER 9
-
-static inline void wl_surface_damage_buffer(struct wl_surface* wl_surface,
-                                            int32_t x, int32_t y, int32_t width,
-                                            int32_t height) {
-  wl_proxy_marshal((struct wl_proxy*)wl_surface, WL_SURFACE_DAMAGE_BUFFER, x, y,
-                   width, height);
-}
-#endif
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif /* __MozWayland_h_ */
diff --git a/widget/gtk/nsClipboardWayland.cpp b/widget/gtk/nsClipboardWayland.cpp
index 48455c110120b..7b4266b8e5573 100644
--- a/widget/gtk/nsClipboardWayland.cpp
+++ b/widget/gtk/nsClipboardWayland.cpp
@@ -19,13 +19,13 @@
 #include "mozilla/RefPtr.h"
 #include "mozilla/TimeStamp.h"
 #include "nsDragService.h"
-#include "mozwayland/mozwayland.h"
 #include "nsWaylandDisplay.h"
 #include "nsWindow.h"
 #include "mozilla/ScopeExit.h"
 #include "mozilla/StaticPrefs_widget.h"
 #include "nsThreadUtils.h"
 
+#include <wayland-client.h>
 #include <gtk/gtk.h>
 #include <poll.h>
 #include <stdlib.h>
@@ -115,7 +115,7 @@ static void data_offer_action(void* data, struct wl_data_offer* wl_data_offer,
  *                     the compositor after matching the source/destination
  *                     side actions.
  */
-static const moz_wl_data_offer_listener data_offer_listener = {
+static const wl_data_offer_listener data_offer_listener = {
     data_offer_offer, data_offer_source_actions, data_offer_action};
 
 DataOffer::DataOffer(wl_data_offer* aDataOffer)
diff --git a/widget/gtk/nsWaylandDisplay.h b/widget/gtk/nsWaylandDisplay.h
index a828a0a361965..99b2d00e2165b 100644
--- a/widget/gtk/nsWaylandDisplay.h
+++ b/widget/gtk/nsWaylandDisplay.h
@@ -8,9 +8,11 @@
 #ifndef __MOZ_WAYLAND_DISPLAY_H__
 #define __MOZ_WAYLAND_DISPLAY_H__
 
+#include <wayland-client.h>
+#include <gdk/gdk.h>
+
 #include "DMABufLibWrapper.h"
 
-#include "mozilla/widget/mozwayland.h"
 #include "mozilla/widget/gbm.h"
 #include "mozilla/widget/gtk-primary-selection-client-protocol.h"
 #include "mozilla/widget/idle-inhibit-unstable-v1-client-protocol.h"
diff --git a/widget/gtk/nsWindow.cpp b/widget/gtk/nsWindow.cpp
index 943bee63dad0b..587387a6183db 100644
--- a/widget/gtk/nsWindow.cpp
+++ b/widget/gtk/nsWindow.cpp
@@ -5286,10 +5286,6 @@ void nsWindow::ConfigureGdkWindow() {
     // tearing because Gecko does not align its framebuffer updates with
     // vblank.
     SetCompositorHint(GTK_WIDGET_COMPOSIDED_ENABLED);
-
-    // Dummy call to a function in mozgtk to prevent the linker from removing
-    // the dependency with --as-needed.
-    XShmQueryExtension(DefaultXDisplay());
   }
 #endif
 #ifdef MOZ_WAYLAND
diff --git a/widget/gtk/wayland/gtk-primary-selection-client-protocol.h b/widget/gtk/wayland/gtk-primary-selection-client-protocol.h
index 21cf84a6e96cd..770c35e03f058 100644
--- a/widget/gtk/wayland/gtk-primary-selection-client-protocol.h
+++ b/widget/gtk/wayland/gtk-primary-selection-client-protocol.h
@@ -5,7 +5,6 @@
 
 #include <stdint.h>
 #include <stddef.h>
-#include "mozilla/widget/mozwayland.h"
 #include "wayland-client.h"
 
 #ifdef  __cplusplus
-- 
2.34.1


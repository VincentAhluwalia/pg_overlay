From 7f3787a309c00f32738fe497aa521d736896d08f Mon Sep 17 00:00:00 2001
From: Tilmann Meyer <me@atiltedtree.dev>
Date: Thu, 18 Nov 2021 15:41:56 +0100
Subject: [PATCH 07/23] enable wayland glcontext regardless of X11

---
 gfx/gl/GLContextProvider.h          | 13 +++++++------
 gfx/gl/GLContextProviderWayland.cpp | 30 +++++------------------------
 2 files changed, 12 insertions(+), 31 deletions(-)

diff --git a/gfx/gl/GLContextProvider.h b/gfx/gl/GLContextProvider.h
index 12d1a497b960f..d30b01c14448a 100644
--- a/gfx/gl/GLContextProvider.h
+++ b/gfx/gl/GLContextProvider.h
@@ -55,17 +55,18 @@ namespace gl {
 #  define GL_CONTEXT_PROVIDER_NAME GLContextProviderX11
 #  include "GLContextProviderImpl.h"
 #  undef GL_CONTEXT_PROVIDER_NAME
-#  if defined(MOZ_WAYLAND)
-#    define GL_CONTEXT_PROVIDER_NAME GLContextProviderWayland
-#    include "GLContextProviderImpl.h"
-#    undef GL_CONTEXT_PROVIDER_NAME
-#    define GL_CONTEXT_PROVIDER_DEFAULT GLContextProviderWayland
-#  endif
 #  ifndef GL_CONTEXT_PROVIDER_DEFAULT
 #    define GL_CONTEXT_PROVIDER_DEFAULT GLContextProviderX11
 #  endif
 #endif
 
+#if defined(MOZ_WAYLAND)
+#  define GL_CONTEXT_PROVIDER_NAME GLContextProviderWayland
+#  include "GLContextProviderImpl.h"
+#  undef GL_CONTEXT_PROVIDER_NAME
+#  define GL_CONTEXT_PROVIDER_DEFAULT GLContextProviderWayland
+#endif
+
 #ifndef GL_CONTEXT_PROVIDER_DEFAULT
 #  define GL_CONTEXT_PROVIDER_DEFAULT GLContextProviderEGL
 #endif
diff --git a/gfx/gl/GLContextProviderWayland.cpp b/gfx/gl/GLContextProviderWayland.cpp
index 3f1f926cd9318..b3641be3ee4e5 100644
--- a/gfx/gl/GLContextProviderWayland.cpp
+++ b/gfx/gl/GLContextProviderWayland.cpp
@@ -14,7 +14,6 @@ namespace mozilla::gl {
 using namespace mozilla::gfx;
 using namespace mozilla::widget;
 
-static class GLContextProviderX11 sGLContextProviderX11;
 static class GLContextProviderEGL sGLContextProviderEGL;
 
 // Note that if there is no GTK display, `GdkIsX11Display` and
@@ -30,41 +29,22 @@ static class GLContextProviderEGL sGLContextProviderEGL;
 already_AddRefed<GLContext> GLContextProviderWayland::CreateForCompositorWidget(
     CompositorWidget* aCompositorWidget, bool aHardwareWebRender,
     bool aForceAccelerated) {
-  if (GdkIsWaylandDisplay()) {
-    return sGLContextProviderEGL.CreateForCompositorWidget(
-        aCompositorWidget, aHardwareWebRender, aForceAccelerated);
-  } else {
-    return sGLContextProviderX11.CreateForCompositorWidget(
-        aCompositorWidget, aHardwareWebRender, aForceAccelerated);
-  }
+  return sGLContextProviderEGL.CreateForCompositorWidget(
+      aCompositorWidget, aHardwareWebRender, aForceAccelerated);
 }
 
 /*static*/
 already_AddRefed<GLContext> GLContextProviderWayland::CreateHeadless(
     const GLContextCreateDesc& desc, nsACString* const out_failureId) {
-  if (GdkIsWaylandDisplay()) {
-    return sGLContextProviderEGL.CreateHeadless(desc, out_failureId);
-  } else {
-    return sGLContextProviderX11.CreateHeadless(desc, out_failureId);
-  }
+  return sGLContextProviderEGL.CreateHeadless(desc, out_failureId);
 }
 
 /*static*/
 GLContext* GLContextProviderWayland::GetGlobalContext() {
-  if (GdkIsWaylandDisplay()) {
-    return sGLContextProviderEGL.GetGlobalContext();
-  } else {
-    return sGLContextProviderX11.GetGlobalContext();
-  }
+  return sGLContextProviderEGL.GetGlobalContext();
 }
 
 /*static*/
-void GLContextProviderWayland::Shutdown() {
-  if (GdkIsWaylandDisplay()) {
-    sGLContextProviderEGL.Shutdown();
-  } else {
-    sGLContextProviderX11.Shutdown();
-  }
-}
+void GLContextProviderWayland::Shutdown() { sGLContextProviderEGL.Shutdown(); }
 
 }  // namespace mozilla::gl
-- 
2.35.1


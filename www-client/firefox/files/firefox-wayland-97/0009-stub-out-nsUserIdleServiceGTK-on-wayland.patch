From 72f9834701e6d032e4a93e083b42beea908beee4 Mon Sep 17 00:00:00 2001
From: Tilmann Meyer <me@atiltedtree.dev>
Date: Thu, 18 Nov 2021 15:44:30 +0100
Subject: [PATCH 09/23] stub out nsUserIdleServiceGTK on wayland

---
 widget/gtk/nsUserIdleServiceGTK.cpp | 17 +++++++++++++----
 widget/gtk/nsUserIdleServiceGTK.h   | 13 +++++++++----
 2 files changed, 22 insertions(+), 8 deletions(-)

diff --git a/widget/gtk/nsUserIdleServiceGTK.cpp b/widget/gtk/nsUserIdleServiceGTK.cpp
index 884d52a6cab9b..4b2b04f09a49b 100644
--- a/widget/gtk/nsUserIdleServiceGTK.cpp
+++ b/widget/gtk/nsUserIdleServiceGTK.cpp
@@ -17,6 +17,8 @@ using mozilla::LogLevel;
 
 static mozilla::LazyLogModule sIdleLog("nsIUserIdleService");
 
+#ifdef MOZ_X11
+
 typedef bool (*_XScreenSaverQueryExtension_fn)(Display* dpy, int* event_base,
                                                int* error_base);
 
@@ -25,16 +27,20 @@ typedef XScreenSaverInfo* (*_XScreenSaverAllocInfo_fn)(void);
 typedef void (*_XScreenSaverQueryInfo_fn)(Display* dpy, Drawable drw,
                                           XScreenSaverInfo* info);
 
-static bool sInitialized = false;
 static _XScreenSaverQueryExtension_fn _XSSQueryExtension = nullptr;
 static _XScreenSaverAllocInfo_fn _XSSAllocInfo = nullptr;
 static _XScreenSaverQueryInfo_fn _XSSQueryInfo = nullptr;
 
+#endif
+
+static bool sInitialized = false;
+
 static void Initialize() {
   if (!mozilla::widget::GdkIsX11Display()) {
     return;
   }
 
+#ifdef MOZ_X11
   // This will leak - See comments in ~nsUserIdleServiceGTK().
   PRLibrary* xsslib = PR_LoadLibrary("libXss.so.1");
   if (!xsslib)  // ouch.
@@ -59,14 +65,15 @@ static void Initialize() {
     MOZ_LOG(sIdleLog, LogLevel::Warning, ("Failed to get XSSQueryInfo!\n"));
 
   sInitialized = true;
+#endif
 }
 
-nsUserIdleServiceGTK::nsUserIdleServiceGTK() : mXssInfo(nullptr) {
-  Initialize();
-}
+nsUserIdleServiceGTK::nsUserIdleServiceGTK() { Initialize(); }
 
 nsUserIdleServiceGTK::~nsUserIdleServiceGTK() {
+#ifdef MOZ_X11
   if (mXssInfo) XFree(mXssInfo);
+#endif
 
 // It is not safe to unload libXScrnSaver until each display is closed because
 // the library registers callbacks through XESetCloseDisplay (Bug 397607).
@@ -84,6 +91,7 @@ bool nsUserIdleServiceGTK::PollIdleTime(uint32_t* aIdleTime) {
     // For some reason, we could not find xscreensaver.
     return false;
   }
+#ifdef MOZ_X11
 
   // Ask xscreensaver about idle time:
   *aIdleTime = 0;
@@ -109,6 +117,7 @@ bool nsUserIdleServiceGTK::PollIdleTime(uint32_t* aIdleTime) {
   }
   // If we get here, we couldn't get to XScreenSaver:
   MOZ_LOG(sIdleLog, LogLevel::Warning, ("XSSQueryExtension returned false!\n"));
+#endif
   return false;
 }
 
diff --git a/widget/gtk/nsUserIdleServiceGTK.h b/widget/gtk/nsUserIdleServiceGTK.h
index 9b9ba31846e3b..f089f3b87dc4c 100644
--- a/widget/gtk/nsUserIdleServiceGTK.h
+++ b/widget/gtk/nsUserIdleServiceGTK.h
@@ -9,9 +9,11 @@
 #define nsUserIdleServiceGTK_h__
 
 #include "nsUserIdleService.h"
-#include <X11/Xlib.h>
-#include <X11/Xutil.h>
-#include <gdk/gdkx.h>
+
+#ifdef MOZ_X11
+#  include <X11/Xlib.h>
+#  include <X11/Xutil.h>
+#  include <gdk/gdkx.h>
 
 typedef struct {
   Window window;               // Screen saver window
@@ -21,6 +23,7 @@ typedef struct {
   unsigned long idle;          // milliseconds idle
   unsigned long event_mask;    // event stuff
 } XScreenSaverInfo;
+#endif
 
 class nsUserIdleServiceGTK : public nsUserIdleService {
  public:
@@ -40,7 +43,9 @@ class nsUserIdleServiceGTK : public nsUserIdleService {
 
  private:
   ~nsUserIdleServiceGTK();
-  XScreenSaverInfo* mXssInfo;
+#ifdef MOZ_X11
+  XScreenSaverInfo* mXssInfo = nullptr;
+#endif
 
  protected:
   nsUserIdleServiceGTK();
-- 
2.35.1


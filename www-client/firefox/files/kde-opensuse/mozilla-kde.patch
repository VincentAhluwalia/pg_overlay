<?xml version="1.0" encoding="ascii"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US" lang="en-US">
<head>
<link rel="icon" href="/hg/mozilla/static/hgicon.png" type="image/png" />
<meta name="robots" content="index, nofollow"/>
<link rel="stylesheet" href="/hg/mozilla/static/style-gitweb.css" type="text/css" />
<script type="text/javascript" src="/hg/mozilla/static/mercurial.js"></script>

<title>mozilla: mozilla-kde.patch@17fe7b84cafe</title>
<link rel="alternate" type="application/atom+xml"
   href="/hg/mozilla/atom-log" title="Atom feed for mozilla"/>
<link rel="alternate" type="application/rss+xml"
   href="/hg/mozilla/rss-log" title="RSS feed for mozilla"/>
</head>
<body>

<div class="page_header">
<a href="https://mercurial-scm.org/" title="Mercurial" style="float: right;">Mercurial</a>
<a href="/">Mercurial</a> &gt; <a href="/hg">hg</a> &gt; <a href="/hg/mozilla">mozilla</a>  / file revision
</div>

<div class="page_nav">
<a href="/hg/mozilla/summary">summary</a> |
<a href="/hg/mozilla/shortlog">shortlog</a> |
<a href="/hg/mozilla/log">changelog</a> |
<a href="/hg/mozilla/graph">graph</a> |
<a href="/hg/mozilla/tags">tags</a> |
<a href="/hg/mozilla/bookmarks">bookmarks</a> |
<a href="/hg/mozilla/branches">branches</a> |
<a href="/hg/mozilla/file/17fe7b84cafe/">files</a> |
<a href="/hg/mozilla/rev/17fe7b84cafe">changeset</a> |
file |
<a href="/hg/mozilla/file/tip/mozilla-kde.patch">latest</a> |
<a href="/hg/mozilla/log/17fe7b84cafe/mozilla-kde.patch">revisions</a> |
<a href="/hg/mozilla/annotate/17fe7b84cafe/mozilla-kde.patch">annotate</a> |
<a href="/hg/mozilla/diff/17fe7b84cafe/mozilla-kde.patch">diff</a> |
<a href="/hg/mozilla/comparison/17fe7b84cafe/mozilla-kde.patch">comparison</a> |
<a href="/hg/mozilla/raw-file/17fe7b84cafe/mozilla-kde.patch">raw</a> |
<a href="/hg/mozilla/help">help</a>
<br/>
</div>

<div class="title">mozilla-kde.patch</div>

<div class="title_text">
<table cellspacing="0">
<tr>
 <td>author</td>
 <td>&#76;&#117;&#98;&#111;&#115;&#32;&#76;&#117;&#110;&#97;&#107;&#32;&#60;&#108;&#46;&#108;&#117;&#110;&#97;&#107;&#64;&#99;&#101;&#110;&#116;&#114;&#117;&#109;&#46;&#99;&#122;&#62;</td>
</tr>
<tr>
 <td></td>
 <td class="date age">Wed, 26 Apr 2017 14:34:14 +0200</td>
</tr>
<tr><td>branch</td><td>firefox53</td></tr>
<tr>
 <td>changeset 965</td>
 <td style="font-family:monospace"><a class="list" href="/hg/mozilla/rev/17fe7b84cafe">17fe7b84cafe</a></td>
</tr>

<tr>
<td>parent 961</td>
<td style="font-family:monospace">
<a class="list" href="/hg/mozilla/file/4665fe34fbce/mozilla-kde.patch">
4665fe34fbce
</a>
</td>
</tr>

<tr>
 <td>permissions</td>
 <td style="font-family:monospace">-rw-r--r--</td>
</tr>
</table>
</div>

<div class="page_path">
fixes a crash when KFileDialog is opened in Firefox and then cancelled (probably boo#1015998)
</div>

<div class="page_body">
<pre class="sourcelines stripes">
<a href="#l1"></a><span id="l1"># HG changeset patch</span>
<a href="#l2"></a><span id="l2"># Parent  564e9441f71b5bc368c33697428f756f5914eb04</span>
<a href="#l3"></a><span id="l3">Description: Add KDE integration to Firefox (toolkit parts)</span>
<a href="#l4"></a><span id="l4">Author: Wolfgang Rosenauer &lt;wolfgang@rosenauer.org&gt;</span>
<a href="#l5"></a><span id="l5">Author: Lubos Lunak &lt;lunak@suse.com&gt;</span>
<a href="#l6"></a><span id="l6">Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=140751</span>
<a href="#l7"></a><span id="l7">     https://bugzilla.novell.com/show_bug.cgi?id=170055</span>
<a href="#l8"></a><span id="l8"></span>
<a href="#l9"></a><span id="l9">diff --git a/modules/libpref/Preferences.cpp b/modules/libpref/Preferences.cpp</span>
<a href="#l10"></a><span id="l10">--- a/modules/libpref/Preferences.cpp</span>
<a href="#l11"></a><span id="l11">+++ b/modules/libpref/Preferences.cpp</span>
<a href="#l12"></a><span id="l12">@@ -31,16 +31,17 @@</span>
<a href="#l13"></a><span id="l13"> #include &quot;nsIZipReader.h&quot;</span>
<a href="#l14"></a><span id="l14"> #include &quot;nsPrefBranch.h&quot;</span>
<a href="#l15"></a><span id="l15"> #include &quot;nsXPIDLString.h&quot;</span>
<a href="#l16"></a><span id="l16"> #include &quot;nsCRT.h&quot;</span>
<a href="#l17"></a><span id="l17"> #include &quot;nsCOMArray.h&quot;</span>
<a href="#l18"></a><span id="l18"> #include &quot;nsXPCOMCID.h&quot;</span>
<a href="#l19"></a><span id="l19"> #include &quot;nsAutoPtr.h&quot;</span>
<a href="#l20"></a><span id="l20"> #include &quot;nsPrintfCString.h&quot;</span>
<a href="#l21"></a><span id="l21">+#include &quot;nsKDEUtils.h&quot;</span>
<a href="#l22"></a><span id="l22"> </span>
<a href="#l23"></a><span id="l23"> #include &quot;nsQuickSort.h&quot;</span>
<a href="#l24"></a><span id="l24"> #include &quot;PLDHashTable.h&quot;</span>
<a href="#l25"></a><span id="l25"> </span>
<a href="#l26"></a><span id="l26"> #include &quot;prefapi.h&quot;</span>
<a href="#l27"></a><span id="l27"> #include &quot;prefread.h&quot;</span>
<a href="#l28"></a><span id="l28"> #include &quot;prefapi_private_data.h&quot;</span>
<a href="#l29"></a><span id="l29"> </span>
<a href="#l30"></a><span id="l30">@@ -1174,16 +1175,34 @@ pref_LoadPrefsInDir(nsIFile* aDir, char </span>
<a href="#l31"></a><span id="l31"> </span>
<a href="#l32"></a><span id="l32"> static nsresult pref_LoadPrefsInDirList(const char *listId)</span>
<a href="#l33"></a><span id="l33"> {</span>
<a href="#l34"></a><span id="l34">   nsresult rv;</span>
<a href="#l35"></a><span id="l35">   nsCOMPtr&lt;nsIProperties&gt; dirSvc(do_GetService(NS_DIRECTORY_SERVICE_CONTRACTID, &amp;rv));</span>
<a href="#l36"></a><span id="l36">   if (NS_FAILED(rv))</span>
<a href="#l37"></a><span id="l37">     return rv;</span>
<a href="#l38"></a><span id="l38"> </span>
<a href="#l39"></a><span id="l39">+  // make sure we load these special files after all the others</span>
<a href="#l40"></a><span id="l40">+  static const char* specialFiles[] = {</span>
<a href="#l41"></a><span id="l41">+#if defined(XP_UNIX)</span>
<a href="#l42"></a><span id="l42">+    &quot;&quot;</span>
<a href="#l43"></a><span id="l43">+#endif</span>
<a href="#l44"></a><span id="l44">+  };</span>
<a href="#l45"></a><span id="l45">+</span>
<a href="#l46"></a><span id="l46">+  if (nsKDEUtils::kdeSession()) {</span>
<a href="#l47"></a><span id="l47">+    for(int i = 0;</span>
<a href="#l48"></a><span id="l48">+        i &lt; MOZ_ARRAY_LENGTH(specialFiles);</span>
<a href="#l49"></a><span id="l49">+        ++i ) {</span>
<a href="#l50"></a><span id="l50">+      if (*specialFiles[ i ] == '\0') {</span>
<a href="#l51"></a><span id="l51">+        specialFiles[ i ] = &quot;kde.js&quot;;</span>
<a href="#l52"></a><span id="l52">+        break;</span>
<a href="#l53"></a><span id="l53">+      }</span>
<a href="#l54"></a><span id="l54">+    }</span>
<a href="#l55"></a><span id="l55">+  }</span>
<a href="#l56"></a><span id="l56">+</span>
<a href="#l57"></a><span id="l57">   nsCOMPtr&lt;nsISimpleEnumerator&gt; list;</span>
<a href="#l58"></a><span id="l58">   dirSvc-&gt;Get(listId,</span>
<a href="#l59"></a><span id="l59">               NS_GET_IID(nsISimpleEnumerator),</span>
<a href="#l60"></a><span id="l60">               getter_AddRefs(list));</span>
<a href="#l61"></a><span id="l61">   if (!list)</span>
<a href="#l62"></a><span id="l62">     return NS_OK;</span>
<a href="#l63"></a><span id="l63"> </span>
<a href="#l64"></a><span id="l64">   bool hasMore;</span>
<a href="#l65"></a><span id="l65">@@ -1199,17 +1218,17 @@ static nsresult pref_LoadPrefsInDirList(</span>
<a href="#l66"></a><span id="l66"> </span>
<a href="#l67"></a><span id="l67">     nsAutoCString leaf;</span>
<a href="#l68"></a><span id="l68">     path-&gt;GetNativeLeafName(leaf);</span>
<a href="#l69"></a><span id="l69"> </span>
<a href="#l70"></a><span id="l70">     // Do we care if a file provided by this process fails to load?</span>
<a href="#l71"></a><span id="l71">     if (Substring(leaf, leaf.Length() - 4).EqualsLiteral(&quot;.xpi&quot;))</span>
<a href="#l72"></a><span id="l72">       ReadExtensionPrefs(path);</span>
<a href="#l73"></a><span id="l73">     else</span>
<a href="#l74"></a><span id="l74">-      pref_LoadPrefsInDir(path, nullptr, 0);</span>
<a href="#l75"></a><span id="l75">+      pref_LoadPrefsInDir(path, specialFiles, MOZ_ARRAY_LENGTH(specialFiles));</span>
<a href="#l76"></a><span id="l76">   }</span>
<a href="#l77"></a><span id="l77">   return NS_OK;</span>
<a href="#l78"></a><span id="l78"> }</span>
<a href="#l79"></a><span id="l79"> </span>
<a href="#l80"></a><span id="l80"> static nsresult pref_ReadPrefFromJar(nsZipArchive* jarReader, const char *name)</span>
<a href="#l81"></a><span id="l81"> {</span>
<a href="#l82"></a><span id="l82">   nsZipItemPtr&lt;char&gt; manifest(jarReader, name, true);</span>
<a href="#l83"></a><span id="l83">   NS_ENSURE_TRUE(manifest.Buffer(), NS_ERROR_NOT_AVAILABLE);</span>
<a href="#l84"></a><span id="l84">@@ -1303,24 +1322,36 @@ static nsresult pref_InitInitialObjects(</span>
<a href="#l85"></a><span id="l85">   /* these pref file names should not be used: we process them after all other application pref files for backwards compatibility */</span>
<a href="#l86"></a><span id="l86">   static const char* specialFiles[] = {</span>
<a href="#l87"></a><span id="l87"> #if defined(XP_MACOSX)</span>
<a href="#l88"></a><span id="l88">     &quot;macprefs.js&quot;</span>
<a href="#l89"></a><span id="l89"> #elif defined(XP_WIN)</span>
<a href="#l90"></a><span id="l90">     &quot;winpref.js&quot;</span>
<a href="#l91"></a><span id="l91"> #elif defined(XP_UNIX)</span>
<a href="#l92"></a><span id="l92">     &quot;unix.js&quot;</span>
<a href="#l93"></a><span id="l93">+    , &quot;&quot; // placeholder for KDE  (empty is otherwise harmless)</span>
<a href="#l94"></a><span id="l94"> #if defined(_AIX)</span>
<a href="#l95"></a><span id="l95">     , &quot;aix.js&quot;</span>
<a href="#l96"></a><span id="l96"> #endif</span>
<a href="#l97"></a><span id="l97"> #elif defined(XP_BEOS)</span>
<a href="#l98"></a><span id="l98">     &quot;beos.js&quot;</span>
<a href="#l99"></a><span id="l99"> #endif</span>
<a href="#l100"></a><span id="l100">   };</span>
<a href="#l101"></a><span id="l101"> </span>
<a href="#l102"></a><span id="l102">+  if(nsKDEUtils::kdeSession()) { // TODO what if some setup actually requires the helper?</span>
<a href="#l103"></a><span id="l103">+    for(int i = 0;</span>
<a href="#l104"></a><span id="l104">+        i &lt; MOZ_ARRAY_LENGTH(specialFiles);</span>
<a href="#l105"></a><span id="l105">+        ++i ) {</span>
<a href="#l106"></a><span id="l106">+      if( *specialFiles[ i ] == '\0' ) {</span>
<a href="#l107"></a><span id="l107">+        specialFiles[ i ] = &quot;kde.js&quot;;</span>
<a href="#l108"></a><span id="l108">+        break;</span>
<a href="#l109"></a><span id="l109">+      }</span>
<a href="#l110"></a><span id="l110">+    }</span>
<a href="#l111"></a><span id="l111">+  }</span>
<a href="#l112"></a><span id="l112">+</span>
<a href="#l113"></a><span id="l113">   rv = pref_LoadPrefsInDir(defaultPrefDir, specialFiles, ArrayLength(specialFiles));</span>
<a href="#l114"></a><span id="l114">   if (NS_FAILED(rv))</span>
<a href="#l115"></a><span id="l115">     NS_WARNING(&quot;Error parsing application default preferences.&quot;);</span>
<a href="#l116"></a><span id="l116"> </span>
<a href="#l117"></a><span id="l117">   // Load jar:$app/omni.jar!/defaults/preferences/*.js</span>
<a href="#l118"></a><span id="l118">   // or jar:$gre/omni.jar!/defaults/preferences/*.js.</span>
<a href="#l119"></a><span id="l119">   RefPtr&lt;nsZipArchive&gt; appJarReader = mozilla::Omnijar::GetReader(mozilla::Omnijar::APP);</span>
<a href="#l120"></a><span id="l120">   // GetReader(mozilla::Omnijar::APP) returns null when $app == $gre, in which</span>
<a href="#l121"></a><span id="l121">diff --git a/modules/libpref/moz.build b/modules/libpref/moz.build</span>
<a href="#l122"></a><span id="l122">--- a/modules/libpref/moz.build</span>
<a href="#l123"></a><span id="l123">+++ b/modules/libpref/moz.build</span>
<a href="#l124"></a><span id="l124">@@ -31,16 +31,20 @@ UNIFIED_SOURCES += [</span>
<a href="#l125"></a><span id="l125">     'prefread.cpp',</span>
<a href="#l126"></a><span id="l126"> ]</span>
<a href="#l127"></a><span id="l127"> </span>
<a href="#l128"></a><span id="l128"> # prefapi.cpp cannot be built in unified mode because it uses plarena.h</span>
<a href="#l129"></a><span id="l129"> SOURCES += [</span>
<a href="#l130"></a><span id="l130">     'prefapi.cpp',</span>
<a href="#l131"></a><span id="l131"> ]</span>
<a href="#l132"></a><span id="l132"> </span>
<a href="#l133"></a><span id="l133">+LOCAL_INCLUDES += [</span>
<a href="#l134"></a><span id="l134">+    '/toolkit/xre'</span>
<a href="#l135"></a><span id="l135">+]</span>
<a href="#l136"></a><span id="l136">+</span>
<a href="#l137"></a><span id="l137"> include('/ipc/chromium/chromium-config.mozbuild')</span>
<a href="#l138"></a><span id="l138"> </span>
<a href="#l139"></a><span id="l139"> FINAL_LIBRARY = 'xul'</span>
<a href="#l140"></a><span id="l140"> </span>
<a href="#l141"></a><span id="l141"> DEFINES['OS_ARCH'] = CONFIG['OS_ARCH']</span>
<a href="#l142"></a><span id="l142"> DEFINES['MOZ_WIDGET_TOOLKIT'] = CONFIG['MOZ_WIDGET_TOOLKIT']</span>
<a href="#l143"></a><span id="l143"> </span>
<a href="#l144"></a><span id="l144"> FINAL_TARGET_PP_FILES += [</span>
<a href="#l145"></a><span id="l145">diff --git a/python/mozbuild/mozpack/chrome/flags.py b/python/mozbuild/mozpack/chrome/flags.py</span>
<a href="#l146"></a><span id="l146">--- a/python/mozbuild/mozpack/chrome/flags.py</span>
<a href="#l147"></a><span id="l147">+++ b/python/mozbuild/mozpack/chrome/flags.py</span>
<a href="#l148"></a><span id="l148">@@ -211,16 +211,17 @@ class Flags(OrderedDict):</span>
<a href="#l149"></a><span id="l149">         'contentaccessible': Flag,</span>
<a href="#l150"></a><span id="l150">         'os': StringFlag,</span>
<a href="#l151"></a><span id="l151">         'osversion': VersionFlag,</span>
<a href="#l152"></a><span id="l152">         'abi': StringFlag,</span>
<a href="#l153"></a><span id="l153">         'platform': Flag,</span>
<a href="#l154"></a><span id="l154">         'xpcnativewrappers': Flag,</span>
<a href="#l155"></a><span id="l155">         'tablet': Flag,</span>
<a href="#l156"></a><span id="l156">         'process': StringFlag,</span>
<a href="#l157"></a><span id="l157">+        'desktop': StringFlag,</span>
<a href="#l158"></a><span id="l158">     }</span>
<a href="#l159"></a><span id="l159">     RE = re.compile(r'([!&lt;&gt;=]+)')</span>
<a href="#l160"></a><span id="l160"> </span>
<a href="#l161"></a><span id="l161">     def __init__(self, *flags):</span>
<a href="#l162"></a><span id="l162">         '''</span>
<a href="#l163"></a><span id="l163">         Initialize a set of flags given in string form.</span>
<a href="#l164"></a><span id="l164">            flags = Flags('contentaccessible=yes', 'appversion&gt;=3.5')</span>
<a href="#l165"></a><span id="l165">         '''</span>
<a href="#l166"></a><span id="l166">diff --git a/python/mozbuild/mozpack/chrome/manifest.py b/python/mozbuild/mozpack/chrome/manifest.py</span>
<a href="#l167"></a><span id="l167">--- a/python/mozbuild/mozpack/chrome/manifest.py</span>
<a href="#l168"></a><span id="l168">+++ b/python/mozbuild/mozpack/chrome/manifest.py</span>
<a href="#l169"></a><span id="l169">@@ -33,16 +33,17 @@ class ManifestEntry(object):</span>
<a href="#l170"></a><span id="l170">         'application',</span>
<a href="#l171"></a><span id="l171">         'platformversion',</span>
<a href="#l172"></a><span id="l172">         'os',</span>
<a href="#l173"></a><span id="l173">         'osversion',</span>
<a href="#l174"></a><span id="l174">         'abi',</span>
<a href="#l175"></a><span id="l175">         'xpcnativewrappers',</span>
<a href="#l176"></a><span id="l176">         'tablet',</span>
<a href="#l177"></a><span id="l177">         'process',</span>
<a href="#l178"></a><span id="l178">+        'desktop',</span>
<a href="#l179"></a><span id="l179">     ]</span>
<a href="#l180"></a><span id="l180"> </span>
<a href="#l181"></a><span id="l181">     def __init__(self, base, *flags):</span>
<a href="#l182"></a><span id="l182">         '''</span>
<a href="#l183"></a><span id="l183">         Initialize a manifest entry with the given base path and flags.</span>
<a href="#l184"></a><span id="l184">         '''</span>
<a href="#l185"></a><span id="l185">         self.base = base</span>
<a href="#l186"></a><span id="l186">         self.flags = Flags(*flags)</span>
<a href="#l187"></a><span id="l187">diff --git a/toolkit/components/downloads/moz.build b/toolkit/components/downloads/moz.build</span>
<a href="#l188"></a><span id="l188">--- a/toolkit/components/downloads/moz.build</span>
<a href="#l189"></a><span id="l189">+++ b/toolkit/components/downloads/moz.build</span>
<a href="#l190"></a><span id="l190">@@ -49,16 +49,17 @@ if CONFIG['OS_ARCH'] == 'WINNT':</span>
<a href="#l191"></a><span id="l191">         'nsDownloadScanner.cpp',</span>
<a href="#l192"></a><span id="l192">     ]</span>
<a href="#l193"></a><span id="l193"> </span>
<a href="#l194"></a><span id="l194"> FINAL_LIBRARY = 'xul'</span>
<a href="#l195"></a><span id="l195"> </span>
<a href="#l196"></a><span id="l196"> LOCAL_INCLUDES += [</span>
<a href="#l197"></a><span id="l197">     '../protobuf',</span>
<a href="#l198"></a><span id="l198">     '/ipc/chromium/src',</span>
<a href="#l199"></a><span id="l199">+    '/toolkit/xre',</span>
<a href="#l200"></a><span id="l200">     'chromium'</span>
<a href="#l201"></a><span id="l201"> ]</span>
<a href="#l202"></a><span id="l202"> </span>
<a href="#l203"></a><span id="l203"> DEFINES['GOOGLE_PROTOBUF_NO_RTTI'] = True</span>
<a href="#l204"></a><span id="l204"> DEFINES['GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER'] = True</span>
<a href="#l205"></a><span id="l205"> </span>
<a href="#l206"></a><span id="l206"> CXXFLAGS += CONFIG['TK_CFLAGS']</span>
<a href="#l207"></a><span id="l207"> </span>
<a href="#l208"></a><span id="l208">diff --git a/toolkit/components/downloads/nsDownloadManager.cpp b/toolkit/components/downloads/nsDownloadManager.cpp</span>
<a href="#l209"></a><span id="l209">--- a/toolkit/components/downloads/nsDownloadManager.cpp</span>
<a href="#l210"></a><span id="l210">+++ b/toolkit/components/downloads/nsDownloadManager.cpp</span>
<a href="#l211"></a><span id="l211">@@ -52,16 +52,20 @@</span>
<a href="#l212"></a><span id="l212"> #ifdef XP_WIN</span>
<a href="#l213"></a><span id="l213"> #include &lt;shlobj.h&gt;</span>
<a href="#l214"></a><span id="l214"> #include &quot;nsWindowsHelpers.h&quot;</span>
<a href="#l215"></a><span id="l215"> #ifdef DOWNLOAD_SCANNER</span>
<a href="#l216"></a><span id="l216"> #include &quot;nsDownloadScanner.h&quot;</span>
<a href="#l217"></a><span id="l217"> #endif</span>
<a href="#l218"></a><span id="l218"> #endif</span>
<a href="#l219"></a><span id="l219"> </span>
<a href="#l220"></a><span id="l220">+#if defined(XP_UNIX) &amp;&amp; !defined(XP_MACOSX)</span>
<a href="#l221"></a><span id="l221">+#include &quot;nsKDEUtils.h&quot;</span>
<a href="#l222"></a><span id="l222">+#endif</span>
<a href="#l223"></a><span id="l223">+</span>
<a href="#l224"></a><span id="l224"> #ifdef XP_MACOSX</span>
<a href="#l225"></a><span id="l225"> #include &lt;CoreFoundation/CoreFoundation.h&gt;</span>
<a href="#l226"></a><span id="l226"> #endif</span>
<a href="#l227"></a><span id="l227"> </span>
<a href="#l228"></a><span id="l228"> #ifdef MOZ_WIDGET_ANDROID</span>
<a href="#l229"></a><span id="l229"> #include &quot;FennecJNIWrappers.h&quot;</span>
<a href="#l230"></a><span id="l230"> #endif</span>
<a href="#l231"></a><span id="l231"> </span>
<a href="#l232"></a><span id="l232">@@ -2724,16 +2728,25 @@ nsDownload::SetState(DownloadState aStat</span>
<a href="#l233"></a><span id="l233">       nsCOMPtr&lt;nsIPrefBranch&gt; pref(do_GetService(NS_PREFSERVICE_CONTRACTID));</span>
<a href="#l234"></a><span id="l234"> </span>
<a href="#l235"></a><span id="l235">       // Master pref to control this function.</span>
<a href="#l236"></a><span id="l236">       bool showTaskbarAlert = true;</span>
<a href="#l237"></a><span id="l237">       if (pref)</span>
<a href="#l238"></a><span id="l238">         pref-&gt;GetBoolPref(PREF_BDM_SHOWALERTONCOMPLETE, &amp;showTaskbarAlert);</span>
<a href="#l239"></a><span id="l239"> </span>
<a href="#l240"></a><span id="l240">       if (showTaskbarAlert) {</span>
<a href="#l241"></a><span id="l241">+        if( nsKDEUtils::kdeSupport()) {</span>
<a href="#l242"></a><span id="l242">+          nsTArray&lt;nsCString&gt; command;</span>
<a href="#l243"></a><span id="l243">+          command.AppendElement( NS_LITERAL_CSTRING( &quot;DOWNLOADFINISHED&quot; ));</span>
<a href="#l244"></a><span id="l244">+          nsAutoString displayName;</span>
<a href="#l245"></a><span id="l245">+          GetDisplayName( displayName );</span>
<a href="#l246"></a><span id="l246">+          command.AppendElement( nsAutoCString( ToNewUTF8String( displayName )));</span>
<a href="#l247"></a><span id="l247">+          nsKDEUtils::command( command );</span>
<a href="#l248"></a><span id="l248">+        } else {</span>
<a href="#l249"></a><span id="l249">+        // begin non-KDE block</span>
<a href="#l250"></a><span id="l250">         int32_t alertInterval = 2000;</span>
<a href="#l251"></a><span id="l251">         if (pref)</span>
<a href="#l252"></a><span id="l252">           pref-&gt;GetIntPref(PREF_BDM_SHOWALERTINTERVAL, &amp;alertInterval);</span>
<a href="#l253"></a><span id="l253"> </span>
<a href="#l254"></a><span id="l254">         int64_t alertIntervalUSec = alertInterval * PR_USEC_PER_MSEC;</span>
<a href="#l255"></a><span id="l255">         int64_t goat = PR_Now() - mStartTime;</span>
<a href="#l256"></a><span id="l256">         showTaskbarAlert = goat &gt; alertIntervalUSec;</span>
<a href="#l257"></a><span id="l257"> </span>
<a href="#l258"></a><span id="l258">@@ -2765,16 +2778,17 @@ nsDownload::SetState(DownloadState aStat</span>
<a href="#l259"></a><span id="l259">                   message, !removeWhenDone,</span>
<a href="#l260"></a><span id="l260">                   mPrivate ? NS_LITERAL_STRING(&quot;private&quot;) : NS_LITERAL_STRING(&quot;non-private&quot;),</span>
<a href="#l261"></a><span id="l261">                   mDownloadManager, EmptyString(), NS_LITERAL_STRING(&quot;auto&quot;),</span>
<a href="#l262"></a><span id="l262">                   EmptyString(), EmptyString(), nullptr, mPrivate,</span>
<a href="#l263"></a><span id="l263">                   false /* requireInteraction */);</span>
<a href="#l264"></a><span id="l264">             }</span>
<a href="#l265"></a><span id="l265">         }</span>
<a href="#l266"></a><span id="l266">       }</span>
<a href="#l267"></a><span id="l267">+      }</span>
<a href="#l268"></a><span id="l268"> </span>
<a href="#l269"></a><span id="l269"> #if defined(XP_WIN) || defined(XP_MACOSX) || defined(MOZ_WIDGET_ANDROID) || defined(MOZ_WIDGET_GTK)</span>
<a href="#l270"></a><span id="l270">       nsCOMPtr&lt;nsIFileURL&gt; fileURL = do_QueryInterface(mTarget);</span>
<a href="#l271"></a><span id="l271">       nsCOMPtr&lt;nsIFile&gt; file;</span>
<a href="#l272"></a><span id="l272">       nsAutoString path;</span>
<a href="#l273"></a><span id="l273"> </span>
<a href="#l274"></a><span id="l274">       if (fileURL &amp;&amp;</span>
<a href="#l275"></a><span id="l275">           NS_SUCCEEDED(fileURL-&gt;GetFile(getter_AddRefs(file))) &amp;&amp;</span>
<a href="#l276"></a><span id="l276">diff --git a/toolkit/content/jar.mn b/toolkit/content/jar.mn</span>
<a href="#l277"></a><span id="l277">--- a/toolkit/content/jar.mn</span>
<a href="#l278"></a><span id="l278">+++ b/toolkit/content/jar.mn</span>
<a href="#l279"></a><span id="l279">@@ -73,29 +73,33 @@ toolkit.jar:</span>
<a href="#l280"></a><span id="l280">    content/global/bindings/colorpicker.xml     (widgets/colorpicker.xml)</span>
<a href="#l281"></a><span id="l281">    content/global/bindings/datekeeper.js       (widgets/datekeeper.js)</span>
<a href="#l282"></a><span id="l282">    content/global/bindings/datepicker.js       (widgets/datepicker.js)</span>
<a href="#l283"></a><span id="l283">    content/global/bindings/datetimepicker.xml  (widgets/datetimepicker.xml)</span>
<a href="#l284"></a><span id="l284">    content/global/bindings/datetimepopup.xml   (widgets/datetimepopup.xml)</span>
<a href="#l285"></a><span id="l285">    content/global/bindings/datetimebox.xml     (widgets/datetimebox.xml)</span>
<a href="#l286"></a><span id="l286">    content/global/bindings/datetimebox.css     (widgets/datetimebox.css)</span>
<a href="#l287"></a><span id="l287"> *  content/global/bindings/dialog.xml          (widgets/dialog.xml)</span>
<a href="#l288"></a><span id="l288">+*  content/global/bindings/dialog-kde.xml      (widgets/dialog-kde.xml)</span>
<a href="#l289"></a><span id="l289">+% override chrome://global/content/bindings/dialog.xml chrome://global/content/bindings/dialog-kde.xml desktop=kde</span>
<a href="#l290"></a><span id="l290">    content/global/bindings/editor.xml          (widgets/editor.xml)</span>
<a href="#l291"></a><span id="l291">    content/global/bindings/expander.xml        (widgets/expander.xml)</span>
<a href="#l292"></a><span id="l292">    content/global/bindings/filefield.xml       (widgets/filefield.xml)</span>
<a href="#l293"></a><span id="l293"> *  content/global/bindings/findbar.xml         (widgets/findbar.xml)</span>
<a href="#l294"></a><span id="l294">    content/global/bindings/general.xml         (widgets/general.xml)</span>
<a href="#l295"></a><span id="l295">    content/global/bindings/groupbox.xml        (widgets/groupbox.xml)</span>
<a href="#l296"></a><span id="l296">    content/global/bindings/listbox.xml         (widgets/listbox.xml)</span>
<a href="#l297"></a><span id="l297">    content/global/bindings/menu.xml            (widgets/menu.xml)</span>
<a href="#l298"></a><span id="l298">    content/global/bindings/menulist.xml        (widgets/menulist.xml)</span>
<a href="#l299"></a><span id="l299">    content/global/bindings/notification.xml    (widgets/notification.xml)</span>
<a href="#l300"></a><span id="l300">    content/global/bindings/numberbox.xml       (widgets/numberbox.xml)</span>
<a href="#l301"></a><span id="l301">    content/global/bindings/popup.xml           (widgets/popup.xml)</span>
<a href="#l302"></a><span id="l302"> *  content/global/bindings/preferences.xml     (widgets/preferences.xml)</span>
<a href="#l303"></a><span id="l303">+*  content/global/bindings/preferences-kde.xml (widgets/preferences-kde.xml)</span>
<a href="#l304"></a><span id="l304">+% override chrome://global/content/bindings/preferences.xml chrome://global/content/bindings/preferences-kde.xml desktop=kde</span>
<a href="#l305"></a><span id="l305">    content/global/bindings/progressmeter.xml   (widgets/progressmeter.xml)</span>
<a href="#l306"></a><span id="l306">    content/global/bindings/radio.xml           (widgets/radio.xml)</span>
<a href="#l307"></a><span id="l307">    content/global/bindings/remote-browser.xml  (widgets/remote-browser.xml)</span>
<a href="#l308"></a><span id="l308">    content/global/bindings/resizer.xml         (widgets/resizer.xml)</span>
<a href="#l309"></a><span id="l309">    content/global/bindings/richlistbox.xml     (widgets/richlistbox.xml)</span>
<a href="#l310"></a><span id="l310">    content/global/bindings/scale.xml           (widgets/scale.xml)</span>
<a href="#l311"></a><span id="l311">    content/global/bindings/scrollbar.xml       (widgets/scrollbar.xml)</span>
<a href="#l312"></a><span id="l312">    content/global/bindings/scrollbox.xml       (widgets/scrollbox.xml)</span>
<a href="#l313"></a><span id="l313">diff --git a/toolkit/content/widgets/dialog-kde.xml b/toolkit/content/widgets/dialog-kde.xml</span>
<a href="#l314"></a><span id="l314">new file mode 100644</span>
<a href="#l315"></a><span id="l315">--- /dev/null</span>
<a href="#l316"></a><span id="l316">+++ b/toolkit/content/widgets/dialog-kde.xml</span>
<a href="#l317"></a><span id="l317">@@ -0,0 +1,455 @@</span>
<a href="#l318"></a><span id="l318">+&lt;?xml version=&quot;1.0&quot;?&gt;</span>
<a href="#l319"></a><span id="l319">+&lt;!-- This Source Code Form is subject to the terms of the Mozilla Public</span>
<a href="#l320"></a><span id="l320">+   - License, v. 2.0. If a copy of the MPL was not distributed with this</span>
<a href="#l321"></a><span id="l321">+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. --&gt;</span>
<a href="#l322"></a><span id="l322">+</span>
<a href="#l323"></a><span id="l323">+</span>
<a href="#l324"></a><span id="l324">+&lt;bindings id=&quot;dialogBindings&quot;</span>
<a href="#l325"></a><span id="l325">+          xmlns=&quot;http://www.mozilla.org/xbl&quot;</span>
<a href="#l326"></a><span id="l326">+          xmlns:xul=&quot;http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul&quot;</span>
<a href="#l327"></a><span id="l327">+          xmlns:xbl=&quot;http://www.mozilla.org/xbl&quot;&gt;</span>
<a href="#l328"></a><span id="l328">+</span>
<a href="#l329"></a><span id="l329">+  &lt;binding id=&quot;dialog&quot; extends=&quot;chrome://global/content/bindings/general.xml#root-element&quot;&gt;</span>
<a href="#l330"></a><span id="l330">+    &lt;resources&gt;</span>
<a href="#l331"></a><span id="l331">+      &lt;stylesheet src=&quot;chrome://global/skin/dialog.css&quot;/&gt;</span>
<a href="#l332"></a><span id="l332">+    &lt;/resources&gt;</span>
<a href="#l333"></a><span id="l333">+    &lt;content&gt;</span>
<a href="#l334"></a><span id="l334">+      &lt;xul:vbox class=&quot;box-inherit dialog-content-box&quot; flex=&quot;1&quot;&gt;</span>
<a href="#l335"></a><span id="l335">+        &lt;children/&gt;</span>
<a href="#l336"></a><span id="l336">+      &lt;/xul:vbox&gt;</span>
<a href="#l337"></a><span id="l337">+</span>
<a href="#l338"></a><span id="l338">+      &lt;xul:hbox class=&quot;dialog-button-box&quot; anonid=&quot;buttons&quot;</span>
<a href="#l339"></a><span id="l339">+                xbl:inherits=&quot;pack=buttonpack,align=buttonalign,dir=buttondir,orient=buttonorient&quot;</span>
<a href="#l340"></a><span id="l340">+#ifdef XP_UNIX_GNOME</span>
<a href="#l341"></a><span id="l341">+                &gt;</span>
<a href="#l342"></a><span id="l342">+        &lt;xul:button dlgtype=&quot;disclosure&quot; class=&quot;dialog-button&quot; hidden=&quot;true&quot;/&gt;</span>
<a href="#l343"></a><span id="l343">+        &lt;xul:button dlgtype=&quot;help&quot; class=&quot;dialog-button&quot; hidden=&quot;true&quot;/&gt;</span>
<a href="#l344"></a><span id="l344">+        &lt;xul:button dlgtype=&quot;extra2&quot; class=&quot;dialog-button&quot; hidden=&quot;true&quot;/&gt;</span>
<a href="#l345"></a><span id="l345">+        &lt;xul:button dlgtype=&quot;extra1&quot; class=&quot;dialog-button&quot; hidden=&quot;true&quot;/&gt;</span>
<a href="#l346"></a><span id="l346">+        &lt;xul:spacer anonid=&quot;spacer&quot; flex=&quot;1&quot;/&gt;</span>
<a href="#l347"></a><span id="l347">+        &lt;xul:button dlgtype=&quot;cancel&quot; class=&quot;dialog-button&quot;/&gt;</span>
<a href="#l348"></a><span id="l348">+        &lt;xul:button dlgtype=&quot;accept&quot; class=&quot;dialog-button&quot; xbl:inherits=&quot;disabled=buttondisabledaccept&quot;/&gt;</span>
<a href="#l349"></a><span id="l349">+#elif XP_UNIX</span>
<a href="#l350"></a><span id="l350">+                &gt;</span>
<a href="#l351"></a><span id="l351">+        &lt;xul:button dlgtype=&quot;help&quot; class=&quot;dialog-button&quot; hidden=&quot;true&quot;/&gt;</span>
<a href="#l352"></a><span id="l352">+        &lt;xul:button dlgtype=&quot;extra2&quot; class=&quot;dialog-button&quot; hidden=&quot;true&quot;/&gt;</span>
<a href="#l353"></a><span id="l353">+        &lt;xul:spacer anonid=&quot;spacer&quot; flex=&quot;1&quot;/&gt;</span>
<a href="#l354"></a><span id="l354">+        &lt;xul:button dlgtype=&quot;accept&quot; class=&quot;dialog-button&quot; xbl:inherits=&quot;disabled=buttondisabledaccept&quot;/&gt;</span>
<a href="#l355"></a><span id="l355">+        &lt;xul:button dlgtype=&quot;extra1&quot; class=&quot;dialog-button&quot; hidden=&quot;true&quot;/&gt;</span>
<a href="#l356"></a><span id="l356">+        &lt;xul:button dlgtype=&quot;cancel&quot; class=&quot;dialog-button&quot;/&gt;</span>
<a href="#l357"></a><span id="l357">+        &lt;xul:button dlgtype=&quot;disclosure&quot; class=&quot;dialog-button&quot; hidden=&quot;true&quot;/&gt;</span>
<a href="#l358"></a><span id="l358">+#else</span>
<a href="#l359"></a><span id="l359">+                pack=&quot;end&quot;&gt;</span>
<a href="#l360"></a><span id="l360">+        &lt;xul:button dlgtype=&quot;extra2&quot; class=&quot;dialog-button&quot; hidden=&quot;true&quot;/&gt;</span>
<a href="#l361"></a><span id="l361">+        &lt;xul:spacer anonid=&quot;spacer&quot; flex=&quot;1&quot; hidden=&quot;true&quot;/&gt;</span>
<a href="#l362"></a><span id="l362">+        &lt;xul:button dlgtype=&quot;accept&quot; class=&quot;dialog-button&quot; xbl:inherits=&quot;disabled=buttondisabledaccept&quot;/&gt;</span>
<a href="#l363"></a><span id="l363">+        &lt;xul:button dlgtype=&quot;extra1&quot; class=&quot;dialog-button&quot; hidden=&quot;true&quot;/&gt;</span>
<a href="#l364"></a><span id="l364">+        &lt;xul:button dlgtype=&quot;cancel&quot; class=&quot;dialog-button&quot;/&gt;</span>
<a href="#l365"></a><span id="l365">+        &lt;xul:button dlgtype=&quot;help&quot; class=&quot;dialog-button&quot; hidden=&quot;true&quot;/&gt;</span>
<a href="#l366"></a><span id="l366">+        &lt;xul:button dlgtype=&quot;disclosure&quot; class=&quot;dialog-button&quot; hidden=&quot;true&quot;/&gt;</span>
<a href="#l367"></a><span id="l367">+#endif</span>
<a href="#l368"></a><span id="l368">+      &lt;/xul:hbox&gt;</span>
<a href="#l369"></a><span id="l369">+    &lt;/content&gt;</span>
<a href="#l370"></a><span id="l370">+</span>
<a href="#l371"></a><span id="l371">+    &lt;implementation&gt;</span>
<a href="#l372"></a><span id="l372">+      &lt;field name=&quot;_mStrBundle&quot;&gt;null&lt;/field&gt;</span>
<a href="#l373"></a><span id="l373">+      &lt;field name=&quot;_closeHandler&quot;&gt;(function(event) {</span>
<a href="#l374"></a><span id="l374">+        if (!document.documentElement.cancelDialog())</span>
<a href="#l375"></a><span id="l375">+          event.preventDefault();</span>
<a href="#l376"></a><span id="l376">+      })&lt;/field&gt;</span>
<a href="#l377"></a><span id="l377">+</span>
<a href="#l378"></a><span id="l378">+      &lt;property name=&quot;buttons&quot;</span>
<a href="#l379"></a><span id="l379">+                onget=&quot;return this.getAttribute('buttons');&quot;</span>
<a href="#l380"></a><span id="l380">+                onset=&quot;this._configureButtons(val); return val;&quot;/&gt;</span>
<a href="#l381"></a><span id="l381">+</span>
<a href="#l382"></a><span id="l382">+      &lt;property name=&quot;defaultButton&quot;&gt;</span>
<a href="#l383"></a><span id="l383">+        &lt;getter&gt;</span>
<a href="#l384"></a><span id="l384">+        &lt;![CDATA[</span>
<a href="#l385"></a><span id="l385">+          if (this.hasAttribute(&quot;defaultButton&quot;))</span>
<a href="#l386"></a><span id="l386">+            return this.getAttribute(&quot;defaultButton&quot;);</span>
<a href="#l387"></a><span id="l387">+          return &quot;accept&quot;;  // default to the accept button</span>
<a href="#l388"></a><span id="l388">+        ]]&gt;</span>
<a href="#l389"></a><span id="l389">+        &lt;/getter&gt;</span>
<a href="#l390"></a><span id="l390">+        &lt;setter&gt;</span>
<a href="#l391"></a><span id="l391">+        &lt;![CDATA[</span>
<a href="#l392"></a><span id="l392">+          this._setDefaultButton(val);</span>
<a href="#l393"></a><span id="l393">+          return val;</span>
<a href="#l394"></a><span id="l394">+        ]]&gt;</span>
<a href="#l395"></a><span id="l395">+        &lt;/setter&gt;</span>
<a href="#l396"></a><span id="l396">+      &lt;/property&gt;</span>
<a href="#l397"></a><span id="l397">+</span>
<a href="#l398"></a><span id="l398">+      &lt;method name=&quot;acceptDialog&quot;&gt;</span>
<a href="#l399"></a><span id="l399">+        &lt;body&gt;</span>
<a href="#l400"></a><span id="l400">+        &lt;![CDATA[</span>
<a href="#l401"></a><span id="l401">+          return this._doButtonCommand(&quot;accept&quot;);</span>
<a href="#l402"></a><span id="l402">+        ]]&gt;</span>
<a href="#l403"></a><span id="l403">+        &lt;/body&gt;</span>
<a href="#l404"></a><span id="l404">+      &lt;/method&gt;</span>
<a href="#l405"></a><span id="l405">+</span>
<a href="#l406"></a><span id="l406">+      &lt;method name=&quot;cancelDialog&quot;&gt;</span>
<a href="#l407"></a><span id="l407">+        &lt;body&gt;</span>
<a href="#l408"></a><span id="l408">+        &lt;![CDATA[</span>
<a href="#l409"></a><span id="l409">+          return this._doButtonCommand(&quot;cancel&quot;);</span>
<a href="#l410"></a><span id="l410">+        ]]&gt;</span>
<a href="#l411"></a><span id="l411">+        &lt;/body&gt;</span>
<a href="#l412"></a><span id="l412">+      &lt;/method&gt;</span>
<a href="#l413"></a><span id="l413">+</span>
<a href="#l414"></a><span id="l414">+      &lt;method name=&quot;getButton&quot;&gt;</span>
<a href="#l415"></a><span id="l415">+        &lt;parameter name=&quot;aDlgType&quot;/&gt;</span>
<a href="#l416"></a><span id="l416">+        &lt;body&gt;</span>
<a href="#l417"></a><span id="l417">+        &lt;![CDATA[</span>
<a href="#l418"></a><span id="l418">+          return this._buttons[aDlgType];</span>
<a href="#l419"></a><span id="l419">+        ]]&gt;</span>
<a href="#l420"></a><span id="l420">+        &lt;/body&gt;</span>
<a href="#l421"></a><span id="l421">+      &lt;/method&gt;</span>
<a href="#l422"></a><span id="l422">+</span>
<a href="#l423"></a><span id="l423">+      &lt;method name=&quot;moveToAlertPosition&quot;&gt;</span>
<a href="#l424"></a><span id="l424">+        &lt;body&gt;</span>
<a href="#l425"></a><span id="l425">+        &lt;![CDATA[</span>
<a href="#l426"></a><span id="l426">+          // hack. we need this so the window has something like its final size</span>
<a href="#l427"></a><span id="l427">+          if (window.outerWidth == 1) {</span>
<a href="#l428"></a><span id="l428">+            dump(&quot;Trying to position a sizeless window; caller should have called sizeToContent() or sizeTo(). See bug 75649.\n&quot;);</span>
<a href="#l429"></a><span id="l429">+            sizeToContent();</span>
<a href="#l430"></a><span id="l430">+          }</span>
<a href="#l431"></a><span id="l431">+</span>
<a href="#l432"></a><span id="l432">+          if (opener) {</span>
<a href="#l433"></a><span id="l433">+            var xOffset = (opener.outerWidth - window.outerWidth) / 2;</span>
<a href="#l434"></a><span id="l434">+            var yOffset = opener.outerHeight / 5;</span>
<a href="#l435"></a><span id="l435">+</span>
<a href="#l436"></a><span id="l436">+            var newX = opener.screenX + xOffset;</span>
<a href="#l437"></a><span id="l437">+            var newY = opener.screenY + yOffset;</span>
<a href="#l438"></a><span id="l438">+          } else {</span>
<a href="#l439"></a><span id="l439">+            newX = (screen.availWidth - window.outerWidth) / 2;</span>
<a href="#l440"></a><span id="l440">+            newY = (screen.availHeight - window.outerHeight) / 2;</span>
<a href="#l441"></a><span id="l441">+          }</span>
<a href="#l442"></a><span id="l442">+</span>
<a href="#l443"></a><span id="l443">+          // ensure the window is fully onscreen (if smaller than the screen)</span>
<a href="#l444"></a><span id="l444">+          if (newX &lt; screen.availLeft)</span>
<a href="#l445"></a><span id="l445">+            newX = screen.availLeft + 20;</span>
<a href="#l446"></a><span id="l446">+          if ((newX + window.outerWidth) &gt; (screen.availLeft + screen.availWidth))</span>
<a href="#l447"></a><span id="l447">+            newX = (screen.availLeft + screen.availWidth) - window.outerWidth - 20;</span>
<a href="#l448"></a><span id="l448">+</span>
<a href="#l449"></a><span id="l449">+          if (newY &lt; screen.availTop)</span>
<a href="#l450"></a><span id="l450">+            newY = screen.availTop + 20;</span>
<a href="#l451"></a><span id="l451">+          if ((newY + window.outerHeight) &gt; (screen.availTop + screen.availHeight))</span>
<a href="#l452"></a><span id="l452">+            newY = (screen.availTop + screen.availHeight) - window.outerHeight - 60;</span>
<a href="#l453"></a><span id="l453">+</span>
<a href="#l454"></a><span id="l454">+          window.moveTo( newX, newY );</span>
<a href="#l455"></a><span id="l455">+        ]]&gt;</span>
<a href="#l456"></a><span id="l456">+        &lt;/body&gt;</span>
<a href="#l457"></a><span id="l457">+      &lt;/method&gt;</span>
<a href="#l458"></a><span id="l458">+</span>
<a href="#l459"></a><span id="l459">+      &lt;method name=&quot;centerWindowOnScreen&quot;&gt;</span>
<a href="#l460"></a><span id="l460">+        &lt;body&gt;</span>
<a href="#l461"></a><span id="l461">+        &lt;![CDATA[</span>
<a href="#l462"></a><span id="l462">+          var xOffset = screen.availWidth / 2 - window.outerWidth / 2;</span>
<a href="#l463"></a><span id="l463">+          var yOffset = screen.availHeight / 2 - window.outerHeight / 2;</span>
<a href="#l464"></a><span id="l464">+</span>
<a href="#l465"></a><span id="l465">+          xOffset = xOffset &gt; 0 ? xOffset : 0;</span>
<a href="#l466"></a><span id="l466">+          yOffset = yOffset &gt; 0 ? yOffset : 0;</span>
<a href="#l467"></a><span id="l467">+          window.moveTo(xOffset, yOffset);</span>
<a href="#l468"></a><span id="l468">+        ]]&gt;</span>
<a href="#l469"></a><span id="l469">+        &lt;/body&gt;</span>
<a href="#l470"></a><span id="l470">+      &lt;/method&gt;</span>
<a href="#l471"></a><span id="l471">+</span>
<a href="#l472"></a><span id="l472">+      &lt;constructor&gt;</span>
<a href="#l473"></a><span id="l473">+      &lt;![CDATA[</span>
<a href="#l474"></a><span id="l474">+        this._configureButtons(this.buttons);</span>
<a href="#l475"></a><span id="l475">+</span>
<a href="#l476"></a><span id="l476">+        // listen for when window is closed via native close buttons</span>
<a href="#l477"></a><span id="l477">+        window.addEventListener(&quot;close&quot;, this._closeHandler);</span>
<a href="#l478"></a><span id="l478">+</span>
<a href="#l479"></a><span id="l479">+        // for things that we need to initialize after onload fires</span>
<a href="#l480"></a><span id="l480">+        window.addEventListener(&quot;load&quot;, this.postLoadInit);</span>
<a href="#l481"></a><span id="l481">+</span>
<a href="#l482"></a><span id="l482">+        window.moveToAlertPosition = this.moveToAlertPosition;</span>
<a href="#l483"></a><span id="l483">+        window.centerWindowOnScreen = this.centerWindowOnScreen;</span>
<a href="#l484"></a><span id="l484">+      ]]&gt;</span>
<a href="#l485"></a><span id="l485">+      &lt;/constructor&gt;</span>
<a href="#l486"></a><span id="l486">+</span>
<a href="#l487"></a><span id="l487">+      &lt;method name=&quot;postLoadInit&quot;&gt;</span>
<a href="#l488"></a><span id="l488">+        &lt;parameter name=&quot;aEvent&quot;/&gt;</span>
<a href="#l489"></a><span id="l489">+        &lt;body&gt;</span>
<a href="#l490"></a><span id="l490">+        &lt;![CDATA[</span>
<a href="#l491"></a><span id="l491">+          function focusInit() {</span>
<a href="#l492"></a><span id="l492">+            const dialog = document.documentElement;</span>
<a href="#l493"></a><span id="l493">+            const defaultButton = dialog.getButton(dialog.defaultButton);</span>
<a href="#l494"></a><span id="l494">+            // give focus to the first focusable element in the dialog</span>
<a href="#l495"></a><span id="l495">+            if (!document.commandDispatcher.focusedElement) {</span>
<a href="#l496"></a><span id="l496">+              document.commandDispatcher.advanceFocusIntoSubtree(dialog);</span>
<a href="#l497"></a><span id="l497">+</span>
<a href="#l498"></a><span id="l498">+              var focusedElt = document.commandDispatcher.focusedElement;</span>
<a href="#l499"></a><span id="l499">+              if (focusedElt) {</span>
<a href="#l500"></a><span id="l500">+                var initialFocusedElt = focusedElt;</span>
<a href="#l501"></a><span id="l501">+                while (focusedElt.localName == &quot;tab&quot; ||</span>
<a href="#l502"></a><span id="l502">+                       focusedElt.getAttribute(&quot;noinitialfocus&quot;) == &quot;true&quot;) {</span>
<a href="#l503"></a><span id="l503">+                  document.commandDispatcher.advanceFocusIntoSubtree(focusedElt);</span>
<a href="#l504"></a><span id="l504">+                  focusedElt = document.commandDispatcher.focusedElement;</span>
<a href="#l505"></a><span id="l505">+                  if (focusedElt == initialFocusedElt)</span>
<a href="#l506"></a><span id="l506">+                    break;</span>
<a href="#l507"></a><span id="l507">+                }</span>
<a href="#l508"></a><span id="l508">+</span>
<a href="#l509"></a><span id="l509">+                if (initialFocusedElt.localName == &quot;tab&quot;) {</span>
<a href="#l510"></a><span id="l510">+                  if (focusedElt.hasAttribute(&quot;dlgtype&quot;)) {</span>
<a href="#l511"></a><span id="l511">+                    // We don't want to focus on anonymous OK, Cancel, etc. buttons,</span>
<a href="#l512"></a><span id="l512">+                    // so return focus to the tab itself</span>
<a href="#l513"></a><span id="l513">+                    initialFocusedElt.focus();</span>
<a href="#l514"></a><span id="l514">+                  }</span>
<a href="#l515"></a><span id="l515">+                } else if (!/Mac/.test(navigator.platform) &amp;&amp;</span>
<a href="#l516"></a><span id="l516">+                           focusedElt.hasAttribute(&quot;dlgtype&quot;) &amp;&amp; focusedElt != defaultButton) {</span>
<a href="#l517"></a><span id="l517">+                  defaultButton.focus();</span>
<a href="#l518"></a><span id="l518">+                }</span>
<a href="#l519"></a><span id="l519">+              }</span>
<a href="#l520"></a><span id="l520">+            }</span>
<a href="#l521"></a><span id="l521">+</span>
<a href="#l522"></a><span id="l522">+            try {</span>
<a href="#l523"></a><span id="l523">+              if (defaultButton)</span>
<a href="#l524"></a><span id="l524">+                window.notifyDefaultButtonLoaded(defaultButton);</span>
<a href="#l525"></a><span id="l525">+            } catch (e) { }</span>
<a href="#l526"></a><span id="l526">+          }</span>
<a href="#l527"></a><span id="l527">+</span>
<a href="#l528"></a><span id="l528">+          // Give focus after onload completes, see bug 103197.</span>
<a href="#l529"></a><span id="l529">+          setTimeout(focusInit, 0);</span>
<a href="#l530"></a><span id="l530">+        ]]&gt;</span>
<a href="#l531"></a><span id="l531">+        &lt;/body&gt;</span>
<a href="#l532"></a><span id="l532">+      &lt;/method&gt;</span>
<a href="#l533"></a><span id="l533">+</span>
<a href="#l534"></a><span id="l534">+      &lt;property name=&quot;mStrBundle&quot;&gt;</span>
<a href="#l535"></a><span id="l535">+        &lt;getter&gt;</span>
<a href="#l536"></a><span id="l536">+        &lt;![CDATA[</span>
<a href="#l537"></a><span id="l537">+          if (!this._mStrBundle) {</span>
<a href="#l538"></a><span id="l538">+            // need to create string bundle manually instead of using &lt;xul:stringbundle/&gt;</span>
<a href="#l539"></a><span id="l539">+            // see bug 63370 for details</span>
<a href="#l540"></a><span id="l540">+            this._mStrBundle = Components.classes[&quot;@mozilla.org/intl/stringbundle;1&quot;]</span>
<a href="#l541"></a><span id="l541">+                                         .getService(Components.interfaces.nsIStringBundleService)</span>
<a href="#l542"></a><span id="l542">+                                         .createBundle(&quot;chrome://global/locale/dialog.properties&quot;);</span>
<a href="#l543"></a><span id="l543">+          }</span>
<a href="#l544"></a><span id="l544">+          return this._mStrBundle;</span>
<a href="#l545"></a><span id="l545">+        ]]&gt;&lt;/getter&gt;</span>
<a href="#l546"></a><span id="l546">+      &lt;/property&gt;</span>
<a href="#l547"></a><span id="l547">+</span>
<a href="#l548"></a><span id="l548">+      &lt;method name=&quot;_configureButtons&quot;&gt;</span>
<a href="#l549"></a><span id="l549">+        &lt;parameter name=&quot;aButtons&quot;/&gt;</span>
<a href="#l550"></a><span id="l550">+        &lt;body&gt;</span>
<a href="#l551"></a><span id="l551">+        &lt;![CDATA[</span>
<a href="#l552"></a><span id="l552">+          // by default, get all the anonymous button elements</span>
<a href="#l553"></a><span id="l553">+          var buttons = {};</span>
<a href="#l554"></a><span id="l554">+          this._buttons = buttons;</span>
<a href="#l555"></a><span id="l555">+          buttons.accept = document.getAnonymousElementByAttribute(this, &quot;dlgtype&quot;, &quot;accept&quot;);</span>
<a href="#l556"></a><span id="l556">+          buttons.cancel = document.getAnonymousElementByAttribute(this, &quot;dlgtype&quot;, &quot;cancel&quot;);</span>
<a href="#l557"></a><span id="l557">+          buttons.extra1 = document.getAnonymousElementByAttribute(this, &quot;dlgtype&quot;, &quot;extra1&quot;);</span>
<a href="#l558"></a><span id="l558">+          buttons.extra2 = document.getAnonymousElementByAttribute(this, &quot;dlgtype&quot;, &quot;extra2&quot;);</span>
<a href="#l559"></a><span id="l559">+          buttons.help = document.getAnonymousElementByAttribute(this, &quot;dlgtype&quot;, &quot;help&quot;);</span>
<a href="#l560"></a><span id="l560">+          buttons.disclosure = document.getAnonymousElementByAttribute(this, &quot;dlgtype&quot;, &quot;disclosure&quot;);</span>
<a href="#l561"></a><span id="l561">+</span>
<a href="#l562"></a><span id="l562">+          // look for any overriding explicit button elements</span>
<a href="#l563"></a><span id="l563">+          var exBtns = this.getElementsByAttribute(&quot;dlgtype&quot;, &quot;*&quot;);</span>
<a href="#l564"></a><span id="l564">+          var dlgtype;</span>
<a href="#l565"></a><span id="l565">+          var i;</span>
<a href="#l566"></a><span id="l566">+          for (i = 0; i &lt; exBtns.length; ++i) {</span>
<a href="#l567"></a><span id="l567">+            dlgtype = exBtns[i].getAttribute(&quot;dlgtype&quot;);</span>
<a href="#l568"></a><span id="l568">+            buttons[dlgtype].hidden = true; // hide the anonymous button</span>
<a href="#l569"></a><span id="l569">+            buttons[dlgtype] = exBtns[i];</span>
<a href="#l570"></a><span id="l570">+          }</span>
<a href="#l571"></a><span id="l571">+</span>
<a href="#l572"></a><span id="l572">+          // add the label and oncommand handler to each button</span>
<a href="#l573"></a><span id="l573">+          for (dlgtype in buttons) {</span>
<a href="#l574"></a><span id="l574">+            var button = buttons[dlgtype];</span>
<a href="#l575"></a><span id="l575">+            button.addEventListener(&quot;command&quot;, this._handleButtonCommand, true);</span>
<a href="#l576"></a><span id="l576">+</span>
<a href="#l577"></a><span id="l577">+            // don't override custom labels with pre-defined labels on explicit buttons</span>
<a href="#l578"></a><span id="l578">+            if (!button.hasAttribute(&quot;label&quot;)) {</span>
<a href="#l579"></a><span id="l579">+              // dialog attributes override the default labels in dialog.properties</span>
<a href="#l580"></a><span id="l580">+              if (this.hasAttribute(&quot;buttonlabel&quot; + dlgtype)) {</span>
<a href="#l581"></a><span id="l581">+                button.setAttribute(&quot;label&quot;, this.getAttribute(&quot;buttonlabel&quot; + dlgtype));</span>
<a href="#l582"></a><span id="l582">+                if (this.hasAttribute(&quot;buttonaccesskey&quot; + dlgtype))</span>
<a href="#l583"></a><span id="l583">+                  button.setAttribute(&quot;accesskey&quot;, this.getAttribute(&quot;buttonaccesskey&quot; + dlgtype));</span>
<a href="#l584"></a><span id="l584">+              } else if (dlgtype != &quot;extra1&quot; &amp;&amp; dlgtype != &quot;extra2&quot;) {</span>
<a href="#l585"></a><span id="l585">+                button.setAttribute(&quot;label&quot;, this.mStrBundle.GetStringFromName(&quot;button-&quot; + dlgtype));</span>
<a href="#l586"></a><span id="l586">+                var accessKey = this.mStrBundle.GetStringFromName(&quot;accesskey-&quot; + dlgtype);</span>
<a href="#l587"></a><span id="l587">+                if (accessKey)</span>
<a href="#l588"></a><span id="l588">+                  button.setAttribute(&quot;accesskey&quot;, accessKey);</span>
<a href="#l589"></a><span id="l589">+              }</span>
<a href="#l590"></a><span id="l590">+            }</span>
<a href="#l591"></a><span id="l591">+            // allow specifying alternate icons in the dialog header</span>
<a href="#l592"></a><span id="l592">+            if (!button.hasAttribute(&quot;icon&quot;)) {</span>
<a href="#l593"></a><span id="l593">+              // if there's an icon specified, use that</span>
<a href="#l594"></a><span id="l594">+              if (this.hasAttribute(&quot;buttonicon&quot; + dlgtype))</span>
<a href="#l595"></a><span id="l595">+                button.setAttribute(&quot;icon&quot;, this.getAttribute(&quot;buttonicon&quot; + dlgtype));</span>
<a href="#l596"></a><span id="l596">+              // otherwise set defaults</span>
<a href="#l597"></a><span id="l597">+              else</span>
<a href="#l598"></a><span id="l598">+                switch (dlgtype) {</span>
<a href="#l599"></a><span id="l599">+                  case &quot;accept&quot;:</span>
<a href="#l600"></a><span id="l600">+                    button.setAttribute(&quot;icon&quot;, &quot;accept&quot;);</span>
<a href="#l601"></a><span id="l601">+                    break;</span>
<a href="#l602"></a><span id="l602">+                  case &quot;cancel&quot;:</span>
<a href="#l603"></a><span id="l603">+                    button.setAttribute(&quot;icon&quot;, &quot;cancel&quot;);</span>
<a href="#l604"></a><span id="l604">+                    break;</span>
<a href="#l605"></a><span id="l605">+                  case &quot;disclosure&quot;:</span>
<a href="#l606"></a><span id="l606">+                    button.setAttribute(&quot;icon&quot;, &quot;properties&quot;);</span>
<a href="#l607"></a><span id="l607">+                    break;</span>
<a href="#l608"></a><span id="l608">+                  case &quot;help&quot;:</span>
<a href="#l609"></a><span id="l609">+                    button.setAttribute(&quot;icon&quot;, &quot;help&quot;);</span>
<a href="#l610"></a><span id="l610">+                    break;</span>
<a href="#l611"></a><span id="l611">+                  default:</span>
<a href="#l612"></a><span id="l612">+                    break;</span>
<a href="#l613"></a><span id="l613">+                }</span>
<a href="#l614"></a><span id="l614">+            }</span>
<a href="#l615"></a><span id="l615">+          }</span>
<a href="#l616"></a><span id="l616">+</span>
<a href="#l617"></a><span id="l617">+          // ensure that hitting enter triggers the default button command</span>
<a href="#l618"></a><span id="l618">+          this.defaultButton = this.defaultButton;</span>
<a href="#l619"></a><span id="l619">+</span>
<a href="#l620"></a><span id="l620">+          // if there is a special button configuration, use it</span>
<a href="#l621"></a><span id="l621">+          if (aButtons) {</span>
<a href="#l622"></a><span id="l622">+            // expect a comma delimited list of dlgtype values</span>
<a href="#l623"></a><span id="l623">+            var list = aButtons.split(&quot;,&quot;);</span>
<a href="#l624"></a><span id="l624">+</span>
<a href="#l625"></a><span id="l625">+            // mark shown dlgtypes as true</span>
<a href="#l626"></a><span id="l626">+            var shown = { accept: false, cancel: false, help: false,</span>
<a href="#l627"></a><span id="l627">+                          disclosure: false, extra1: false, extra2: false };</span>
<a href="#l628"></a><span id="l628">+            for (i = 0; i &lt; list.length; ++i)</span>
<a href="#l629"></a><span id="l629">+              shown[list[i].replace(/ /g, &quot;&quot;)] = true;</span>
<a href="#l630"></a><span id="l630">+</span>
<a href="#l631"></a><span id="l631">+            // hide/show the buttons we want</span>
<a href="#l632"></a><span id="l632">+            for (dlgtype in buttons)</span>
<a href="#l633"></a><span id="l633">+              buttons[dlgtype].hidden = !shown[dlgtype];</span>
<a href="#l634"></a><span id="l634">+</span>
<a href="#l635"></a><span id="l635">+            // show the spacer on Windows only when the extra2 button is present</span>
<a href="#l636"></a><span id="l636">+            if (/Win/.test(navigator.platform)) {</span>
<a href="#l637"></a><span id="l637">+              var spacer = document.getAnonymousElementByAttribute(this, &quot;anonid&quot;, &quot;spacer&quot;);</span>
<a href="#l638"></a><span id="l638">+              spacer.removeAttribute(&quot;hidden&quot;);</span>
<a href="#l639"></a><span id="l639">+              spacer.setAttribute(&quot;flex&quot;, shown[&quot;extra2&quot;] ? &quot;1&quot; : &quot;0&quot;);</span>
<a href="#l640"></a><span id="l640">+            }</span>
<a href="#l641"></a><span id="l641">+          }</span>
<a href="#l642"></a><span id="l642">+        ]]&gt;</span>
<a href="#l643"></a><span id="l643">+        &lt;/body&gt;</span>
<a href="#l644"></a><span id="l644">+      &lt;/method&gt;</span>
<a href="#l645"></a><span id="l645">+</span>
<a href="#l646"></a><span id="l646">+      &lt;method name=&quot;_setDefaultButton&quot;&gt;</span>
<a href="#l647"></a><span id="l647">+        &lt;parameter name=&quot;aNewDefault&quot;/&gt;</span>
<a href="#l648"></a><span id="l648">+        &lt;body&gt;</span>
<a href="#l649"></a><span id="l649">+        &lt;![CDATA[</span>
<a href="#l650"></a><span id="l650">+          // remove the default attribute from the previous default button, if any</span>
<a href="#l651"></a><span id="l651">+          var oldDefaultButton = this.getButton(this.defaultButton);</span>
<a href="#l652"></a><span id="l652">+          if (oldDefaultButton)</span>
<a href="#l653"></a><span id="l653">+            oldDefaultButton.removeAttribute(&quot;default&quot;);</span>
<a href="#l654"></a><span id="l654">+</span>
<a href="#l655"></a><span id="l655">+          var newDefaultButton = this.getButton(aNewDefault);</span>
<a href="#l656"></a><span id="l656">+          if (newDefaultButton) {</span>
<a href="#l657"></a><span id="l657">+            this.setAttribute(&quot;defaultButton&quot;, aNewDefault);</span>
<a href="#l658"></a><span id="l658">+            newDefaultButton.setAttribute(&quot;default&quot;, &quot;true&quot;);</span>
<a href="#l659"></a><span id="l659">+          } else {</span>
<a href="#l660"></a><span id="l660">+            this.setAttribute(&quot;defaultButton&quot;, &quot;none&quot;);</span>
<a href="#l661"></a><span id="l661">+            if (aNewDefault != &quot;none&quot;)</span>
<a href="#l662"></a><span id="l662">+              dump(&quot;invalid new default button: &quot; + aNewDefault + &quot;, assuming: none\n&quot;);</span>
<a href="#l663"></a><span id="l663">+          }</span>
<a href="#l664"></a><span id="l664">+        ]]&gt;</span>
<a href="#l665"></a><span id="l665">+        &lt;/body&gt;</span>
<a href="#l666"></a><span id="l666">+      &lt;/method&gt;</span>
<a href="#l667"></a><span id="l667">+</span>
<a href="#l668"></a><span id="l668">+      &lt;method name=&quot;_handleButtonCommand&quot;&gt;</span>
<a href="#l669"></a><span id="l669">+        &lt;parameter name=&quot;aEvent&quot;/&gt;</span>
<a href="#l670"></a><span id="l670">+        &lt;body&gt;</span>
<a href="#l671"></a><span id="l671">+        &lt;![CDATA[</span>
<a href="#l672"></a><span id="l672">+          return document.documentElement._doButtonCommand(</span>
<a href="#l673"></a><span id="l673">+                                        aEvent.target.getAttribute(&quot;dlgtype&quot;));</span>
<a href="#l674"></a><span id="l674">+        ]]&gt;</span>
<a href="#l675"></a><span id="l675">+        &lt;/body&gt;</span>
<a href="#l676"></a><span id="l676">+      &lt;/method&gt;</span>
<a href="#l677"></a><span id="l677">+</span>
<a href="#l678"></a><span id="l678">+      &lt;method name=&quot;_doButtonCommand&quot;&gt;</span>
<a href="#l679"></a><span id="l679">+        &lt;parameter name=&quot;aDlgType&quot;/&gt;</span>
<a href="#l680"></a><span id="l680">+        &lt;body&gt;</span>
<a href="#l681"></a><span id="l681">+        &lt;![CDATA[</span>
<a href="#l682"></a><span id="l682">+          var button = this.getButton(aDlgType);</span>
<a href="#l683"></a><span id="l683">+          if (!button.disabled) {</span>
<a href="#l684"></a><span id="l684">+            var noCancel = this._fireButtonEvent(aDlgType);</span>
<a href="#l685"></a><span id="l685">+            if (noCancel) {</span>
<a href="#l686"></a><span id="l686">+              if (aDlgType == &quot;accept&quot; || aDlgType == &quot;cancel&quot;) {</span>
<a href="#l687"></a><span id="l687">+                var closingEvent = new CustomEvent(&quot;dialogclosing&quot;, {</span>
<a href="#l688"></a><span id="l688">+                  bubbles: true,</span>
<a href="#l689"></a><span id="l689">+                  detail: { button: aDlgType },</span>
<a href="#l690"></a><span id="l690">+                });</span>
<a href="#l691"></a><span id="l691">+                this.dispatchEvent(closingEvent);</span>
<a href="#l692"></a><span id="l692">+                window.close();</span>
<a href="#l693"></a><span id="l693">+              }</span>
<a href="#l694"></a><span id="l694">+            }</span>
<a href="#l695"></a><span id="l695">+            return noCancel;</span>
<a href="#l696"></a><span id="l696">+          }</span>
<a href="#l697"></a><span id="l697">+          return true;</span>
<a href="#l698"></a><span id="l698">+        ]]&gt;</span>
<a href="#l699"></a><span id="l699">+        &lt;/body&gt;</span>
<a href="#l700"></a><span id="l700">+      &lt;/method&gt;</span>
<a href="#l701"></a><span id="l701">+</span>
<a href="#l702"></a><span id="l702">+      &lt;method name=&quot;_fireButtonEvent&quot;&gt;</span>
<a href="#l703"></a><span id="l703">+        &lt;parameter name=&quot;aDlgType&quot;/&gt;</span>
<a href="#l704"></a><span id="l704">+        &lt;body&gt;</span>
<a href="#l705"></a><span id="l705">+        &lt;![CDATA[</span>
<a href="#l706"></a><span id="l706">+          var event = document.createEvent(&quot;Events&quot;);</span>
<a href="#l707"></a><span id="l707">+          event.initEvent(&quot;dialog&quot; + aDlgType, true, true);</span>
<a href="#l708"></a><span id="l708">+</span>
<a href="#l709"></a><span id="l709">+          // handle dom event handlers</span>
<a href="#l710"></a><span id="l710">+          var noCancel = this.dispatchEvent(event);</span>
<a href="#l711"></a><span id="l711">+</span>
<a href="#l712"></a><span id="l712">+          // handle any xml attribute event handlers</span>
<a href="#l713"></a><span id="l713">+          var handler = this.getAttribute(&quot;ondialog&quot; + aDlgType);</span>
<a href="#l714"></a><span id="l714">+          if (handler != &quot;&quot;) {</span>
<a href="#l715"></a><span id="l715">+            var fn = new Function(&quot;event&quot;, handler);</span>
<a href="#l716"></a><span id="l716">+            var returned = fn(event);</span>
<a href="#l717"></a><span id="l717">+            if (returned == false)</span>
<a href="#l718"></a><span id="l718">+              noCancel = false;</span>
<a href="#l719"></a><span id="l719">+          }</span>
<a href="#l720"></a><span id="l720">+</span>
<a href="#l721"></a><span id="l721">+          return noCancel;</span>
<a href="#l722"></a><span id="l722">+        ]]&gt;</span>
<a href="#l723"></a><span id="l723">+        &lt;/body&gt;</span>
<a href="#l724"></a><span id="l724">+      &lt;/method&gt;</span>
<a href="#l725"></a><span id="l725">+</span>
<a href="#l726"></a><span id="l726">+      &lt;method name=&quot;_hitEnter&quot;&gt;</span>
<a href="#l727"></a><span id="l727">+        &lt;parameter name=&quot;evt&quot;/&gt;</span>
<a href="#l728"></a><span id="l728">+        &lt;body&gt;</span>
<a href="#l729"></a><span id="l729">+        &lt;![CDATA[</span>
<a href="#l730"></a><span id="l730">+          if (evt.defaultPrevented)</span>
<a href="#l731"></a><span id="l731">+            return;</span>
<a href="#l732"></a><span id="l732">+</span>
<a href="#l733"></a><span id="l733">+          var btn = this.getButton(this.defaultButton);</span>
<a href="#l734"></a><span id="l734">+          if (btn)</span>
<a href="#l735"></a><span id="l735">+            this._doButtonCommand(this.defaultButton);</span>
<a href="#l736"></a><span id="l736">+        ]]&gt;</span>
<a href="#l737"></a><span id="l737">+        &lt;/body&gt;</span>
<a href="#l738"></a><span id="l738">+      &lt;/method&gt;</span>
<a href="#l739"></a><span id="l739">+</span>
<a href="#l740"></a><span id="l740">+    &lt;/implementation&gt;</span>
<a href="#l741"></a><span id="l741">+</span>
<a href="#l742"></a><span id="l742">+    &lt;handlers&gt;</span>
<a href="#l743"></a><span id="l743">+      &lt;handler event=&quot;keypress&quot; keycode=&quot;VK_RETURN&quot;</span>
<a href="#l744"></a><span id="l744">+               group=&quot;system&quot; action=&quot;this._hitEnter(event);&quot;/&gt;</span>
<a href="#l745"></a><span id="l745">+      &lt;handler event=&quot;keypress&quot; keycode=&quot;VK_ESCAPE&quot; group=&quot;system&quot;&gt;</span>
<a href="#l746"></a><span id="l746">+        if (!event.defaultPrevented)</span>
<a href="#l747"></a><span id="l747">+          this.cancelDialog();</span>
<a href="#l748"></a><span id="l748">+      &lt;/handler&gt;</span>
<a href="#l749"></a><span id="l749">+#ifdef XP_MACOSX</span>
<a href="#l750"></a><span id="l750">+      &lt;handler event=&quot;keypress&quot; key=&quot;.&quot; modifiers=&quot;meta&quot; phase=&quot;capturing&quot; action=&quot;this.cancelDialog();&quot;/&gt;</span>
<a href="#l751"></a><span id="l751">+#else</span>
<a href="#l752"></a><span id="l752">+      &lt;handler event=&quot;focus&quot; phase=&quot;capturing&quot;&gt;</span>
<a href="#l753"></a><span id="l753">+        var btn = this.getButton(this.defaultButton);</span>
<a href="#l754"></a><span id="l754">+        if (btn)</span>
<a href="#l755"></a><span id="l755">+          btn.setAttribute(&quot;default&quot;, event.originalTarget == btn || !(event.originalTarget instanceof Components.interfaces.nsIDOMXULButtonElement));</span>
<a href="#l756"></a><span id="l756">+      &lt;/handler&gt;</span>
<a href="#l757"></a><span id="l757">+#endif</span>
<a href="#l758"></a><span id="l758">+    &lt;/handlers&gt;</span>
<a href="#l759"></a><span id="l759">+</span>
<a href="#l760"></a><span id="l760">+  &lt;/binding&gt;</span>
<a href="#l761"></a><span id="l761">+</span>
<a href="#l762"></a><span id="l762">+  &lt;binding id=&quot;dialogheader&quot;&gt;</span>
<a href="#l763"></a><span id="l763">+    &lt;resources&gt;</span>
<a href="#l764"></a><span id="l764">+      &lt;stylesheet src=&quot;chrome://global/skin/dialog.css&quot;/&gt;</span>
<a href="#l765"></a><span id="l765">+    &lt;/resources&gt;</span>
<a href="#l766"></a><span id="l766">+    &lt;content&gt;</span>
<a href="#l767"></a><span id="l767">+      &lt;xul:label class=&quot;dialogheader-title&quot; xbl:inherits=&quot;value=title,crop&quot; crop=&quot;right&quot; flex=&quot;1&quot;/&gt;</span>
<a href="#l768"></a><span id="l768">+      &lt;xul:label class=&quot;dialogheader-description&quot; xbl:inherits=&quot;value=description&quot;/&gt;</span>
<a href="#l769"></a><span id="l769">+    &lt;/content&gt;</span>
<a href="#l770"></a><span id="l770">+  &lt;/binding&gt;</span>
<a href="#l771"></a><span id="l771">+</span>
<a href="#l772"></a><span id="l772">+&lt;/bindings&gt;</span>
<a href="#l773"></a><span id="l773">diff --git a/toolkit/content/widgets/preferences-kde.xml b/toolkit/content/widgets/preferences-kde.xml</span>
<a href="#l774"></a><span id="l774">new file mode 100644</span>
<a href="#l775"></a><span id="l775">--- /dev/null</span>
<a href="#l776"></a><span id="l776">+++ b/toolkit/content/widgets/preferences-kde.xml</span>
<a href="#l777"></a><span id="l777">@@ -0,0 +1,1391 @@</span>
<a href="#l778"></a><span id="l778">+&lt;?xml version=&quot;1.0&quot;?&gt;</span>
<a href="#l779"></a><span id="l779">+</span>
<a href="#l780"></a><span id="l780">+&lt;!DOCTYPE bindings [</span>
<a href="#l781"></a><span id="l781">+  &lt;!ENTITY % preferencesDTD SYSTEM &quot;chrome://global/locale/preferences.dtd&quot;&gt;</span>
<a href="#l782"></a><span id="l782">+  %preferencesDTD;</span>
<a href="#l783"></a><span id="l783">+  &lt;!ENTITY % globalKeysDTD SYSTEM &quot;chrome://global/locale/globalKeys.dtd&quot;&gt;</span>
<a href="#l784"></a><span id="l784">+  %globalKeysDTD;</span>
<a href="#l785"></a><span id="l785">+]&gt;</span>
<a href="#l786"></a><span id="l786">+</span>
<a href="#l787"></a><span id="l787">+&lt;bindings id=&quot;preferencesBindings&quot;</span>
<a href="#l788"></a><span id="l788">+          xmlns=&quot;http://www.mozilla.org/xbl&quot;</span>
<a href="#l789"></a><span id="l789">+          xmlns:xbl=&quot;http://www.mozilla.org/xbl&quot;</span>
<a href="#l790"></a><span id="l790">+          xmlns:xul=&quot;http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul&quot;&gt;</span>
<a href="#l791"></a><span id="l791">+</span>
<a href="#l792"></a><span id="l792">+#</span>
<a href="#l793"></a><span id="l793">+# = Preferences Window Framework</span>
<a href="#l794"></a><span id="l794">+#</span>
<a href="#l795"></a><span id="l795">+#   The syntax for use looks something like:</span>
<a href="#l796"></a><span id="l796">+#</span>
<a href="#l797"></a><span id="l797">+#   &lt;prefwindow&gt;</span>
<a href="#l798"></a><span id="l798">+#     &lt;prefpane id=&quot;prefPaneA&quot;&gt;</span>
<a href="#l799"></a><span id="l799">+#       &lt;preferences&gt;</span>
<a href="#l800"></a><span id="l800">+#         &lt;preference id=&quot;preference1&quot; name=&quot;app.preference1&quot; type=&quot;bool&quot; onchange=&quot;foo();&quot;/&gt;</span>
<a href="#l801"></a><span id="l801">+#         &lt;preference id=&quot;preference2&quot; name=&quot;app.preference2&quot; type=&quot;bool&quot; useDefault=&quot;true&quot;/&gt;</span>
<a href="#l802"></a><span id="l802">+#       &lt;/preferences&gt;</span>
<a href="#l803"></a><span id="l803">+#       &lt;checkbox label=&quot;Preference&quot; preference=&quot;preference1&quot;/&gt;</span>
<a href="#l804"></a><span id="l804">+#     &lt;/prefpane&gt;</span>
<a href="#l805"></a><span id="l805">+#   &lt;/prefwindow&gt;</span>
<a href="#l806"></a><span id="l806">+#</span>
<a href="#l807"></a><span id="l807">+</span>
<a href="#l808"></a><span id="l808">+  &lt;binding id=&quot;preferences&quot;&gt;</span>
<a href="#l809"></a><span id="l809">+    &lt;implementation implements=&quot;nsIObserver&quot;&gt;</span>
<a href="#l810"></a><span id="l810">+      &lt;method name=&quot;_constructAfterChildren&quot;&gt;</span>
<a href="#l811"></a><span id="l811">+      &lt;body&gt;</span>
<a href="#l812"></a><span id="l812">+      &lt;![CDATA[</span>
<a href="#l813"></a><span id="l813">+      // This method will be called after each one of the child</span>
<a href="#l814"></a><span id="l814">+      // &lt;preference&gt; elements is constructed. Its purpose is to propagate</span>
<a href="#l815"></a><span id="l815">+      // the values to the associated form elements</span>
<a href="#l816"></a><span id="l816">+</span>
<a href="#l817"></a><span id="l817">+      var elements = this.getElementsByTagName(&quot;preference&quot;);</span>
<a href="#l818"></a><span id="l818">+      for (let element of elements) {</span>
<a href="#l819"></a><span id="l819">+        if (!element._constructed) {</span>
<a href="#l820"></a><span id="l820">+          return;</span>
<a href="#l821"></a><span id="l821">+        }</span>
<a href="#l822"></a><span id="l822">+      }</span>
<a href="#l823"></a><span id="l823">+      for (let element of elements) {</span>
<a href="#l824"></a><span id="l824">+        element.updateElements();</span>
<a href="#l825"></a><span id="l825">+      }</span>
<a href="#l826"></a><span id="l826">+      ]]&gt;</span>
<a href="#l827"></a><span id="l827">+      &lt;/body&gt;</span>
<a href="#l828"></a><span id="l828">+      &lt;/method&gt;</span>
<a href="#l829"></a><span id="l829">+      &lt;method name=&quot;observe&quot;&gt;</span>
<a href="#l830"></a><span id="l830">+        &lt;parameter name=&quot;aSubject&quot;/&gt;</span>
<a href="#l831"></a><span id="l831">+        &lt;parameter name=&quot;aTopic&quot;/&gt;</span>
<a href="#l832"></a><span id="l832">+        &lt;parameter name=&quot;aData&quot;/&gt;</span>
<a href="#l833"></a><span id="l833">+        &lt;body&gt;</span>
<a href="#l834"></a><span id="l834">+        &lt;![CDATA[</span>
<a href="#l835"></a><span id="l835">+          for (var i = 0; i &lt; this.childNodes.length; ++i) {</span>
<a href="#l836"></a><span id="l836">+            var preference = this.childNodes[i];</span>
<a href="#l837"></a><span id="l837">+            if (preference.name == aData) {</span>
<a href="#l838"></a><span id="l838">+              preference.value = preference.valueFromPreferences;</span>
<a href="#l839"></a><span id="l839">+            }</span>
<a href="#l840"></a><span id="l840">+          }</span>
<a href="#l841"></a><span id="l841">+        ]]&gt;</span>
<a href="#l842"></a><span id="l842">+        &lt;/body&gt;</span>
<a href="#l843"></a><span id="l843">+      &lt;/method&gt;</span>
<a href="#l844"></a><span id="l844">+</span>
<a href="#l845"></a><span id="l845">+      &lt;method name=&quot;fireChangedEvent&quot;&gt;</span>
<a href="#l846"></a><span id="l846">+        &lt;parameter name=&quot;aPreference&quot;/&gt;</span>
<a href="#l847"></a><span id="l847">+        &lt;body&gt;</span>
<a href="#l848"></a><span id="l848">+        &lt;![CDATA[</span>
<a href="#l849"></a><span id="l849">+          // Value changed, synthesize an event</span>
<a href="#l850"></a><span id="l850">+          try {</span>
<a href="#l851"></a><span id="l851">+            var event = document.createEvent(&quot;Events&quot;);</span>
<a href="#l852"></a><span id="l852">+            event.initEvent(&quot;change&quot;, true, true);</span>
<a href="#l853"></a><span id="l853">+            aPreference.dispatchEvent(event);</span>
<a href="#l854"></a><span id="l854">+          } catch (e) {</span>
<a href="#l855"></a><span id="l855">+            Components.utils.reportError(e);</span>
<a href="#l856"></a><span id="l856">+          }</span>
<a href="#l857"></a><span id="l857">+        ]]&gt;</span>
<a href="#l858"></a><span id="l858">+        &lt;/body&gt;</span>
<a href="#l859"></a><span id="l859">+      &lt;/method&gt;</span>
<a href="#l860"></a><span id="l860">+</span>
<a href="#l861"></a><span id="l861">+      &lt;field name=&quot;service&quot;&gt;</span>
<a href="#l862"></a><span id="l862">+        Components.classes[&quot;@mozilla.org/preferences-service;1&quot;]</span>
<a href="#l863"></a><span id="l863">+                  .getService(Components.interfaces.nsIPrefService);</span>
<a href="#l864"></a><span id="l864">+      &lt;/field&gt;</span>
<a href="#l865"></a><span id="l865">+      &lt;field name=&quot;rootBranch&quot;&gt;</span>
<a href="#l866"></a><span id="l866">+        Components.classes[&quot;@mozilla.org/preferences-service;1&quot;]</span>
<a href="#l867"></a><span id="l867">+                  .getService(Components.interfaces.nsIPrefBranch);</span>
<a href="#l868"></a><span id="l868">+      &lt;/field&gt;</span>
<a href="#l869"></a><span id="l869">+      &lt;field name=&quot;defaultBranch&quot;&gt;</span>
<a href="#l870"></a><span id="l870">+        this.service.getDefaultBranch(&quot;&quot;);</span>
<a href="#l871"></a><span id="l871">+      &lt;/field&gt;</span>
<a href="#l872"></a><span id="l872">+      &lt;field name=&quot;rootBranchInternal&quot;&gt;</span>
<a href="#l873"></a><span id="l873">+        Components.classes[&quot;@mozilla.org/preferences-service;1&quot;]</span>
<a href="#l874"></a><span id="l874">+                  .getService(Components.interfaces.nsIPrefBranchInternal);</span>
<a href="#l875"></a><span id="l875">+      &lt;/field&gt;</span>
<a href="#l876"></a><span id="l876">+      &lt;property name=&quot;type&quot; readonly=&quot;true&quot;&gt;</span>
<a href="#l877"></a><span id="l877">+        &lt;getter&gt;</span>
<a href="#l878"></a><span id="l878">+          &lt;![CDATA[</span>
<a href="#l879"></a><span id="l879">+            return document.documentElement.type || &quot;&quot;;</span>
<a href="#l880"></a><span id="l880">+          ]]&gt;</span>
<a href="#l881"></a><span id="l881">+        &lt;/getter&gt;</span>
<a href="#l882"></a><span id="l882">+      &lt;/property&gt;</span>
<a href="#l883"></a><span id="l883">+      &lt;property name=&quot;instantApply&quot; readonly=&quot;true&quot;&gt;</span>
<a href="#l884"></a><span id="l884">+        &lt;getter&gt;</span>
<a href="#l885"></a><span id="l885">+          &lt;![CDATA[</span>
<a href="#l886"></a><span id="l886">+            var doc = document.documentElement;</span>
<a href="#l887"></a><span id="l887">+            return this.type == &quot;child&quot; ? doc.instantApply</span>
<a href="#l888"></a><span id="l888">+                                        : doc.instantApply || this.rootBranch.getBoolPref(&quot;browser.preferences.instantApply&quot;);</span>
<a href="#l889"></a><span id="l889">+          ]]&gt;</span>
<a href="#l890"></a><span id="l890">+        &lt;/getter&gt;</span>
<a href="#l891"></a><span id="l891">+      &lt;/property&gt;</span>
<a href="#l892"></a><span id="l892">+    &lt;/implementation&gt;</span>
<a href="#l893"></a><span id="l893">+  &lt;/binding&gt;</span>
<a href="#l894"></a><span id="l894">+</span>
<a href="#l895"></a><span id="l895">+  &lt;binding id=&quot;preference&quot;&gt;</span>
<a href="#l896"></a><span id="l896">+    &lt;implementation&gt;</span>
<a href="#l897"></a><span id="l897">+      &lt;constructor&gt;</span>
<a href="#l898"></a><span id="l898">+      &lt;![CDATA[</span>
<a href="#l899"></a><span id="l899">+        this._constructed = true;</span>
<a href="#l900"></a><span id="l900">+</span>
<a href="#l901"></a><span id="l901">+        // if the element has been inserted without the name attribute set,</span>
<a href="#l902"></a><span id="l902">+        // we have nothing to do here</span>
<a href="#l903"></a><span id="l903">+        if (!this.name)</span>
<a href="#l904"></a><span id="l904">+          return;</span>
<a href="#l905"></a><span id="l905">+</span>
<a href="#l906"></a><span id="l906">+        this.preferences.rootBranchInternal</span>
<a href="#l907"></a><span id="l907">+            .addObserver(this.name, this.preferences, false);</span>
<a href="#l908"></a><span id="l908">+        // In non-instant apply mode, we must try and use the last saved state</span>
<a href="#l909"></a><span id="l909">+        // from any previous opens of a child dialog instead of the value from</span>
<a href="#l910"></a><span id="l910">+        // preferences, to pick up any edits a user may have made.</span>
<a href="#l911"></a><span id="l911">+</span>
<a href="#l912"></a><span id="l912">+        var secMan = Components.classes[&quot;@mozilla.org/scriptsecuritymanager;1&quot;]</span>
<a href="#l913"></a><span id="l913">+                    .getService(Components.interfaces.nsIScriptSecurityManager);</span>
<a href="#l914"></a><span id="l914">+        if (this.preferences.type == &quot;child&quot; &amp;&amp;</span>
<a href="#l915"></a><span id="l915">+            !this.instantApply &amp;&amp; window.opener &amp;&amp;</span>
<a href="#l916"></a><span id="l916">+            secMan.isSystemPrincipal(window.opener.document.nodePrincipal)) {</span>
<a href="#l917"></a><span id="l917">+          var pdoc = window.opener.document;</span>
<a href="#l918"></a><span id="l918">+</span>
<a href="#l919"></a><span id="l919">+          // Try to find a preference element for the same preference.</span>
<a href="#l920"></a><span id="l920">+          var preference = null;</span>
<a href="#l921"></a><span id="l921">+          var parentPreferences = pdoc.getElementsByTagName(&quot;preferences&quot;);</span>
<a href="#l922"></a><span id="l922">+          for (var k = 0; (k &lt; parentPreferences.length &amp;&amp; !preference); ++k) {</span>
<a href="#l923"></a><span id="l923">+            var parentPrefs = parentPreferences[k]</span>
<a href="#l924"></a><span id="l924">+                                    .getElementsByAttribute(&quot;name&quot;, this.name);</span>
<a href="#l925"></a><span id="l925">+            for (var l = 0; (l &lt; parentPrefs.length &amp;&amp; !preference); ++l) {</span>
<a href="#l926"></a><span id="l926">+              if (parentPrefs[l].localName == &quot;preference&quot;)</span>
<a href="#l927"></a><span id="l927">+                preference = parentPrefs[l];</span>
<a href="#l928"></a><span id="l928">+            }</span>
<a href="#l929"></a><span id="l929">+          }</span>
<a href="#l930"></a><span id="l930">+</span>
<a href="#l931"></a><span id="l931">+          // Don't use the value setter here, we don't want updateElements to be prematurely fired.</span>
<a href="#l932"></a><span id="l932">+          this._value = preference ? preference.value : this.valueFromPreferences;</span>
<a href="#l933"></a><span id="l933">+        } else</span>
<a href="#l934"></a><span id="l934">+          this._value = this.valueFromPreferences;</span>
<a href="#l935"></a><span id="l935">+        this.preferences._constructAfterChildren();</span>
<a href="#l936"></a><span id="l936">+      ]]&gt;</span>
<a href="#l937"></a><span id="l937">+      &lt;/constructor&gt;</span>
<a href="#l938"></a><span id="l938">+      &lt;destructor&gt;</span>
<a href="#l939"></a><span id="l939">+        this.preferences.rootBranchInternal</span>
<a href="#l940"></a><span id="l940">+            .removeObserver(this.name, this.preferences);</span>
<a href="#l941"></a><span id="l941">+      &lt;/destructor&gt;</span>
<a href="#l942"></a><span id="l942">+      &lt;field name=&quot;_constructed&quot;&gt;false&lt;/field&gt;</span>
<a href="#l943"></a><span id="l943">+      &lt;property name=&quot;instantApply&quot;&gt;</span>
<a href="#l944"></a><span id="l944">+        &lt;getter&gt;</span>
<a href="#l945"></a><span id="l945">+          if (this.getAttribute(&quot;instantApply&quot;) == &quot;false&quot;)</span>
<a href="#l946"></a><span id="l946">+            return false;</span>
<a href="#l947"></a><span id="l947">+          return this.getAttribute(&quot;instantApply&quot;) == &quot;true&quot; || this.preferences.instantApply;</span>
<a href="#l948"></a><span id="l948">+        &lt;/getter&gt;</span>
<a href="#l949"></a><span id="l949">+      &lt;/property&gt;</span>
<a href="#l950"></a><span id="l950">+</span>
<a href="#l951"></a><span id="l951">+      &lt;property name=&quot;preferences&quot; onget=&quot;return this.parentNode&quot;/&gt;</span>
<a href="#l952"></a><span id="l952">+      &lt;property name=&quot;name&quot; onget=&quot;return this.getAttribute('name');&quot;&gt;</span>
<a href="#l953"></a><span id="l953">+        &lt;setter&gt;</span>
<a href="#l954"></a><span id="l954">+          if (val == this.name)</span>
<a href="#l955"></a><span id="l955">+            return val;</span>
<a href="#l956"></a><span id="l956">+</span>
<a href="#l957"></a><span id="l957">+          this.preferences.rootBranchInternal</span>
<a href="#l958"></a><span id="l958">+              .removeObserver(this.name, this.preferences);</span>
<a href="#l959"></a><span id="l959">+          this.setAttribute(&quot;name&quot;, val);</span>
<a href="#l960"></a><span id="l960">+          this.preferences.rootBranchInternal</span>
<a href="#l961"></a><span id="l961">+              .addObserver(val, this.preferences, false);</span>
<a href="#l962"></a><span id="l962">+</span>
<a href="#l963"></a><span id="l963">+          return val;</span>
<a href="#l964"></a><span id="l964">+        &lt;/setter&gt;</span>
<a href="#l965"></a><span id="l965">+      &lt;/property&gt;</span>
<a href="#l966"></a><span id="l966">+      &lt;property name=&quot;type&quot; onget=&quot;return this.getAttribute('type');&quot;</span>
<a href="#l967"></a><span id="l967">+                            onset=&quot;this.setAttribute('type', val); return val;&quot;/&gt;</span>
<a href="#l968"></a><span id="l968">+      &lt;property name=&quot;inverted&quot; onget=&quot;return this.getAttribute('inverted') == 'true';&quot;</span>
<a href="#l969"></a><span id="l969">+                                onset=&quot;this.setAttribute('inverted', val); return val;&quot;/&gt;</span>
<a href="#l970"></a><span id="l970">+      &lt;property name=&quot;readonly&quot; onget=&quot;return this.getAttribute('readonly') == 'true';&quot;</span>
<a href="#l971"></a><span id="l971">+                                onset=&quot;this.setAttribute('readonly', val); return val;&quot;/&gt;</span>
<a href="#l972"></a><span id="l972">+</span>
<a href="#l973"></a><span id="l973">+      &lt;field name=&quot;_value&quot;&gt;null&lt;/field&gt;</span>
<a href="#l974"></a><span id="l974">+      &lt;method name=&quot;_setValue&quot;&gt;</span>
<a href="#l975"></a><span id="l975">+        &lt;parameter name=&quot;aValue&quot;/&gt;</span>
<a href="#l976"></a><span id="l976">+        &lt;body&gt;</span>
<a href="#l977"></a><span id="l977">+        &lt;![CDATA[</span>
<a href="#l978"></a><span id="l978">+          if (this.value !== aValue) {</span>
<a href="#l979"></a><span id="l979">+            this._value = aValue;</span>
<a href="#l980"></a><span id="l980">+            if (this.instantApply)</span>
<a href="#l981"></a><span id="l981">+              this.valueFromPreferences = aValue;</span>
<a href="#l982"></a><span id="l982">+            this.preferences.fireChangedEvent(this);</span>
<a href="#l983"></a><span id="l983">+          }</span>
<a href="#l984"></a><span id="l984">+          return aValue;</span>
<a href="#l985"></a><span id="l985">+        ]]&gt;</span>
<a href="#l986"></a><span id="l986">+        &lt;/body&gt;</span>
<a href="#l987"></a><span id="l987">+      &lt;/method&gt;</span>
<a href="#l988"></a><span id="l988">+      &lt;property name=&quot;value&quot; onget=&quot;return this._value&quot; onset=&quot;return this._setValue(val);&quot;/&gt;</span>
<a href="#l989"></a><span id="l989">+</span>
<a href="#l990"></a><span id="l990">+      &lt;property name=&quot;locked&quot;&gt;</span>
<a href="#l991"></a><span id="l991">+        &lt;getter&gt;</span>
<a href="#l992"></a><span id="l992">+          return this.preferences.rootBranch.prefIsLocked(this.name);</span>
<a href="#l993"></a><span id="l993">+        &lt;/getter&gt;</span>
<a href="#l994"></a><span id="l994">+      &lt;/property&gt;</span>
<a href="#l995"></a><span id="l995">+</span>
<a href="#l996"></a><span id="l996">+      &lt;property name=&quot;disabled&quot;&gt;</span>
<a href="#l997"></a><span id="l997">+        &lt;getter&gt;</span>
<a href="#l998"></a><span id="l998">+          return this.getAttribute(&quot;disabled&quot;) == &quot;true&quot;;</span>
<a href="#l999"></a><span id="l999">+        &lt;/getter&gt;</span>
<a href="#l1000"></a><span id="l1000">+        &lt;setter&gt;</span>
<a href="#l1001"></a><span id="l1001">+        &lt;![CDATA[</span>
<a href="#l1002"></a><span id="l1002">+          if (val)</span>
<a href="#l1003"></a><span id="l1003">+            this.setAttribute(&quot;disabled&quot;, &quot;true&quot;);</span>
<a href="#l1004"></a><span id="l1004">+          else</span>
<a href="#l1005"></a><span id="l1005">+            this.removeAttribute(&quot;disabled&quot;);</span>
<a href="#l1006"></a><span id="l1006">+</span>
<a href="#l1007"></a><span id="l1007">+          if (!this.id)</span>
<a href="#l1008"></a><span id="l1008">+            return val;</span>
<a href="#l1009"></a><span id="l1009">+</span>
<a href="#l1010"></a><span id="l1010">+          var elements = document.getElementsByAttribute(&quot;preference&quot;, this.id);</span>
<a href="#l1011"></a><span id="l1011">+          for (var i = 0; i &lt; elements.length; ++i) {</span>
<a href="#l1012"></a><span id="l1012">+            elements[i].disabled = val;</span>
<a href="#l1013"></a><span id="l1013">+</span>
<a href="#l1014"></a><span id="l1014">+            var labels = document.getElementsByAttribute(&quot;control&quot;, elements[i].id);</span>
<a href="#l1015"></a><span id="l1015">+            for (var j = 0; j &lt; labels.length; ++j)</span>
<a href="#l1016"></a><span id="l1016">+              labels[j].disabled = val;</span>
<a href="#l1017"></a><span id="l1017">+          }</span>
<a href="#l1018"></a><span id="l1018">+</span>
<a href="#l1019"></a><span id="l1019">+          return val;</span>
<a href="#l1020"></a><span id="l1020">+        ]]&gt;</span>
<a href="#l1021"></a><span id="l1021">+        &lt;/setter&gt;</span>
<a href="#l1022"></a><span id="l1022">+      &lt;/property&gt;</span>
<a href="#l1023"></a><span id="l1023">+</span>
<a href="#l1024"></a><span id="l1024">+      &lt;property name=&quot;tabIndex&quot;&gt;</span>
<a href="#l1025"></a><span id="l1025">+        &lt;getter&gt;</span>
<a href="#l1026"></a><span id="l1026">+          return parseInt(this.getAttribute(&quot;tabindex&quot;));</span>
<a href="#l1027"></a><span id="l1027">+        &lt;/getter&gt;</span>
<a href="#l1028"></a><span id="l1028">+        &lt;setter&gt;</span>
<a href="#l1029"></a><span id="l1029">+        &lt;![CDATA[</span>
<a href="#l1030"></a><span id="l1030">+          if (val)</span>
<a href="#l1031"></a><span id="l1031">+            this.setAttribute(&quot;tabindex&quot;, val);</span>
<a href="#l1032"></a><span id="l1032">+          else</span>
<a href="#l1033"></a><span id="l1033">+            this.removeAttribute(&quot;tabindex&quot;);</span>
<a href="#l1034"></a><span id="l1034">+</span>
<a href="#l1035"></a><span id="l1035">+          if (!this.id)</span>
<a href="#l1036"></a><span id="l1036">+            return val;</span>
<a href="#l1037"></a><span id="l1037">+</span>
<a href="#l1038"></a><span id="l1038">+          var elements = document.getElementsByAttribute(&quot;preference&quot;, this.id);</span>
<a href="#l1039"></a><span id="l1039">+          for (var i = 0; i &lt; elements.length; ++i) {</span>
<a href="#l1040"></a><span id="l1040">+            elements[i].tabIndex = val;</span>
<a href="#l1041"></a><span id="l1041">+</span>
<a href="#l1042"></a><span id="l1042">+            var labels = document.getElementsByAttribute(&quot;control&quot;, elements[i].id);</span>
<a href="#l1043"></a><span id="l1043">+            for (var j = 0; j &lt; labels.length; ++j)</span>
<a href="#l1044"></a><span id="l1044">+              labels[j].tabIndex = val;</span>
<a href="#l1045"></a><span id="l1045">+          }</span>
<a href="#l1046"></a><span id="l1046">+</span>
<a href="#l1047"></a><span id="l1047">+          return val;</span>
<a href="#l1048"></a><span id="l1048">+        ]]&gt;</span>
<a href="#l1049"></a><span id="l1049">+        &lt;/setter&gt;</span>
<a href="#l1050"></a><span id="l1050">+      &lt;/property&gt;</span>
<a href="#l1051"></a><span id="l1051">+</span>
<a href="#l1052"></a><span id="l1052">+      &lt;property name=&quot;hasUserValue&quot;&gt;</span>
<a href="#l1053"></a><span id="l1053">+        &lt;getter&gt;</span>
<a href="#l1054"></a><span id="l1054">+        &lt;![CDATA[</span>
<a href="#l1055"></a><span id="l1055">+          return this.preferences.rootBranch.prefHasUserValue(this.name) &amp;&amp;</span>
<a href="#l1056"></a><span id="l1056">+                 this.value !== undefined;</span>
<a href="#l1057"></a><span id="l1057">+        ]]&gt;</span>
<a href="#l1058"></a><span id="l1058">+        &lt;/getter&gt;</span>
<a href="#l1059"></a><span id="l1059">+      &lt;/property&gt;</span>
<a href="#l1060"></a><span id="l1060">+</span>
<a href="#l1061"></a><span id="l1061">+      &lt;method name=&quot;reset&quot;&gt;</span>
<a href="#l1062"></a><span id="l1062">+        &lt;body&gt;</span>
<a href="#l1063"></a><span id="l1063">+          // defer reset until preference update</span>
<a href="#l1064"></a><span id="l1064">+          this.value = undefined;</span>
<a href="#l1065"></a><span id="l1065">+        &lt;/body&gt;</span>
<a href="#l1066"></a><span id="l1066">+      &lt;/method&gt;</span>
<a href="#l1067"></a><span id="l1067">+</span>
<a href="#l1068"></a><span id="l1068">+      &lt;field name=&quot;_useDefault&quot;&gt;false&lt;/field&gt;</span>
<a href="#l1069"></a><span id="l1069">+      &lt;property name=&quot;defaultValue&quot;&gt;</span>
<a href="#l1070"></a><span id="l1070">+        &lt;getter&gt;</span>
<a href="#l1071"></a><span id="l1071">+        &lt;![CDATA[</span>
<a href="#l1072"></a><span id="l1072">+          this._useDefault = true;</span>
<a href="#l1073"></a><span id="l1073">+          var val = this.valueFromPreferences;</span>
<a href="#l1074"></a><span id="l1074">+          this._useDefault = false;</span>
<a href="#l1075"></a><span id="l1075">+          return val;</span>
<a href="#l1076"></a><span id="l1076">+        ]]&gt;</span>
<a href="#l1077"></a><span id="l1077">+        &lt;/getter&gt;</span>
<a href="#l1078"></a><span id="l1078">+      &lt;/property&gt;</span>
<a href="#l1079"></a><span id="l1079">+</span>
<a href="#l1080"></a><span id="l1080">+      &lt;property name=&quot;_branch&quot;&gt;</span>
<a href="#l1081"></a><span id="l1081">+        &lt;getter&gt;</span>
<a href="#l1082"></a><span id="l1082">+          return this._useDefault ? this.preferences.defaultBranch : this.preferences.rootBranch;</span>
<a href="#l1083"></a><span id="l1083">+        &lt;/getter&gt;</span>
<a href="#l1084"></a><span id="l1084">+      &lt;/property&gt;</span>
<a href="#l1085"></a><span id="l1085">+</span>
<a href="#l1086"></a><span id="l1086">+      &lt;field name=&quot;batching&quot;&gt;false&lt;/field&gt;</span>
<a href="#l1087"></a><span id="l1087">+</span>
<a href="#l1088"></a><span id="l1088">+      &lt;method name=&quot;_reportUnknownType&quot;&gt;</span>
<a href="#l1089"></a><span id="l1089">+        &lt;body&gt;</span>
<a href="#l1090"></a><span id="l1090">+        &lt;![CDATA[</span>
<a href="#l1091"></a><span id="l1091">+          var consoleService = Components.classes[&quot;@mozilla.org/consoleservice;1&quot;]</span>
<a href="#l1092"></a><span id="l1092">+                                         .getService(Components.interfaces.nsIConsoleService);</span>
<a href="#l1093"></a><span id="l1093">+          var msg = &quot;&lt;preference&gt; with id='&quot; + this.id + &quot;' and name='&quot; +</span>
<a href="#l1094"></a><span id="l1094">+                    this.name + &quot;' has unknown type '&quot; + this.type + &quot;'.&quot;;</span>
<a href="#l1095"></a><span id="l1095">+          consoleService.logStringMessage(msg);</span>
<a href="#l1096"></a><span id="l1096">+        ]]&gt;</span>
<a href="#l1097"></a><span id="l1097">+        &lt;/body&gt;</span>
<a href="#l1098"></a><span id="l1098">+      &lt;/method&gt;</span>
<a href="#l1099"></a><span id="l1099">+</span>
<a href="#l1100"></a><span id="l1100">+      &lt;property name=&quot;valueFromPreferences&quot;&gt;</span>
<a href="#l1101"></a><span id="l1101">+        &lt;getter&gt;</span>
<a href="#l1102"></a><span id="l1102">+        &lt;![CDATA[</span>
<a href="#l1103"></a><span id="l1103">+          try {</span>
<a href="#l1104"></a><span id="l1104">+            // Force a resync of value with preferences.</span>
<a href="#l1105"></a><span id="l1105">+            switch (this.type) {</span>
<a href="#l1106"></a><span id="l1106">+            case &quot;int&quot;:</span>
<a href="#l1107"></a><span id="l1107">+              return this._branch.getIntPref(this.name);</span>
<a href="#l1108"></a><span id="l1108">+            case &quot;bool&quot;:</span>
<a href="#l1109"></a><span id="l1109">+              var val = this._branch.getBoolPref(this.name);</span>
<a href="#l1110"></a><span id="l1110">+              return this.inverted ? !val : val;</span>
<a href="#l1111"></a><span id="l1111">+            case &quot;wstring&quot;:</span>
<a href="#l1112"></a><span id="l1112">+              return this._branch</span>
<a href="#l1113"></a><span id="l1113">+                         .getComplexValue(this.name, Components.interfaces.nsIPrefLocalizedString)</span>
<a href="#l1114"></a><span id="l1114">+                         .data;</span>
<a href="#l1115"></a><span id="l1115">+            case &quot;string&quot;:</span>
<a href="#l1116"></a><span id="l1116">+            case &quot;unichar&quot;:</span>
<a href="#l1117"></a><span id="l1117">+              return this._branch</span>
<a href="#l1118"></a><span id="l1118">+                         .getComplexValue(this.name, Components.interfaces.nsISupportsString)</span>
<a href="#l1119"></a><span id="l1119">+                         .data;</span>
<a href="#l1120"></a><span id="l1120">+            case &quot;fontname&quot;:</span>
<a href="#l1121"></a><span id="l1121">+              var family = this._branch</span>
<a href="#l1122"></a><span id="l1122">+                               .getComplexValue(this.name, Components.interfaces.nsISupportsString)</span>
<a href="#l1123"></a><span id="l1123">+                               .data;</span>
<a href="#l1124"></a><span id="l1124">+              var fontEnumerator = Components.classes[&quot;@mozilla.org/gfx/fontenumerator;1&quot;]</span>
<a href="#l1125"></a><span id="l1125">+                                             .createInstance(Components.interfaces.nsIFontEnumerator);</span>
<a href="#l1126"></a><span id="l1126">+              return fontEnumerator.getStandardFamilyName(family);</span>
<a href="#l1127"></a><span id="l1127">+            case &quot;file&quot;:</span>
<a href="#l1128"></a><span id="l1128">+              var f = this._branch</span>
<a href="#l1129"></a><span id="l1129">+                          .getComplexValue(this.name, Components.interfaces.nsILocalFile);</span>
<a href="#l1130"></a><span id="l1130">+              return f;</span>
<a href="#l1131"></a><span id="l1131">+            default:</span>
<a href="#l1132"></a><span id="l1132">+              this._reportUnknownType();</span>
<a href="#l1133"></a><span id="l1133">+            }</span>
<a href="#l1134"></a><span id="l1134">+          } catch (e) { }</span>
<a href="#l1135"></a><span id="l1135">+          return null;</span>
<a href="#l1136"></a><span id="l1136">+        ]]&gt;</span>
<a href="#l1137"></a><span id="l1137">+        &lt;/getter&gt;</span>
<a href="#l1138"></a><span id="l1138">+        &lt;setter&gt;</span>
<a href="#l1139"></a><span id="l1139">+        &lt;![CDATA[</span>
<a href="#l1140"></a><span id="l1140">+          // Exit early if nothing to do.</span>
<a href="#l1141"></a><span id="l1141">+          if (this.readonly || this.valueFromPreferences == val)</span>
<a href="#l1142"></a><span id="l1142">+            return val;</span>
<a href="#l1143"></a><span id="l1143">+</span>
<a href="#l1144"></a><span id="l1144">+          // The special value undefined means 'reset preference to default'.</span>
<a href="#l1145"></a><span id="l1145">+          if (val === undefined) {</span>
<a href="#l1146"></a><span id="l1146">+            this.preferences.rootBranch.clearUserPref(this.name);</span>
<a href="#l1147"></a><span id="l1147">+            return val;</span>
<a href="#l1148"></a><span id="l1148">+          }</span>
<a href="#l1149"></a><span id="l1149">+</span>
<a href="#l1150"></a><span id="l1150">+          // Force a resync of preferences with value.</span>
<a href="#l1151"></a><span id="l1151">+          switch (this.type) {</span>
<a href="#l1152"></a><span id="l1152">+          case &quot;int&quot;:</span>
<a href="#l1153"></a><span id="l1153">+            this.preferences.rootBranch.setIntPref(this.name, val);</span>
<a href="#l1154"></a><span id="l1154">+            break;</span>
<a href="#l1155"></a><span id="l1155">+          case &quot;bool&quot;:</span>
<a href="#l1156"></a><span id="l1156">+            this.preferences.rootBranch.setBoolPref(this.name, this.inverted ? !val : val);</span>
<a href="#l1157"></a><span id="l1157">+            break;</span>
<a href="#l1158"></a><span id="l1158">+          case &quot;wstring&quot;:</span>
<a href="#l1159"></a><span id="l1159">+            var pls = Components.classes[&quot;@mozilla.org/pref-localizedstring;1&quot;]</span>
<a href="#l1160"></a><span id="l1160">+                                .createInstance(Components.interfaces.nsIPrefLocalizedString);</span>
<a href="#l1161"></a><span id="l1161">+            pls.data = val;</span>
<a href="#l1162"></a><span id="l1162">+            this.preferences.rootBranch</span>
<a href="#l1163"></a><span id="l1163">+                .setComplexValue(this.name, Components.interfaces.nsIPrefLocalizedString, pls);</span>
<a href="#l1164"></a><span id="l1164">+            break;</span>
<a href="#l1165"></a><span id="l1165">+          case &quot;string&quot;:</span>
<a href="#l1166"></a><span id="l1166">+          case &quot;unichar&quot;:</span>
<a href="#l1167"></a><span id="l1167">+          case &quot;fontname&quot;:</span>
<a href="#l1168"></a><span id="l1168">+            var iss = Components.classes[&quot;@mozilla.org/supports-string;1&quot;]</span>
<a href="#l1169"></a><span id="l1169">+                                .createInstance(Components.interfaces.nsISupportsString);</span>
<a href="#l1170"></a><span id="l1170">+            iss.data = val;</span>
<a href="#l1171"></a><span id="l1171">+            this.preferences.rootBranch</span>
<a href="#l1172"></a><span id="l1172">+                .setComplexValue(this.name, Components.interfaces.nsISupportsString, iss);</span>
<a href="#l1173"></a><span id="l1173">+            break;</span>
<a href="#l1174"></a><span id="l1174">+          case &quot;file&quot;:</span>
<a href="#l1175"></a><span id="l1175">+            var lf;</span>
<a href="#l1176"></a><span id="l1176">+            if (typeof(val) == &quot;string&quot;) {</span>
<a href="#l1177"></a><span id="l1177">+              lf = Components.classes[&quot;@mozilla.org/file/local;1&quot;]</span>
<a href="#l1178"></a><span id="l1178">+                             .createInstance(Components.interfaces.nsILocalFile);</span>
<a href="#l1179"></a><span id="l1179">+              lf.persistentDescriptor = val;</span>
<a href="#l1180"></a><span id="l1180">+              if (!lf.exists())</span>
<a href="#l1181"></a><span id="l1181">+                lf.initWithPath(val);</span>
<a href="#l1182"></a><span id="l1182">+            } else</span>
<a href="#l1183"></a><span id="l1183">+              lf = val.QueryInterface(Components.interfaces.nsILocalFile);</span>
<a href="#l1184"></a><span id="l1184">+            this.preferences.rootBranch</span>
<a href="#l1185"></a><span id="l1185">+                .setComplexValue(this.name, Components.interfaces.nsILocalFile, lf);</span>
<a href="#l1186"></a><span id="l1186">+            break;</span>
<a href="#l1187"></a><span id="l1187">+          default:</span>
<a href="#l1188"></a><span id="l1188">+            this._reportUnknownType();</span>
<a href="#l1189"></a><span id="l1189">+          }</span>
<a href="#l1190"></a><span id="l1190">+          if (!this.batching)</span>
<a href="#l1191"></a><span id="l1191">+            this.preferences.service.savePrefFile(null);</span>
<a href="#l1192"></a><span id="l1192">+          return val;</span>
<a href="#l1193"></a><span id="l1193">+        ]]&gt;</span>
<a href="#l1194"></a><span id="l1194">+        &lt;/setter&gt;</span>
<a href="#l1195"></a><span id="l1195">+      &lt;/property&gt;</span>
<a href="#l1196"></a><span id="l1196">+</span>
<a href="#l1197"></a><span id="l1197">+      &lt;method name=&quot;setElementValue&quot;&gt;</span>
<a href="#l1198"></a><span id="l1198">+        &lt;parameter name=&quot;aElement&quot;/&gt;</span>
<a href="#l1199"></a><span id="l1199">+        &lt;body&gt;</span>
<a href="#l1200"></a><span id="l1200">+        &lt;![CDATA[</span>
<a href="#l1201"></a><span id="l1201">+          if (this.locked)</span>
<a href="#l1202"></a><span id="l1202">+            aElement.disabled = true;</span>
<a href="#l1203"></a><span id="l1203">+</span>
<a href="#l1204"></a><span id="l1204">+          if (!this.isElementEditable(aElement))</span>
<a href="#l1205"></a><span id="l1205">+            return;</span>
<a href="#l1206"></a><span id="l1206">+</span>
<a href="#l1207"></a><span id="l1207">+          var rv = undefined;</span>
<a href="#l1208"></a><span id="l1208">+          if (aElement.hasAttribute(&quot;onsyncfrompreference&quot;)) {</span>
<a href="#l1209"></a><span id="l1209">+            // Value changed, synthesize an event</span>
<a href="#l1210"></a><span id="l1210">+            try {</span>
<a href="#l1211"></a><span id="l1211">+              var event = document.createEvent(&quot;Events&quot;);</span>
<a href="#l1212"></a><span id="l1212">+              event.initEvent(&quot;syncfrompreference&quot;, true, true);</span>
<a href="#l1213"></a><span id="l1213">+              var f = new Function(&quot;event&quot;,</span>
<a href="#l1214"></a><span id="l1214">+                                   aElement.getAttribute(&quot;onsyncfrompreference&quot;));</span>
<a href="#l1215"></a><span id="l1215">+              rv = f.call(aElement, event);</span>
<a href="#l1216"></a><span id="l1216">+            } catch (e) {</span>
<a href="#l1217"></a><span id="l1217">+              Components.utils.reportError(e);</span>
<a href="#l1218"></a><span id="l1218">+            }</span>
<a href="#l1219"></a><span id="l1219">+          }</span>
<a href="#l1220"></a><span id="l1220">+          var val = rv;</span>
<a href="#l1221"></a><span id="l1221">+          if (val === undefined)</span>
<a href="#l1222"></a><span id="l1222">+            val = this.instantApply ? this.valueFromPreferences : this.value;</span>
<a href="#l1223"></a><span id="l1223">+          // if the preference is marked for reset, show default value in UI</span>
<a href="#l1224"></a><span id="l1224">+          if (val === undefined)</span>
<a href="#l1225"></a><span id="l1225">+            val = this.defaultValue;</span>
<a href="#l1226"></a><span id="l1226">+</span>
<a href="#l1227"></a><span id="l1227">+          /**</span>
<a href="#l1228"></a><span id="l1228">+           * Initialize a UI element property with a value. Handles the case</span>
<a href="#l1229"></a><span id="l1229">+           * where an element has not yet had a XBL binding attached for it and</span>
<a href="#l1230"></a><span id="l1230">+           * the property setter does not yet exist by setting the same attribute</span>
<a href="#l1231"></a><span id="l1231">+           * on the XUL element using DOM apis and assuming the element's</span>
<a href="#l1232"></a><span id="l1232">+           * constructor or property getters appropriately handle this state.</span>
<a href="#l1233"></a><span id="l1233">+           */</span>
<a href="#l1234"></a><span id="l1234">+          function setValue(element, attribute, value) {</span>
<a href="#l1235"></a><span id="l1235">+            if (attribute in element)</span>
<a href="#l1236"></a><span id="l1236">+              element[attribute] = value;</span>
<a href="#l1237"></a><span id="l1237">+            else</span>
<a href="#l1238"></a><span id="l1238">+              element.setAttribute(attribute, value);</span>
<a href="#l1239"></a><span id="l1239">+          }</span>
<a href="#l1240"></a><span id="l1240">+          if (aElement.localName == &quot;checkbox&quot; ||</span>
<a href="#l1241"></a><span id="l1241">+              aElement.localName == &quot;listitem&quot;)</span>
<a href="#l1242"></a><span id="l1242">+            setValue(aElement, &quot;checked&quot;, val);</span>
<a href="#l1243"></a><span id="l1243">+          else if (aElement.localName == &quot;colorpicker&quot;)</span>
<a href="#l1244"></a><span id="l1244">+            setValue(aElement, &quot;color&quot;, val);</span>
<a href="#l1245"></a><span id="l1245">+          else if (aElement.localName == &quot;textbox&quot;) {</span>
<a href="#l1246"></a><span id="l1246">+            // XXXmano Bug 303998: Avoid a caret placement issue if either the</span>
<a href="#l1247"></a><span id="l1247">+            // preference observer or its setter calls updateElements as a result</span>
<a href="#l1248"></a><span id="l1248">+            // of the input event handler.</span>
<a href="#l1249"></a><span id="l1249">+            if (aElement.value !== val)</span>
<a href="#l1250"></a><span id="l1250">+              setValue(aElement, &quot;value&quot;, val);</span>
<a href="#l1251"></a><span id="l1251">+          } else</span>
<a href="#l1252"></a><span id="l1252">+            setValue(aElement, &quot;value&quot;, val);</span>
<a href="#l1253"></a><span id="l1253">+        ]]&gt;</span>
<a href="#l1254"></a><span id="l1254">+        &lt;/body&gt;</span>
<a href="#l1255"></a><span id="l1255">+      &lt;/method&gt;</span>
<a href="#l1256"></a><span id="l1256">+</span>
<a href="#l1257"></a><span id="l1257">+      &lt;method name=&quot;getElementValue&quot;&gt;</span>
<a href="#l1258"></a><span id="l1258">+        &lt;parameter name=&quot;aElement&quot;/&gt;</span>
<a href="#l1259"></a><span id="l1259">+        &lt;body&gt;</span>
<a href="#l1260"></a><span id="l1260">+        &lt;![CDATA[</span>
<a href="#l1261"></a><span id="l1261">+          if (aElement.hasAttribute(&quot;onsynctopreference&quot;)) {</span>
<a href="#l1262"></a><span id="l1262">+            // Value changed, synthesize an event</span>
<a href="#l1263"></a><span id="l1263">+            try {</span>
<a href="#l1264"></a><span id="l1264">+              var event = document.createEvent(&quot;Events&quot;);</span>
<a href="#l1265"></a><span id="l1265">+              event.initEvent(&quot;synctopreference&quot;, true, true);</span>
<a href="#l1266"></a><span id="l1266">+              var f = new Function(&quot;event&quot;,</span>
<a href="#l1267"></a><span id="l1267">+                                   aElement.getAttribute(&quot;onsynctopreference&quot;));</span>
<a href="#l1268"></a><span id="l1268">+              var rv = f.call(aElement, event);</span>
<a href="#l1269"></a><span id="l1269">+              if (rv !== undefined)</span>
<a href="#l1270"></a><span id="l1270">+                return rv;</span>
<a href="#l1271"></a><span id="l1271">+            } catch (e) {</span>
<a href="#l1272"></a><span id="l1272">+              Components.utils.reportError(e);</span>
<a href="#l1273"></a><span id="l1273">+            }</span>
<a href="#l1274"></a><span id="l1274">+          }</span>
<a href="#l1275"></a><span id="l1275">+</span>
<a href="#l1276"></a><span id="l1276">+          /**</span>
<a href="#l1277"></a><span id="l1277">+           * Read the value of an attribute from an element, assuming the</span>
<a href="#l1278"></a><span id="l1278">+           * attribute is a property on the element's node API. If the property</span>
<a href="#l1279"></a><span id="l1279">+           * is not present in the API, then assume its value is contained in</span>
<a href="#l1280"></a><span id="l1280">+           * an attribute, as is the case before a binding has been attached.</span>
<a href="#l1281"></a><span id="l1281">+           */</span>
<a href="#l1282"></a><span id="l1282">+          function getValue(element, attribute) {</span>
<a href="#l1283"></a><span id="l1283">+            if (attribute in element)</span>
<a href="#l1284"></a><span id="l1284">+              return element[attribute];</span>
<a href="#l1285"></a><span id="l1285">+            return element.getAttribute(attribute);</span>
<a href="#l1286"></a><span id="l1286">+          }</span>
<a href="#l1287"></a><span id="l1287">+          if (aElement.localName == &quot;checkbox&quot; ||</span>
<a href="#l1288"></a><span id="l1288">+              aElement.localName == &quot;listitem&quot;)</span>
<a href="#l1289"></a><span id="l1289">+            var value = getValue(aElement, &quot;checked&quot;);</span>
<a href="#l1290"></a><span id="l1290">+          else if (aElement.localName == &quot;colorpicker&quot;)</span>
<a href="#l1291"></a><span id="l1291">+            value = getValue(aElement, &quot;color&quot;);</span>
<a href="#l1292"></a><span id="l1292">+          else</span>
<a href="#l1293"></a><span id="l1293">+            value = getValue(aElement, &quot;value&quot;);</span>
<a href="#l1294"></a><span id="l1294">+</span>
<a href="#l1295"></a><span id="l1295">+          switch (this.type) {</span>
<a href="#l1296"></a><span id="l1296">+          case &quot;int&quot;:</span>
<a href="#l1297"></a><span id="l1297">+            return parseInt(value, 10) || 0;</span>
<a href="#l1298"></a><span id="l1298">+          case &quot;bool&quot;:</span>
<a href="#l1299"></a><span id="l1299">+            return typeof(value) == &quot;boolean&quot; ? value : value == &quot;true&quot;;</span>
<a href="#l1300"></a><span id="l1300">+          }</span>
<a href="#l1301"></a><span id="l1301">+          return value;</span>
<a href="#l1302"></a><span id="l1302">+        ]]&gt;</span>
<a href="#l1303"></a><span id="l1303">+        &lt;/body&gt;</span>
<a href="#l1304"></a><span id="l1304">+      &lt;/method&gt;</span>
<a href="#l1305"></a><span id="l1305">+</span>
<a href="#l1306"></a><span id="l1306">+      &lt;method name=&quot;isElementEditable&quot;&gt;</span>
<a href="#l1307"></a><span id="l1307">+        &lt;parameter name=&quot;aElement&quot;/&gt;</span>
<a href="#l1308"></a><span id="l1308">+        &lt;body&gt;</span>
<a href="#l1309"></a><span id="l1309">+        &lt;![CDATA[</span>
<a href="#l1310"></a><span id="l1310">+          switch (aElement.localName) {</span>
<a href="#l1311"></a><span id="l1311">+          case &quot;checkbox&quot;:</span>
<a href="#l1312"></a><span id="l1312">+          case &quot;colorpicker&quot;:</span>
<a href="#l1313"></a><span id="l1313">+          case &quot;radiogroup&quot;:</span>
<a href="#l1314"></a><span id="l1314">+          case &quot;textbox&quot;:</span>
<a href="#l1315"></a><span id="l1315">+          case &quot;listitem&quot;:</span>
<a href="#l1316"></a><span id="l1316">+          case &quot;listbox&quot;:</span>
<a href="#l1317"></a><span id="l1317">+          case &quot;menulist&quot;:</span>
<a href="#l1318"></a><span id="l1318">+            return true;</span>
<a href="#l1319"></a><span id="l1319">+          }</span>
<a href="#l1320"></a><span id="l1320">+          return aElement.getAttribute(&quot;preference-editable&quot;) == &quot;true&quot;;</span>
<a href="#l1321"></a><span id="l1321">+        ]]&gt;</span>
<a href="#l1322"></a><span id="l1322">+        &lt;/body&gt;</span>
<a href="#l1323"></a><span id="l1323">+      &lt;/method&gt;</span>
<a href="#l1324"></a><span id="l1324">+</span>
<a href="#l1325"></a><span id="l1325">+      &lt;method name=&quot;updateElements&quot;&gt;</span>
<a href="#l1326"></a><span id="l1326">+        &lt;body&gt;</span>
<a href="#l1327"></a><span id="l1327">+        &lt;![CDATA[</span>
<a href="#l1328"></a><span id="l1328">+          if (!this.id)</span>
<a href="#l1329"></a><span id="l1329">+            return;</span>
<a href="#l1330"></a><span id="l1330">+</span>
<a href="#l1331"></a><span id="l1331">+          // This &quot;change&quot; event handler tracks changes made to preferences by</span>
<a href="#l1332"></a><span id="l1332">+          // sources other than the user in this window.</span>
<a href="#l1333"></a><span id="l1333">+          var elements = document.getElementsByAttribute(&quot;preference&quot;, this.id);</span>
<a href="#l1334"></a><span id="l1334">+          for (var i = 0; i &lt; elements.length; ++i)</span>
<a href="#l1335"></a><span id="l1335">+            this.setElementValue(elements[i]);</span>
<a href="#l1336"></a><span id="l1336">+        ]]&gt;</span>
<a href="#l1337"></a><span id="l1337">+        &lt;/body&gt;</span>
<a href="#l1338"></a><span id="l1338">+      &lt;/method&gt;</span>
<a href="#l1339"></a><span id="l1339">+    &lt;/implementation&gt;</span>
<a href="#l1340"></a><span id="l1340">+</span>
<a href="#l1341"></a><span id="l1341">+    &lt;handlers&gt;</span>
<a href="#l1342"></a><span id="l1342">+      &lt;handler event=&quot;change&quot;&gt;</span>
<a href="#l1343"></a><span id="l1343">+        this.updateElements();</span>
<a href="#l1344"></a><span id="l1344">+      &lt;/handler&gt;</span>
<a href="#l1345"></a><span id="l1345">+    &lt;/handlers&gt;</span>
<a href="#l1346"></a><span id="l1346">+  &lt;/binding&gt;</span>
<a href="#l1347"></a><span id="l1347">+</span>
<a href="#l1348"></a><span id="l1348">+  &lt;binding id=&quot;prefwindow&quot;</span>
<a href="#l1349"></a><span id="l1349">+           extends=&quot;chrome://global/content/bindings/dialog.xml#dialog&quot;&gt;</span>
<a href="#l1350"></a><span id="l1350">+    &lt;resources&gt;</span>
<a href="#l1351"></a><span id="l1351">+      &lt;stylesheet src=&quot;chrome://global/skin/preferences.css&quot;/&gt;</span>
<a href="#l1352"></a><span id="l1352">+    &lt;/resources&gt;</span>
<a href="#l1353"></a><span id="l1353">+    &lt;content dlgbuttons=&quot;accept,cancel&quot; persist=&quot;lastSelected screenX screenY&quot;</span>
<a href="#l1354"></a><span id="l1354">+             closebuttonlabel=&quot;&amp;preferencesCloseButton.label;&quot;</span>
<a href="#l1355"></a><span id="l1355">+             closebuttonaccesskey=&quot;&amp;preferencesCloseButton.accesskey;&quot;</span>
<a href="#l1356"></a><span id="l1356">+             role=&quot;dialog&quot;</span>
<a href="#l1357"></a><span id="l1357">+#ifdef XP_WIN</span>
<a href="#l1358"></a><span id="l1358">+             title=&quot;&amp;preferencesDefaultTitleWin.title;&quot;&gt;</span>
<a href="#l1359"></a><span id="l1359">+#else</span>
<a href="#l1360"></a><span id="l1360">+             title=&quot;&amp;preferencesDefaultTitleMac.title;&quot;&gt;</span>
<a href="#l1361"></a><span id="l1361">+#endif</span>
<a href="#l1362"></a><span id="l1362">+      &lt;xul:windowdragbox orient=&quot;vertical&quot;&gt;</span>
<a href="#l1363"></a><span id="l1363">+        &lt;xul:radiogroup anonid=&quot;selector&quot; orient=&quot;horizontal&quot; class=&quot;paneSelector chromeclass-toolbar&quot;</span>
<a href="#l1364"></a><span id="l1364">+                        role=&quot;listbox&quot;/&gt; &lt;!-- Expose to accessibility APIs as a listbox --&gt;</span>
<a href="#l1365"></a><span id="l1365">+      &lt;/xul:windowdragbox&gt;</span>
<a href="#l1366"></a><span id="l1366">+      &lt;xul:hbox flex=&quot;1&quot; class=&quot;paneDeckContainer&quot;&gt;</span>
<a href="#l1367"></a><span id="l1367">+        &lt;xul:deck anonid=&quot;paneDeck&quot; flex=&quot;1&quot;&gt;</span>
<a href="#l1368"></a><span id="l1368">+          &lt;children includes=&quot;prefpane&quot;/&gt;</span>
<a href="#l1369"></a><span id="l1369">+        &lt;/xul:deck&gt;</span>
<a href="#l1370"></a><span id="l1370">+      &lt;/xul:hbox&gt;</span>
<a href="#l1371"></a><span id="l1371">+      &lt;xul:hbox anonid=&quot;dlg-buttons&quot; class=&quot;prefWindow-dlgbuttons&quot; pack=&quot;end&quot;&gt;</span>
<a href="#l1372"></a><span id="l1372">+#ifndef XP_UNIX</span>
<a href="#l1373"></a><span id="l1373">+        &lt;xul:button dlgtype=&quot;disclosure&quot; class=&quot;dialog-button&quot; hidden=&quot;true&quot;/&gt;</span>
<a href="#l1374"></a><span id="l1374">+        &lt;xul:button dlgtype=&quot;help&quot; class=&quot;dialog-button&quot; hidden=&quot;true&quot; icon=&quot;help&quot;/&gt;</span>
<a href="#l1375"></a><span id="l1375">+        &lt;xul:button dlgtype=&quot;extra2&quot; class=&quot;dialog-button&quot; hidden=&quot;true&quot;/&gt;</span>
<a href="#l1376"></a><span id="l1376">+        &lt;xul:button dlgtype=&quot;extra1&quot; class=&quot;dialog-button&quot; hidden=&quot;true&quot;/&gt;</span>
<a href="#l1377"></a><span id="l1377">+        &lt;xul:spacer anonid=&quot;spacer&quot; flex=&quot;1&quot;/&gt;</span>
<a href="#l1378"></a><span id="l1378">+        &lt;xul:button dlgtype=&quot;cancel&quot; class=&quot;dialog-button&quot; icon=&quot;cancel&quot;/&gt;</span>
<a href="#l1379"></a><span id="l1379">+        &lt;xul:button dlgtype=&quot;accept&quot; class=&quot;dialog-button&quot; icon=&quot;accept&quot;/&gt;</span>
<a href="#l1380"></a><span id="l1380">+#else</span>
<a href="#l1381"></a><span id="l1381">+        &lt;xul:button dlgtype=&quot;extra2&quot; class=&quot;dialog-button&quot; hidden=&quot;true&quot;/&gt;</span>
<a href="#l1382"></a><span id="l1382">+        &lt;xul:spacer anonid=&quot;spacer&quot; flex=&quot;1&quot;/&gt;</span>
<a href="#l1383"></a><span id="l1383">+        &lt;xul:button dlgtype=&quot;accept&quot; class=&quot;dialog-button&quot; icon=&quot;accept&quot;/&gt;</span>
<a href="#l1384"></a><span id="l1384">+        &lt;xul:button dlgtype=&quot;extra1&quot; class=&quot;dialog-button&quot; hidden=&quot;true&quot;/&gt;</span>
<a href="#l1385"></a><span id="l1385">+        &lt;xul:button dlgtype=&quot;cancel&quot; class=&quot;dialog-button&quot; icon=&quot;cancel&quot;/&gt;</span>
<a href="#l1386"></a><span id="l1386">+        &lt;xul:button dlgtype=&quot;help&quot; class=&quot;dialog-button&quot; hidden=&quot;true&quot; icon=&quot;help&quot;/&gt;</span>
<a href="#l1387"></a><span id="l1387">+        &lt;xul:button dlgtype=&quot;disclosure&quot; class=&quot;dialog-button&quot; hidden=&quot;true&quot;/&gt;</span>
<a href="#l1388"></a><span id="l1388">+#endif</span>
<a href="#l1389"></a><span id="l1389">+      &lt;/xul:hbox&gt;</span>
<a href="#l1390"></a><span id="l1390">+      &lt;xul:hbox&gt;</span>
<a href="#l1391"></a><span id="l1391">+        &lt;children/&gt;</span>
<a href="#l1392"></a><span id="l1392">+      &lt;/xul:hbox&gt;</span>
<a href="#l1393"></a><span id="l1393">+    &lt;/content&gt;</span>
<a href="#l1394"></a><span id="l1394">+    &lt;implementation implements=&quot;nsITimerCallback&quot;&gt;</span>
<a href="#l1395"></a><span id="l1395">+      &lt;constructor&gt;</span>
<a href="#l1396"></a><span id="l1396">+      &lt;![CDATA[</span>
<a href="#l1397"></a><span id="l1397">+        if (this.type != &quot;child&quot;) {</span>
<a href="#l1398"></a><span id="l1398">+          if (!this._instantApplyInitialized) {</span>
<a href="#l1399"></a><span id="l1399">+            let psvc = Components.classes[&quot;@mozilla.org/preferences-service;1&quot;]</span>
<a href="#l1400"></a><span id="l1400">+                                 .getService(Components.interfaces.nsIPrefBranch);</span>
<a href="#l1401"></a><span id="l1401">+            this.instantApply = psvc.getBoolPref(&quot;browser.preferences.instantApply&quot;);</span>
<a href="#l1402"></a><span id="l1402">+          }</span>
<a href="#l1403"></a><span id="l1403">+          if (this.instantApply) {</span>
<a href="#l1404"></a><span id="l1404">+            var docElt = document.documentElement;</span>
<a href="#l1405"></a><span id="l1405">+            var acceptButton = docElt.getButton(&quot;accept&quot;);</span>
<a href="#l1406"></a><span id="l1406">+            acceptButton.hidden = true;</span>
<a href="#l1407"></a><span id="l1407">+            var cancelButton  = docElt.getButton(&quot;cancel&quot;);</span>
<a href="#l1408"></a><span id="l1408">+            if (/Mac/.test(navigator.platform)) {</span>
<a href="#l1409"></a><span id="l1409">+              // no buttons on Mac except Help</span>
<a href="#l1410"></a><span id="l1410">+              cancelButton.hidden = true;</span>
<a href="#l1411"></a><span id="l1411">+              // Move Help button to the end</span>
<a href="#l1412"></a><span id="l1412">+              document.getAnonymousElementByAttribute(this, &quot;anonid&quot;, &quot;spacer&quot;).hidden = true;</span>
<a href="#l1413"></a><span id="l1413">+              // Also, don't fire onDialogAccept on enter</span>
<a href="#l1414"></a><span id="l1414">+              acceptButton.disabled = true;</span>
<a href="#l1415"></a><span id="l1415">+            } else {</span>
<a href="#l1416"></a><span id="l1416">+              // morph the Cancel button into the Close button</span>
<a href="#l1417"></a><span id="l1417">+              cancelButton.setAttribute(&quot;icon&quot;, &quot;close&quot;);</span>
<a href="#l1418"></a><span id="l1418">+              cancelButton.label = docElt.getAttribute(&quot;closebuttonlabel&quot;);</span>
<a href="#l1419"></a><span id="l1419">+              cancelButton.accesskey = docElt.getAttribute(&quot;closebuttonaccesskey&quot;);</span>
<a href="#l1420"></a><span id="l1420">+            }</span>
<a href="#l1421"></a><span id="l1421">+          }</span>
<a href="#l1422"></a><span id="l1422">+        }</span>
<a href="#l1423"></a><span id="l1423">+        this.setAttribute(&quot;animated&quot;, this._shouldAnimate ? &quot;true&quot; : &quot;false&quot;);</span>
<a href="#l1424"></a><span id="l1424">+        var panes = this.preferencePanes;</span>
<a href="#l1425"></a><span id="l1425">+</span>
<a href="#l1426"></a><span id="l1426">+        var lastPane = null;</span>
<a href="#l1427"></a><span id="l1427">+        if (this.lastSelected) {</span>
<a href="#l1428"></a><span id="l1428">+          lastPane = document.getElementById(this.lastSelected);</span>
<a href="#l1429"></a><span id="l1429">+          if (!lastPane) {</span>
<a href="#l1430"></a><span id="l1430">+            this.lastSelected = &quot;&quot;;</span>
<a href="#l1431"></a><span id="l1431">+          }</span>
<a href="#l1432"></a><span id="l1432">+        }</span>
<a href="#l1433"></a><span id="l1433">+</span>
<a href="#l1434"></a><span id="l1434">+        var paneToLoad;</span>
<a href="#l1435"></a><span id="l1435">+        if (&quot;arguments&quot; in window &amp;&amp; window.arguments[0] &amp;&amp; document.getElementById(window.arguments[0]) &amp;&amp; document.getElementById(window.arguments[0]).nodeName == &quot;prefpane&quot;) {</span>
<a href="#l1436"></a><span id="l1436">+          paneToLoad = document.getElementById(window.arguments[0]);</span>
<a href="#l1437"></a><span id="l1437">+          this.lastSelected = paneToLoad.id;</span>
<a href="#l1438"></a><span id="l1438">+        } else if (lastPane)</span>
<a href="#l1439"></a><span id="l1439">+          paneToLoad = lastPane;</span>
<a href="#l1440"></a><span id="l1440">+        else</span>
<a href="#l1441"></a><span id="l1441">+          paneToLoad = panes[0];</span>
<a href="#l1442"></a><span id="l1442">+</span>
<a href="#l1443"></a><span id="l1443">+        for (var i = 0; i &lt; panes.length; ++i) {</span>
<a href="#l1444"></a><span id="l1444">+          this._makePaneButton(panes[i]);</span>
<a href="#l1445"></a><span id="l1445">+          if (panes[i].loaded) {</span>
<a href="#l1446"></a><span id="l1446">+            // Inline pane content, fire load event to force initialization.</span>
<a href="#l1447"></a><span id="l1447">+            this._fireEvent(&quot;paneload&quot;, panes[i]);</span>
<a href="#l1448"></a><span id="l1448">+          }</span>
<a href="#l1449"></a><span id="l1449">+        }</span>
<a href="#l1450"></a><span id="l1450">+        this.showPane(paneToLoad);</span>
<a href="#l1451"></a><span id="l1451">+</span>
<a href="#l1452"></a><span id="l1452">+        if (panes.length == 1)</span>
<a href="#l1453"></a><span id="l1453">+          this._selector.setAttribute(&quot;collapsed&quot;, &quot;true&quot;);</span>
<a href="#l1454"></a><span id="l1454">+      ]]&gt;</span>
<a href="#l1455"></a><span id="l1455">+      &lt;/constructor&gt;</span>
<a href="#l1456"></a><span id="l1456">+</span>
<a href="#l1457"></a><span id="l1457">+      &lt;destructor&gt;</span>
<a href="#l1458"></a><span id="l1458">+      &lt;![CDATA[</span>
<a href="#l1459"></a><span id="l1459">+        // Release timers to avoid reference cycles.</span>
<a href="#l1460"></a><span id="l1460">+        if (this._animateTimer) {</span>
<a href="#l1461"></a><span id="l1461">+          this._animateTimer.cancel();</span>
<a href="#l1462"></a><span id="l1462">+          this._animateTimer = null;</span>
<a href="#l1463"></a><span id="l1463">+        }</span>
<a href="#l1464"></a><span id="l1464">+        if (this._fadeTimer) {</span>
<a href="#l1465"></a><span id="l1465">+          this._fadeTimer.cancel();</span>
<a href="#l1466"></a><span id="l1466">+          this._fadeTimer = null;</span>
<a href="#l1467"></a><span id="l1467">+        }</span>
<a href="#l1468"></a><span id="l1468">+      ]]&gt;</span>
<a href="#l1469"></a><span id="l1469">+      &lt;/destructor&gt;</span>
<a href="#l1470"></a><span id="l1470">+</span>
<a href="#l1471"></a><span id="l1471">+      &lt;!-- Derived bindings can set this to true to cause us to skip</span>
<a href="#l1472"></a><span id="l1472">+           reading the browser.preferences.instantApply pref in the constructor.</span>
<a href="#l1473"></a><span id="l1473">+           Then they can set instantApply to their wished value. --&gt;</span>
<a href="#l1474"></a><span id="l1474">+      &lt;field name=&quot;_instantApplyInitialized&quot;&gt;false&lt;/field&gt;</span>
<a href="#l1475"></a><span id="l1475">+      &lt;!-- Controls whether changed pref values take effect immediately. --&gt;</span>
<a href="#l1476"></a><span id="l1476">+      &lt;field name=&quot;instantApply&quot;&gt;false&lt;/field&gt;</span>
<a href="#l1477"></a><span id="l1477">+</span>
<a href="#l1478"></a><span id="l1478">+      &lt;property name=&quot;preferencePanes&quot;</span>
<a href="#l1479"></a><span id="l1479">+                onget=&quot;return this.getElementsByTagName('prefpane');&quot;/&gt;</span>
<a href="#l1480"></a><span id="l1480">+</span>
<a href="#l1481"></a><span id="l1481">+      &lt;property name=&quot;type&quot; onget=&quot;return this.getAttribute('type');&quot;/&gt;</span>
<a href="#l1482"></a><span id="l1482">+      &lt;property name=&quot;_paneDeck&quot;</span>
<a href="#l1483"></a><span id="l1483">+                onget=&quot;return document.getAnonymousElementByAttribute(this, 'anonid', 'paneDeck');&quot;/&gt;</span>
<a href="#l1484"></a><span id="l1484">+      &lt;property name=&quot;_paneDeckContainer&quot;</span>
<a href="#l1485"></a><span id="l1485">+                onget=&quot;return document.getAnonymousElementByAttribute(this, 'class', 'paneDeckContainer');&quot;/&gt;</span>
<a href="#l1486"></a><span id="l1486">+      &lt;property name=&quot;_selector&quot;</span>
<a href="#l1487"></a><span id="l1487">+                onget=&quot;return document.getAnonymousElementByAttribute(this, 'anonid', 'selector');&quot;/&gt;</span>
<a href="#l1488"></a><span id="l1488">+      &lt;property name=&quot;lastSelected&quot;</span>
<a href="#l1489"></a><span id="l1489">+                onget=&quot;return this.getAttribute('lastSelected');&quot;&gt;</span>
<a href="#l1490"></a><span id="l1490">+        &lt;setter&gt;</span>
<a href="#l1491"></a><span id="l1491">+          this.setAttribute(&quot;lastSelected&quot;, val);</span>
<a href="#l1492"></a><span id="l1492">+          document.persist(this.id, &quot;lastSelected&quot;);</span>
<a href="#l1493"></a><span id="l1493">+          return val;</span>
<a href="#l1494"></a><span id="l1494">+        &lt;/setter&gt;</span>
<a href="#l1495"></a><span id="l1495">+      &lt;/property&gt;</span>
<a href="#l1496"></a><span id="l1496">+      &lt;property name=&quot;currentPane&quot;</span>
<a href="#l1497"></a><span id="l1497">+                onset=&quot;return this._currentPane = val;&quot;&gt;</span>
<a href="#l1498"></a><span id="l1498">+        &lt;getter&gt;</span>
<a href="#l1499"></a><span id="l1499">+          if (!this._currentPane)</span>
<a href="#l1500"></a><span id="l1500">+            this._currentPane = this.preferencePanes[0];</span>
<a href="#l1501"></a><span id="l1501">+</span>
<a href="#l1502"></a><span id="l1502">+          return this._currentPane;</span>
<a href="#l1503"></a><span id="l1503">+        &lt;/getter&gt;</span>
<a href="#l1504"></a><span id="l1504">+      &lt;/property&gt;</span>
<a href="#l1505"></a><span id="l1505">+      &lt;field name=&quot;_currentPane&quot;&gt;null&lt;/field&gt;</span>
<a href="#l1506"></a><span id="l1506">+</span>
<a href="#l1507"></a><span id="l1507">+</span>
<a href="#l1508"></a><span id="l1508">+      &lt;method name=&quot;_makePaneButton&quot;&gt;</span>
<a href="#l1509"></a><span id="l1509">+        &lt;parameter name=&quot;aPaneElement&quot;/&gt;</span>
<a href="#l1510"></a><span id="l1510">+        &lt;body&gt;</span>
<a href="#l1511"></a><span id="l1511">+        &lt;![CDATA[</span>
<a href="#l1512"></a><span id="l1512">+          var radio = document.createElement(&quot;radio&quot;);</span>
<a href="#l1513"></a><span id="l1513">+          radio.setAttribute(&quot;pane&quot;, aPaneElement.id);</span>
<a href="#l1514"></a><span id="l1514">+          radio.setAttribute(&quot;label&quot;, aPaneElement.label);</span>
<a href="#l1515"></a><span id="l1515">+          // Expose preference group choice to accessibility APIs as an unchecked list item</span>
<a href="#l1516"></a><span id="l1516">+          // The parent group is exposed to accessibility APIs as a list</span>
<a href="#l1517"></a><span id="l1517">+          if (aPaneElement.image)</span>
<a href="#l1518"></a><span id="l1518">+            radio.setAttribute(&quot;src&quot;, aPaneElement.image);</span>
<a href="#l1519"></a><span id="l1519">+          radio.style.listStyleImage = aPaneElement.style.listStyleImage;</span>
<a href="#l1520"></a><span id="l1520">+          this._selector.appendChild(radio);</span>
<a href="#l1521"></a><span id="l1521">+          return radio;</span>
<a href="#l1522"></a><span id="l1522">+        ]]&gt;</span>
<a href="#l1523"></a><span id="l1523">+        &lt;/body&gt;</span>
<a href="#l1524"></a><span id="l1524">+      &lt;/method&gt;</span>
<a href="#l1525"></a><span id="l1525">+</span>
<a href="#l1526"></a><span id="l1526">+      &lt;method name=&quot;showPane&quot;&gt;</span>
<a href="#l1527"></a><span id="l1527">+        &lt;parameter name=&quot;aPaneElement&quot;/&gt;</span>
<a href="#l1528"></a><span id="l1528">+        &lt;body&gt;</span>
<a href="#l1529"></a><span id="l1529">+        &lt;![CDATA[</span>
<a href="#l1530"></a><span id="l1530">+          if (!aPaneElement)</span>
<a href="#l1531"></a><span id="l1531">+            return;</span>
<a href="#l1532"></a><span id="l1532">+</span>
<a href="#l1533"></a><span id="l1533">+          this._selector.selectedItem = document.getAnonymousElementByAttribute(this, &quot;pane&quot;, aPaneElement.id);</span>
<a href="#l1534"></a><span id="l1534">+          if (!aPaneElement.loaded) {</span>
<a href="#l1535"></a><span id="l1535">+            let OverlayLoadObserver = function(aPane) {</span>
<a href="#l1536"></a><span id="l1536">+              this._pane = aPane;</span>
<a href="#l1537"></a><span id="l1537">+            }</span>
<a href="#l1538"></a><span id="l1538">+            OverlayLoadObserver.prototype = {</span>
<a href="#l1539"></a><span id="l1539">+              _outer: this,</span>
<a href="#l1540"></a><span id="l1540">+              observe(aSubject, aTopic, aData) {</span>
<a href="#l1541"></a><span id="l1541">+                this._pane.loaded = true;</span>
<a href="#l1542"></a><span id="l1542">+                this._outer._fireEvent(&quot;paneload&quot;, this._pane);</span>
<a href="#l1543"></a><span id="l1543">+                this._outer._selectPane(this._pane);</span>
<a href="#l1544"></a><span id="l1544">+              }</span>
<a href="#l1545"></a><span id="l1545">+            };</span>
<a href="#l1546"></a><span id="l1546">+</span>
<a href="#l1547"></a><span id="l1547">+            var obs = new OverlayLoadObserver(aPaneElement);</span>
<a href="#l1548"></a><span id="l1548">+            document.loadOverlay(aPaneElement.src, obs);</span>
<a href="#l1549"></a><span id="l1549">+          } else</span>
<a href="#l1550"></a><span id="l1550">+            this._selectPane(aPaneElement);</span>
<a href="#l1551"></a><span id="l1551">+        ]]&gt;</span>
<a href="#l1552"></a><span id="l1552">+        &lt;/body&gt;</span>
<a href="#l1553"></a><span id="l1553">+      &lt;/method&gt;</span>
<a href="#l1554"></a><span id="l1554">+</span>
<a href="#l1555"></a><span id="l1555">+      &lt;method name=&quot;_fireEvent&quot;&gt;</span>
<a href="#l1556"></a><span id="l1556">+        &lt;parameter name=&quot;aEventName&quot;/&gt;</span>
<a href="#l1557"></a><span id="l1557">+        &lt;parameter name=&quot;aTarget&quot;/&gt;</span>
<a href="#l1558"></a><span id="l1558">+        &lt;body&gt;</span>
<a href="#l1559"></a><span id="l1559">+        &lt;![CDATA[</span>
<a href="#l1560"></a><span id="l1560">+          // Panel loaded, synthesize a load event.</span>
<a href="#l1561"></a><span id="l1561">+          try {</span>
<a href="#l1562"></a><span id="l1562">+            var event = document.createEvent(&quot;Events&quot;);</span>
<a href="#l1563"></a><span id="l1563">+            event.initEvent(aEventName, true, true);</span>
<a href="#l1564"></a><span id="l1564">+            var cancel = !aTarget.dispatchEvent(event);</span>
<a href="#l1565"></a><span id="l1565">+            if (aTarget.hasAttribute(&quot;on&quot; + aEventName)) {</span>
<a href="#l1566"></a><span id="l1566">+              var fn = new Function(&quot;event&quot;, aTarget.getAttribute(&quot;on&quot; + aEventName));</span>
<a href="#l1567"></a><span id="l1567">+              var rv = fn.call(aTarget, event);</span>
<a href="#l1568"></a><span id="l1568">+              if (rv == false)</span>
<a href="#l1569"></a><span id="l1569">+                cancel = true;</span>
<a href="#l1570"></a><span id="l1570">+            }</span>
<a href="#l1571"></a><span id="l1571">+            return !cancel;</span>
<a href="#l1572"></a><span id="l1572">+          } catch (e) {</span>
<a href="#l1573"></a><span id="l1573">+            Components.utils.reportError(e);</span>
<a href="#l1574"></a><span id="l1574">+          }</span>
<a href="#l1575"></a><span id="l1575">+          return false;</span>
<a href="#l1576"></a><span id="l1576">+        ]]&gt;</span>
<a href="#l1577"></a><span id="l1577">+        &lt;/body&gt;</span>
<a href="#l1578"></a><span id="l1578">+      &lt;/method&gt;</span>
<a href="#l1579"></a><span id="l1579">+</span>
<a href="#l1580"></a><span id="l1580">+      &lt;field name=&quot;_initialized&quot;&gt;false&lt;/field&gt;</span>
<a href="#l1581"></a><span id="l1581">+      &lt;method name=&quot;_selectPane&quot;&gt;</span>
<a href="#l1582"></a><span id="l1582">+        &lt;parameter name=&quot;aPaneElement&quot;/&gt;</span>
<a href="#l1583"></a><span id="l1583">+        &lt;body&gt;</span>
<a href="#l1584"></a><span id="l1584">+        &lt;![CDATA[</span>
<a href="#l1585"></a><span id="l1585">+          if (/Mac/.test(navigator.platform)) {</span>
<a href="#l1586"></a><span id="l1586">+            var paneTitle = aPaneElement.label;</span>
<a href="#l1587"></a><span id="l1587">+            if (paneTitle != &quot;&quot;)</span>
<a href="#l1588"></a><span id="l1588">+              document.title = paneTitle;</span>
<a href="#l1589"></a><span id="l1589">+          }</span>
<a href="#l1590"></a><span id="l1590">+          var helpButton = document.documentElement.getButton(&quot;help&quot;);</span>
<a href="#l1591"></a><span id="l1591">+          if (aPaneElement.helpTopic)</span>
<a href="#l1592"></a><span id="l1592">+            helpButton.hidden = false;</span>
<a href="#l1593"></a><span id="l1593">+          else</span>
<a href="#l1594"></a><span id="l1594">+            helpButton.hidden = true;</span>
<a href="#l1595"></a><span id="l1595">+</span>
<a href="#l1596"></a><span id="l1596">+          // Find this pane's index in the deck and set the deck's</span>
<a href="#l1597"></a><span id="l1597">+          // selectedIndex to that value to switch to it.</span>
<a href="#l1598"></a><span id="l1598">+          var prefpanes = this.preferencePanes;</span>
<a href="#l1599"></a><span id="l1599">+          for (var i = 0; i &lt; prefpanes.length; ++i) {</span>
<a href="#l1600"></a><span id="l1600">+            if (prefpanes[i] == aPaneElement) {</span>
<a href="#l1601"></a><span id="l1601">+              this._paneDeck.selectedIndex = i;</span>
<a href="#l1602"></a><span id="l1602">+</span>
<a href="#l1603"></a><span id="l1603">+              if (this.type != &quot;child&quot;) {</span>
<a href="#l1604"></a><span id="l1604">+                if (aPaneElement.hasAttribute(&quot;flex&quot;) &amp;&amp; this._shouldAnimate &amp;&amp;</span>
<a href="#l1605"></a><span id="l1605">+                    prefpanes.length &gt; 1)</span>
<a href="#l1606"></a><span id="l1606">+                  aPaneElement.removeAttribute(&quot;flex&quot;);</span>
<a href="#l1607"></a><span id="l1607">+                // Calling sizeToContent after the first prefpane is loaded</span>
<a href="#l1608"></a><span id="l1608">+                // will size the windows contents so style information is</span>
<a href="#l1609"></a><span id="l1609">+                // available to calculate correct sizing.</span>
<a href="#l1610"></a><span id="l1610">+                if (!this._initialized &amp;&amp; prefpanes.length &gt; 1) {</span>
<a href="#l1611"></a><span id="l1611">+                  if (this._shouldAnimate)</span>
<a href="#l1612"></a><span id="l1612">+                    this.style.minHeight = 0;</span>
<a href="#l1613"></a><span id="l1613">+                  window.sizeToContent();</span>
<a href="#l1614"></a><span id="l1614">+                }</span>
<a href="#l1615"></a><span id="l1615">+</span>
<a href="#l1616"></a><span id="l1616">+                var oldPane = this.lastSelected ? document.getElementById(this.lastSelected) : this.preferencePanes[0];</span>
<a href="#l1617"></a><span id="l1617">+                oldPane.selected = !(aPaneElement.selected = true);</span>
<a href="#l1618"></a><span id="l1618">+                this.lastSelected = aPaneElement.id;</span>
<a href="#l1619"></a><span id="l1619">+                this.currentPane = aPaneElement;</span>
<a href="#l1620"></a><span id="l1620">+                this._initialized = true;</span>
<a href="#l1621"></a><span id="l1621">+</span>
<a href="#l1622"></a><span id="l1622">+                // Only animate if we've switched between prefpanes</span>
<a href="#l1623"></a><span id="l1623">+                if (this._shouldAnimate &amp;&amp; oldPane.id != aPaneElement.id) {</span>
<a href="#l1624"></a><span id="l1624">+                  aPaneElement.style.opacity = 0.0;</span>
<a href="#l1625"></a><span id="l1625">+                  this.animate(oldPane, aPaneElement);</span>
<a href="#l1626"></a><span id="l1626">+                } else if (!this._shouldAnimate &amp;&amp; prefpanes.length &gt; 1) {</span>
<a href="#l1627"></a><span id="l1627">+                  var targetHeight = parseInt(window.getComputedStyle(this._paneDeckContainer, &quot;&quot;).height);</span>
<a href="#l1628"></a><span id="l1628">+                  var verticalPadding = parseInt(window.getComputedStyle(aPaneElement, &quot;&quot;).paddingTop);</span>
<a href="#l1629"></a><span id="l1629">+                  verticalPadding += parseInt(window.getComputedStyle(aPaneElement, &quot;&quot;).paddingBottom);</span>
<a href="#l1630"></a><span id="l1630">+                  if (aPaneElement.contentHeight &gt; targetHeight - verticalPadding) {</span>
<a href="#l1631"></a><span id="l1631">+                    // To workaround the bottom border of a groupbox from being</span>
<a href="#l1632"></a><span id="l1632">+                    // cutoff an hbox with a class of bottomBox may enclose it.</span>
<a href="#l1633"></a><span id="l1633">+                    // This needs to include its padding to resize properly.</span>
<a href="#l1634"></a><span id="l1634">+                    // See bug 394433</span>
<a href="#l1635"></a><span id="l1635">+                    var bottomPadding = 0;</span>
<a href="#l1636"></a><span id="l1636">+                    var bottomBox = aPaneElement.getElementsByAttribute(&quot;class&quot;, &quot;bottomBox&quot;)[0];</span>
<a href="#l1637"></a><span id="l1637">+                    if (bottomBox)</span>
<a href="#l1638"></a><span id="l1638">+                      bottomPadding = parseInt(window.getComputedStyle(bottomBox, &quot;&quot;).paddingBottom);</span>
<a href="#l1639"></a><span id="l1639">+                    window.innerHeight += bottomPadding + verticalPadding + aPaneElement.contentHeight - targetHeight;</span>
<a href="#l1640"></a><span id="l1640">+                  }</span>
<a href="#l1641"></a><span id="l1641">+</span>
<a href="#l1642"></a><span id="l1642">+                  // XXX rstrong - extend the contents of the prefpane to</span>
<a href="#l1643"></a><span id="l1643">+                  // prevent elements from being cutoff (see bug 349098).</span>
<a href="#l1644"></a><span id="l1644">+                  if (aPaneElement.contentHeight + verticalPadding &lt; targetHeight)</span>
<a href="#l1645"></a><span id="l1645">+                    aPaneElement._content.style.height = targetHeight - verticalPadding + &quot;px&quot;;</span>
<a href="#l1646"></a><span id="l1646">+                }</span>
<a href="#l1647"></a><span id="l1647">+              }</span>
<a href="#l1648"></a><span id="l1648">+              break;</span>
<a href="#l1649"></a><span id="l1649">+            }</span>
<a href="#l1650"></a><span id="l1650">+          }</span>
<a href="#l1651"></a><span id="l1651">+        ]]&gt;</span>
<a href="#l1652"></a><span id="l1652">+        &lt;/body&gt;</span>
<a href="#l1653"></a><span id="l1653">+      &lt;/method&gt;</span>
<a href="#l1654"></a><span id="l1654">+</span>
<a href="#l1655"></a><span id="l1655">+      &lt;property name=&quot;_shouldAnimate&quot;&gt;</span>
<a href="#l1656"></a><span id="l1656">+        &lt;getter&gt;</span>
<a href="#l1657"></a><span id="l1657">+        &lt;![CDATA[</span>
<a href="#l1658"></a><span id="l1658">+          var psvc = Components.classes[&quot;@mozilla.org/preferences-service;1&quot;]</span>
<a href="#l1659"></a><span id="l1659">+                               .getService(Components.interfaces.nsIPrefBranch);</span>
<a href="#l1660"></a><span id="l1660">+          var animate = /Mac/.test(navigator.platform);</span>
<a href="#l1661"></a><span id="l1661">+          try {</span>
<a href="#l1662"></a><span id="l1662">+            animate = psvc.getBoolPref(&quot;browser.preferences.animateFadeIn&quot;);</span>
<a href="#l1663"></a><span id="l1663">+          } catch (e) { }</span>
<a href="#l1664"></a><span id="l1664">+          return animate;</span>
<a href="#l1665"></a><span id="l1665">+        ]]&gt;</span>
<a href="#l1666"></a><span id="l1666">+        &lt;/getter&gt;</span>
<a href="#l1667"></a><span id="l1667">+      &lt;/property&gt;</span>
<a href="#l1668"></a><span id="l1668">+</span>
<a href="#l1669"></a><span id="l1669">+      &lt;method name=&quot;animate&quot;&gt;</span>
<a href="#l1670"></a><span id="l1670">+        &lt;parameter name=&quot;aOldPane&quot;/&gt;</span>
<a href="#l1671"></a><span id="l1671">+        &lt;parameter name=&quot;aNewPane&quot;/&gt;</span>
<a href="#l1672"></a><span id="l1672">+        &lt;body&gt;</span>
<a href="#l1673"></a><span id="l1673">+        &lt;![CDATA[</span>
<a href="#l1674"></a><span id="l1674">+          // if we are already resizing, use currentHeight</span>
<a href="#l1675"></a><span id="l1675">+          var oldHeight = this._currentHeight ? this._currentHeight : aOldPane.contentHeight;</span>
<a href="#l1676"></a><span id="l1676">+</span>
<a href="#l1677"></a><span id="l1677">+          this._multiplier = aNewPane.contentHeight &gt; oldHeight ? 1 : -1;</span>
<a href="#l1678"></a><span id="l1678">+          var sizeDelta = Math.abs(oldHeight - aNewPane.contentHeight);</span>
<a href="#l1679"></a><span id="l1679">+          this._animateRemainder = sizeDelta % this._animateIncrement;</span>
<a href="#l1680"></a><span id="l1680">+</span>
<a href="#l1681"></a><span id="l1681">+          this._setUpAnimationTimer(oldHeight);</span>
<a href="#l1682"></a><span id="l1682">+        ]]&gt;</span>
<a href="#l1683"></a><span id="l1683">+        &lt;/body&gt;</span>
<a href="#l1684"></a><span id="l1684">+      &lt;/method&gt;</span>
<a href="#l1685"></a><span id="l1685">+</span>
<a href="#l1686"></a><span id="l1686">+      &lt;property name=&quot;_sizeIncrement&quot;&gt;</span>
<a href="#l1687"></a><span id="l1687">+        &lt;getter&gt;</span>
<a href="#l1688"></a><span id="l1688">+        &lt;![CDATA[</span>
<a href="#l1689"></a><span id="l1689">+          var lastSelectedPane = document.getElementById(this.lastSelected);</span>
<a href="#l1690"></a><span id="l1690">+          var increment = this._animateIncrement * this._multiplier;</span>
<a href="#l1691"></a><span id="l1691">+          var newHeight = this._currentHeight + increment;</span>
<a href="#l1692"></a><span id="l1692">+          if ((this._multiplier &gt; 0 &amp;&amp; this._currentHeight &gt;= lastSelectedPane.contentHeight) ||</span>
<a href="#l1693"></a><span id="l1693">+              (this._multiplier &lt; 0 &amp;&amp; this._currentHeight &lt;= lastSelectedPane.contentHeight))</span>
<a href="#l1694"></a><span id="l1694">+            return 0;</span>
<a href="#l1695"></a><span id="l1695">+</span>
<a href="#l1696"></a><span id="l1696">+          if ((this._multiplier &gt; 0 &amp;&amp; newHeight &gt; lastSelectedPane.contentHeight) ||</span>
<a href="#l1697"></a><span id="l1697">+              (this._multiplier &lt; 0 &amp;&amp; newHeight &lt; lastSelectedPane.contentHeight))</span>
<a href="#l1698"></a><span id="l1698">+            increment = this._animateRemainder * this._multiplier;</span>
<a href="#l1699"></a><span id="l1699">+          return increment;</span>
<a href="#l1700"></a><span id="l1700">+        ]]&gt;</span>
<a href="#l1701"></a><span id="l1701">+        &lt;/getter&gt;</span>
<a href="#l1702"></a><span id="l1702">+      &lt;/property&gt;</span>
<a href="#l1703"></a><span id="l1703">+</span>
<a href="#l1704"></a><span id="l1704">+      &lt;method name=&quot;notify&quot;&gt;</span>
<a href="#l1705"></a><span id="l1705">+        &lt;parameter name=&quot;aTimer&quot;/&gt;</span>
<a href="#l1706"></a><span id="l1706">+        &lt;body&gt;</span>
<a href="#l1707"></a><span id="l1707">+        &lt;![CDATA[</span>
<a href="#l1708"></a><span id="l1708">+          if (!document)</span>
<a href="#l1709"></a><span id="l1709">+            aTimer.cancel();</span>
<a href="#l1710"></a><span id="l1710">+</span>
<a href="#l1711"></a><span id="l1711">+          if (aTimer == this._animateTimer) {</span>
<a href="#l1712"></a><span id="l1712">+            var increment = this._sizeIncrement;</span>
<a href="#l1713"></a><span id="l1713">+            if (increment != 0) {</span>
<a href="#l1714"></a><span id="l1714">+              window.innerHeight += increment;</span>
<a href="#l1715"></a><span id="l1715">+              this._currentHeight += increment;</span>
<a href="#l1716"></a><span id="l1716">+            } else {</span>
<a href="#l1717"></a><span id="l1717">+              aTimer.cancel();</span>
<a href="#l1718"></a><span id="l1718">+              this._setUpFadeTimer();</span>
<a href="#l1719"></a><span id="l1719">+            }</span>
<a href="#l1720"></a><span id="l1720">+          } else if (aTimer == this._fadeTimer) {</span>
<a href="#l1721"></a><span id="l1721">+            var elt = document.getElementById(this.lastSelected);</span>
<a href="#l1722"></a><span id="l1722">+            var newOpacity = parseFloat(window.getComputedStyle(elt, &quot;&quot;).opacity) + this._fadeIncrement;</span>
<a href="#l1723"></a><span id="l1723">+            if (newOpacity &lt; 1.0)</span>
<a href="#l1724"></a><span id="l1724">+              elt.style.opacity = newOpacity;</span>
<a href="#l1725"></a><span id="l1725">+            else {</span>
<a href="#l1726"></a><span id="l1726">+              aTimer.cancel();</span>
<a href="#l1727"></a><span id="l1727">+              elt.style.opacity = 1.0;</span>
<a href="#l1728"></a><span id="l1728">+            }</span>
<a href="#l1729"></a><span id="l1729">+          }</span>
<a href="#l1730"></a><span id="l1730">+        ]]&gt;</span>
<a href="#l1731"></a><span id="l1731">+        &lt;/body&gt;</span>
<a href="#l1732"></a><span id="l1732">+      &lt;/method&gt;</span>
<a href="#l1733"></a><span id="l1733">+</span>
<a href="#l1734"></a><span id="l1734">+      &lt;method name=&quot;_setUpAnimationTimer&quot;&gt;</span>
<a href="#l1735"></a><span id="l1735">+        &lt;parameter name=&quot;aStartHeight&quot;/&gt;</span>
<a href="#l1736"></a><span id="l1736">+        &lt;body&gt;</span>
<a href="#l1737"></a><span id="l1737">+        &lt;![CDATA[</span>
<a href="#l1738"></a><span id="l1738">+          if (!this._animateTimer)</span>
<a href="#l1739"></a><span id="l1739">+            this._animateTimer = Components.classes[&quot;@mozilla.org/timer;1&quot;]</span>
<a href="#l1740"></a><span id="l1740">+                                           .createInstance(Components.interfaces.nsITimer);</span>
<a href="#l1741"></a><span id="l1741">+          else</span>
<a href="#l1742"></a><span id="l1742">+            this._animateTimer.cancel();</span>
<a href="#l1743"></a><span id="l1743">+          this._currentHeight = aStartHeight;</span>
<a href="#l1744"></a><span id="l1744">+</span>
<a href="#l1745"></a><span id="l1745">+          this._animateTimer.initWithCallback(this, this._animateDelay,</span>
<a href="#l1746"></a><span id="l1746">+                                              Components.interfaces.nsITimer.TYPE_REPEATING_SLACK);</span>
<a href="#l1747"></a><span id="l1747">+        ]]&gt;</span>
<a href="#l1748"></a><span id="l1748">+        &lt;/body&gt;</span>
<a href="#l1749"></a><span id="l1749">+      &lt;/method&gt;</span>
<a href="#l1750"></a><span id="l1750">+</span>
<a href="#l1751"></a><span id="l1751">+      &lt;method name=&quot;_setUpFadeTimer&quot;&gt;</span>
<a href="#l1752"></a><span id="l1752">+        &lt;body&gt;</span>
<a href="#l1753"></a><span id="l1753">+        &lt;![CDATA[</span>
<a href="#l1754"></a><span id="l1754">+          if (!this._fadeTimer)</span>
<a href="#l1755"></a><span id="l1755">+            this._fadeTimer = Components.classes[&quot;@mozilla.org/timer;1&quot;]</span>
<a href="#l1756"></a><span id="l1756">+                                        .createInstance(Components.interfaces.nsITimer);</span>
<a href="#l1757"></a><span id="l1757">+          else</span>
<a href="#l1758"></a><span id="l1758">+            this._fadeTimer.cancel();</span>
<a href="#l1759"></a><span id="l1759">+</span>
<a href="#l1760"></a><span id="l1760">+          this._fadeTimer.initWithCallback(this, this._fadeDelay,</span>
<a href="#l1761"></a><span id="l1761">+                                           Components.interfaces.nsITimer.TYPE_REPEATING_SLACK);</span>
<a href="#l1762"></a><span id="l1762">+        ]]&gt;</span>
<a href="#l1763"></a><span id="l1763">+        &lt;/body&gt;</span>
<a href="#l1764"></a><span id="l1764">+      &lt;/method&gt;</span>
<a href="#l1765"></a><span id="l1765">+</span>
<a href="#l1766"></a><span id="l1766">+      &lt;field name=&quot;_animateTimer&quot;&gt;null&lt;/field&gt;</span>
<a href="#l1767"></a><span id="l1767">+      &lt;field name=&quot;_fadeTimer&quot;&gt;null&lt;/field&gt;</span>
<a href="#l1768"></a><span id="l1768">+      &lt;field name=&quot;_animateDelay&quot;&gt;15&lt;/field&gt;</span>
<a href="#l1769"></a><span id="l1769">+      &lt;field name=&quot;_animateIncrement&quot;&gt;40&lt;/field&gt;</span>
<a href="#l1770"></a><span id="l1770">+      &lt;field name=&quot;_fadeDelay&quot;&gt;5&lt;/field&gt;</span>
<a href="#l1771"></a><span id="l1771">+      &lt;field name=&quot;_fadeIncrement&quot;&gt;0.40&lt;/field&gt;</span>
<a href="#l1772"></a><span id="l1772">+      &lt;field name=&quot;_animateRemainder&quot;&gt;0&lt;/field&gt;</span>
<a href="#l1773"></a><span id="l1773">+      &lt;field name=&quot;_currentHeight&quot;&gt;0&lt;/field&gt;</span>
<a href="#l1774"></a><span id="l1774">+      &lt;field name=&quot;_multiplier&quot;&gt;0&lt;/field&gt;</span>
<a href="#l1775"></a><span id="l1775">+</span>
<a href="#l1776"></a><span id="l1776">+      &lt;method name=&quot;addPane&quot;&gt;</span>
<a href="#l1777"></a><span id="l1777">+        &lt;parameter name=&quot;aPaneElement&quot;/&gt;</span>
<a href="#l1778"></a><span id="l1778">+        &lt;body&gt;</span>
<a href="#l1779"></a><span id="l1779">+        &lt;![CDATA[</span>
<a href="#l1780"></a><span id="l1780">+          this.appendChild(aPaneElement);</span>
<a href="#l1781"></a><span id="l1781">+</span>
<a href="#l1782"></a><span id="l1782">+          // Set up pane button</span>
<a href="#l1783"></a><span id="l1783">+          this._makePaneButton(aPaneElement);</span>
<a href="#l1784"></a><span id="l1784">+        ]]&gt;</span>
<a href="#l1785"></a><span id="l1785">+        &lt;/body&gt;</span>
<a href="#l1786"></a><span id="l1786">+      &lt;/method&gt;</span>
<a href="#l1787"></a><span id="l1787">+</span>
<a href="#l1788"></a><span id="l1788">+      &lt;method name=&quot;openSubDialog&quot;&gt;</span>
<a href="#l1789"></a><span id="l1789">+        &lt;parameter name=&quot;aURL&quot;/&gt;</span>
<a href="#l1790"></a><span id="l1790">+        &lt;parameter name=&quot;aFeatures&quot;/&gt;</span>
<a href="#l1791"></a><span id="l1791">+        &lt;parameter name=&quot;aParams&quot;/&gt;</span>
<a href="#l1792"></a><span id="l1792">+        &lt;body&gt;</span>
<a href="#l1793"></a><span id="l1793">+          return openDialog(aURL, &quot;&quot;, &quot;modal,centerscreen,resizable=no&quot; + (aFeatures != &quot;&quot; ? (&quot;,&quot; + aFeatures) : &quot;&quot;), aParams);</span>
<a href="#l1794"></a><span id="l1794">+        &lt;/body&gt;</span>
<a href="#l1795"></a><span id="l1795">+      &lt;/method&gt;</span>
<a href="#l1796"></a><span id="l1796">+</span>
<a href="#l1797"></a><span id="l1797">+      &lt;method name=&quot;openWindow&quot;&gt;</span>
<a href="#l1798"></a><span id="l1798">+        &lt;parameter name=&quot;aWindowType&quot;/&gt;</span>
<a href="#l1799"></a><span id="l1799">+        &lt;parameter name=&quot;aURL&quot;/&gt;</span>
<a href="#l1800"></a><span id="l1800">+        &lt;parameter name=&quot;aFeatures&quot;/&gt;</span>
<a href="#l1801"></a><span id="l1801">+        &lt;parameter name=&quot;aParams&quot;/&gt;</span>
<a href="#l1802"></a><span id="l1802">+        &lt;body&gt;</span>
<a href="#l1803"></a><span id="l1803">+        &lt;![CDATA[</span>
<a href="#l1804"></a><span id="l1804">+          var wm = Components.classes[&quot;@mozilla.org/appshell/window-mediator;1&quot;]</span>
<a href="#l1805"></a><span id="l1805">+                             .getService(Components.interfaces.nsIWindowMediator);</span>
<a href="#l1806"></a><span id="l1806">+          var win = aWindowType ? wm.getMostRecentWindow(aWindowType) : null;</span>
<a href="#l1807"></a><span id="l1807">+          if (win) {</span>
<a href="#l1808"></a><span id="l1808">+            if (&quot;initWithParams&quot; in win)</span>
<a href="#l1809"></a><span id="l1809">+              win.initWithParams(aParams);</span>
<a href="#l1810"></a><span id="l1810">+            win.focus();</span>
<a href="#l1811"></a><span id="l1811">+          } else {</span>
<a href="#l1812"></a><span id="l1812">+            var features = &quot;resizable,dialog=no,centerscreen&quot; + (aFeatures != &quot;&quot; ? (&quot;,&quot; + aFeatures) : &quot;&quot;);</span>
<a href="#l1813"></a><span id="l1813">+            var parentWindow = (this.instantApply || !window.opener || window.opener.closed) ? window : window.opener;</span>
<a href="#l1814"></a><span id="l1814">+            win = parentWindow.openDialog(aURL, &quot;_blank&quot;, features, aParams);</span>
<a href="#l1815"></a><span id="l1815">+          }</span>
<a href="#l1816"></a><span id="l1816">+          return win;</span>
<a href="#l1817"></a><span id="l1817">+        ]]&gt;</span>
<a href="#l1818"></a><span id="l1818">+        &lt;/body&gt;</span>
<a href="#l1819"></a><span id="l1819">+      &lt;/method&gt;</span>
<a href="#l1820"></a><span id="l1820">+    &lt;/implementation&gt;</span>
<a href="#l1821"></a><span id="l1821">+    &lt;handlers&gt;</span>
<a href="#l1822"></a><span id="l1822">+      &lt;handler event=&quot;dialogaccept&quot;&gt;</span>
<a href="#l1823"></a><span id="l1823">+      &lt;![CDATA[</span>
<a href="#l1824"></a><span id="l1824">+        if (!this._fireEvent(&quot;beforeaccept&quot;, this)) {</span>
<a href="#l1825"></a><span id="l1825">+          return false;</span>
<a href="#l1826"></a><span id="l1826">+        }</span>
<a href="#l1827"></a><span id="l1827">+</span>
<a href="#l1828"></a><span id="l1828">+        var secMan = Components.classes[&quot;@mozilla.org/scriptsecuritymanager;1&quot;]</span>
<a href="#l1829"></a><span id="l1829">+                    .getService(Components.interfaces.nsIScriptSecurityManager);</span>
<a href="#l1830"></a><span id="l1830">+        if (this.type == &quot;child&quot; &amp;&amp; window.opener &amp;&amp;</span>
<a href="#l1831"></a><span id="l1831">+            secMan.isSystemPrincipal(window.opener.document.nodePrincipal)) {</span>
<a href="#l1832"></a><span id="l1832">+          var pdocEl = window.opener.document.documentElement;</span>
<a href="#l1833"></a><span id="l1833">+          if (pdocEl.instantApply) {</span>
<a href="#l1834"></a><span id="l1834">+            let panes = this.preferencePanes;</span>
<a href="#l1835"></a><span id="l1835">+            for (let i = 0; i &lt; panes.length; ++i)</span>
<a href="#l1836"></a><span id="l1836">+              panes[i].writePreferences(true);</span>
<a href="#l1837"></a><span id="l1837">+          } else {</span>
<a href="#l1838"></a><span id="l1838">+            // Clone all the preferences elements from the child document and</span>
<a href="#l1839"></a><span id="l1839">+            // insert them into the pane collection of the parent.</span>
<a href="#l1840"></a><span id="l1840">+            var pdoc = window.opener.document;</span>
<a href="#l1841"></a><span id="l1841">+            if (pdoc.documentElement.localName == &quot;prefwindow&quot;) {</span>
<a href="#l1842"></a><span id="l1842">+              var currentPane = pdoc.documentElement.currentPane;</span>
<a href="#l1843"></a><span id="l1843">+              var id = window.location.href + &quot;#childprefs&quot;;</span>
<a href="#l1844"></a><span id="l1844">+              var childPrefs = pdoc.getElementById(id);</span>
<a href="#l1845"></a><span id="l1845">+              if (!childPrefs) {</span>
<a href="#l1846"></a><span id="l1846">+                childPrefs = pdoc.createElement(&quot;preferences&quot;);</span>
<a href="#l1847"></a><span id="l1847">+                currentPane.appendChild(childPrefs);</span>
<a href="#l1848"></a><span id="l1848">+                childPrefs.id = id;</span>
<a href="#l1849"></a><span id="l1849">+              }</span>
<a href="#l1850"></a><span id="l1850">+              let panes = this.preferencePanes;</span>
<a href="#l1851"></a><span id="l1851">+              for (let i = 0; i &lt; panes.length; ++i) {</span>
<a href="#l1852"></a><span id="l1852">+                var preferences = panes[i].preferences;</span>
<a href="#l1853"></a><span id="l1853">+                for (var j = 0; j &lt; preferences.length; ++j) {</span>
<a href="#l1854"></a><span id="l1854">+                  // Try to find a preference element for the same preference.</span>
<a href="#l1855"></a><span id="l1855">+                  var preference = null;</span>
<a href="#l1856"></a><span id="l1856">+                  var parentPreferences = pdoc.getElementsByTagName(&quot;preferences&quot;);</span>
<a href="#l1857"></a><span id="l1857">+                  for (var k = 0; (k &lt; parentPreferences.length &amp;&amp; !preference); ++k) {</span>
<a href="#l1858"></a><span id="l1858">+                    var parentPrefs = parentPreferences[k]</span>
<a href="#l1859"></a><span id="l1859">+                                         .getElementsByAttribute(&quot;name&quot;, preferences[j].name);</span>
<a href="#l1860"></a><span id="l1860">+                    for (var l = 0; (l &lt; parentPrefs.length &amp;&amp; !preference); ++l) {</span>
<a href="#l1861"></a><span id="l1861">+                      if (parentPrefs[l].localName == &quot;preference&quot;)</span>
<a href="#l1862"></a><span id="l1862">+                        preference = parentPrefs[l];</span>
<a href="#l1863"></a><span id="l1863">+                    }</span>
<a href="#l1864"></a><span id="l1864">+                  }</span>
<a href="#l1865"></a><span id="l1865">+                  if (!preference) {</span>
<a href="#l1866"></a><span id="l1866">+                    // No matching preference in the parent window.</span>
<a href="#l1867"></a><span id="l1867">+                    preference = pdoc.createElement(&quot;preference&quot;);</span>
<a href="#l1868"></a><span id="l1868">+                    childPrefs.appendChild(preference);</span>
<a href="#l1869"></a><span id="l1869">+                    preference.name     = preferences[j].name;</span>
<a href="#l1870"></a><span id="l1870">+                    preference.type     = preferences[j].type;</span>
<a href="#l1871"></a><span id="l1871">+                    preference.inverted = preferences[j].inverted;</span>
<a href="#l1872"></a><span id="l1872">+                    preference.readonly = preferences[j].readonly;</span>
<a href="#l1873"></a><span id="l1873">+                    preference.disabled = preferences[j].disabled;</span>
<a href="#l1874"></a><span id="l1874">+                  }</span>
<a href="#l1875"></a><span id="l1875">+                  preference.value = preferences[j].value;</span>
<a href="#l1876"></a><span id="l1876">+                }</span>
<a href="#l1877"></a><span id="l1877">+              }</span>
<a href="#l1878"></a><span id="l1878">+            }</span>
<a href="#l1879"></a><span id="l1879">+          }</span>
<a href="#l1880"></a><span id="l1880">+        } else {</span>
<a href="#l1881"></a><span id="l1881">+          let panes = this.preferencePanes;</span>
<a href="#l1882"></a><span id="l1882">+          for (var i = 0; i &lt; panes.length; ++i)</span>
<a href="#l1883"></a><span id="l1883">+            panes[i].writePreferences(false);</span>
<a href="#l1884"></a><span id="l1884">+</span>
<a href="#l1885"></a><span id="l1885">+          let psvc = Components.classes[&quot;@mozilla.org/preferences-service;1&quot;]</span>
<a href="#l1886"></a><span id="l1886">+                               .getService(Components.interfaces.nsIPrefService);</span>
<a href="#l1887"></a><span id="l1887">+          psvc.savePrefFile(null);</span>
<a href="#l1888"></a><span id="l1888">+        }</span>
<a href="#l1889"></a><span id="l1889">+</span>
<a href="#l1890"></a><span id="l1890">+        return true;</span>
<a href="#l1891"></a><span id="l1891">+      ]]&gt;</span>
<a href="#l1892"></a><span id="l1892">+      &lt;/handler&gt;</span>
<a href="#l1893"></a><span id="l1893">+      &lt;handler event=&quot;command&quot;&gt;</span>
<a href="#l1894"></a><span id="l1894">+        if (event.originalTarget.hasAttribute(&quot;pane&quot;)) {</span>
<a href="#l1895"></a><span id="l1895">+          var pane = document.getElementById(event.originalTarget.getAttribute(&quot;pane&quot;));</span>
<a href="#l1896"></a><span id="l1896">+          this.showPane(pane);</span>
<a href="#l1897"></a><span id="l1897">+        }</span>
<a href="#l1898"></a><span id="l1898">+      &lt;/handler&gt;</span>
<a href="#l1899"></a><span id="l1899">+</span>
<a href="#l1900"></a><span id="l1900">+      &lt;handler event=&quot;keypress&quot; key=&quot;&amp;windowClose.key;&quot; modifiers=&quot;accel&quot; phase=&quot;capturing&quot;&gt;</span>
<a href="#l1901"></a><span id="l1901">+      &lt;![CDATA[</span>
<a href="#l1902"></a><span id="l1902">+        if (this.instantApply)</span>
<a href="#l1903"></a><span id="l1903">+          window.close();</span>
<a href="#l1904"></a><span id="l1904">+        event.stopPropagation();</span>
<a href="#l1905"></a><span id="l1905">+        event.preventDefault();</span>
<a href="#l1906"></a><span id="l1906">+      ]]&gt;</span>
<a href="#l1907"></a><span id="l1907">+      &lt;/handler&gt;</span>
<a href="#l1908"></a><span id="l1908">+</span>
<a href="#l1909"></a><span id="l1909">+      &lt;handler event=&quot;keypress&quot;</span>
<a href="#l1910"></a><span id="l1910">+#ifdef XP_MACOSX</span>
<a href="#l1911"></a><span id="l1911">+               key=&quot;&amp;openHelpMac.commandkey;&quot; modifiers=&quot;accel&quot;</span>
<a href="#l1912"></a><span id="l1912">+#else</span>
<a href="#l1913"></a><span id="l1913">+               keycode=&quot;&amp;openHelp.commandkey;&quot;</span>
<a href="#l1914"></a><span id="l1914">+#endif</span>
<a href="#l1915"></a><span id="l1915">+               phase=&quot;capturing&quot;&gt;</span>
<a href="#l1916"></a><span id="l1916">+      &lt;![CDATA[</span>
<a href="#l1917"></a><span id="l1917">+        var helpButton = this.getButton(&quot;help&quot;);</span>
<a href="#l1918"></a><span id="l1918">+        if (helpButton.disabled || helpButton.hidden)</span>
<a href="#l1919"></a><span id="l1919">+          return;</span>
<a href="#l1920"></a><span id="l1920">+        this._fireEvent(&quot;dialoghelp&quot;, this);</span>
<a href="#l1921"></a><span id="l1921">+        event.stopPropagation();</span>
<a href="#l1922"></a><span id="l1922">+        event.preventDefault();</span>
<a href="#l1923"></a><span id="l1923">+      ]]&gt;</span>
<a href="#l1924"></a><span id="l1924">+      &lt;/handler&gt;</span>
<a href="#l1925"></a><span id="l1925">+    &lt;/handlers&gt;</span>
<a href="#l1926"></a><span id="l1926">+  &lt;/binding&gt;</span>
<a href="#l1927"></a><span id="l1927">+</span>
<a href="#l1928"></a><span id="l1928">+  &lt;binding id=&quot;prefpane&quot;&gt;</span>
<a href="#l1929"></a><span id="l1929">+    &lt;resources&gt;</span>
<a href="#l1930"></a><span id="l1930">+      &lt;stylesheet src=&quot;chrome://global/skin/preferences.css&quot;/&gt;</span>
<a href="#l1931"></a><span id="l1931">+    &lt;/resources&gt;</span>
<a href="#l1932"></a><span id="l1932">+    &lt;content&gt;</span>
<a href="#l1933"></a><span id="l1933">+      &lt;xul:vbox class=&quot;content-box&quot; xbl:inherits=&quot;flex&quot;&gt;</span>
<a href="#l1934"></a><span id="l1934">+        &lt;children/&gt;</span>
<a href="#l1935"></a><span id="l1935">+      &lt;/xul:vbox&gt;</span>
<a href="#l1936"></a><span id="l1936">+    &lt;/content&gt;</span>
<a href="#l1937"></a><span id="l1937">+    &lt;implementation&gt;</span>
<a href="#l1938"></a><span id="l1938">+      &lt;method name=&quot;writePreferences&quot;&gt;</span>
<a href="#l1939"></a><span id="l1939">+        &lt;parameter name=&quot;aFlushToDisk&quot;/&gt;</span>
<a href="#l1940"></a><span id="l1940">+        &lt;body&gt;</span>
<a href="#l1941"></a><span id="l1941">+        &lt;![CDATA[</span>
<a href="#l1942"></a><span id="l1942">+          // Write all values to preferences.</span>
<a href="#l1943"></a><span id="l1943">+          if (this._deferredValueUpdateElements.size) {</span>
<a href="#l1944"></a><span id="l1944">+            this._finalizeDeferredElements();</span>
<a href="#l1945"></a><span id="l1945">+          }</span>
<a href="#l1946"></a><span id="l1946">+</span>
<a href="#l1947"></a><span id="l1947">+          var preferences = this.preferences;</span>
<a href="#l1948"></a><span id="l1948">+          for (var i = 0; i &lt; preferences.length; ++i) {</span>
<a href="#l1949"></a><span id="l1949">+            var preference = preferences[i];</span>
<a href="#l1950"></a><span id="l1950">+            preference.batching = true;</span>
<a href="#l1951"></a><span id="l1951">+            preference.valueFromPreferences = preference.value;</span>
<a href="#l1952"></a><span id="l1952">+            preference.batching = false;</span>
<a href="#l1953"></a><span id="l1953">+          }</span>
<a href="#l1954"></a><span id="l1954">+          if (aFlushToDisk) {</span>
<a href="#l1955"></a><span id="l1955">+            var psvc = Components.classes[&quot;@mozilla.org/preferences-service;1&quot;]</span>
<a href="#l1956"></a><span id="l1956">+                                 .getService(Components.interfaces.nsIPrefService);</span>
<a href="#l1957"></a><span id="l1957">+            psvc.savePrefFile(null);</span>
<a href="#l1958"></a><span id="l1958">+          }</span>
<a href="#l1959"></a><span id="l1959">+        ]]&gt;</span>
<a href="#l1960"></a><span id="l1960">+        &lt;/body&gt;</span>
<a href="#l1961"></a><span id="l1961">+      &lt;/method&gt;</span>
<a href="#l1962"></a><span id="l1962">+</span>
<a href="#l1963"></a><span id="l1963">+      &lt;property name=&quot;src&quot;</span>
<a href="#l1964"></a><span id="l1964">+                onget=&quot;return this.getAttribute('src');&quot;</span>
<a href="#l1965"></a><span id="l1965">+                onset=&quot;this.setAttribute('src', val); return val;&quot;/&gt;</span>
<a href="#l1966"></a><span id="l1966">+      &lt;property name=&quot;selected&quot;</span>
<a href="#l1967"></a><span id="l1967">+                onget=&quot;return this.getAttribute('selected') == 'true';&quot;</span>
<a href="#l1968"></a><span id="l1968">+                onset=&quot;this.setAttribute('selected', val); return val;&quot;/&gt;</span>
<a href="#l1969"></a><span id="l1969">+      &lt;property name=&quot;image&quot;</span>
<a href="#l1970"></a><span id="l1970">+                onget=&quot;return this.getAttribute('image');&quot;</span>
<a href="#l1971"></a><span id="l1971">+                onset=&quot;this.setAttribute('image', val); return val;&quot;/&gt;</span>
<a href="#l1972"></a><span id="l1972">+      &lt;property name=&quot;label&quot;</span>
<a href="#l1973"></a><span id="l1973">+                onget=&quot;return this.getAttribute('label');&quot;</span>
<a href="#l1974"></a><span id="l1974">+                onset=&quot;this.setAttribute('label', val); return val;&quot;/&gt;</span>
<a href="#l1975"></a><span id="l1975">+</span>
<a href="#l1976"></a><span id="l1976">+      &lt;property name=&quot;preferenceElements&quot;</span>
<a href="#l1977"></a><span id="l1977">+                onget=&quot;return this.getElementsByAttribute('preference', '*');&quot;/&gt;</span>
<a href="#l1978"></a><span id="l1978">+      &lt;property name=&quot;preferences&quot;</span>
<a href="#l1979"></a><span id="l1979">+                onget=&quot;return this.getElementsByTagName('preference');&quot;/&gt;</span>
<a href="#l1980"></a><span id="l1980">+</span>
<a href="#l1981"></a><span id="l1981">+      &lt;property name=&quot;helpTopic&quot;&gt;</span>
<a href="#l1982"></a><span id="l1982">+        &lt;getter&gt;</span>
<a href="#l1983"></a><span id="l1983">+        &lt;![CDATA[</span>
<a href="#l1984"></a><span id="l1984">+          // if there are tabs, and the selected tab provides a helpTopic, return that</span>
<a href="#l1985"></a><span id="l1985">+          var box = this.getElementsByTagName(&quot;tabbox&quot;);</span>
<a href="#l1986"></a><span id="l1986">+          if (box[0]) {</span>
<a href="#l1987"></a><span id="l1987">+            var tab = box[0].selectedTab;</span>
<a href="#l1988"></a><span id="l1988">+            if (tab &amp;&amp; tab.hasAttribute(&quot;helpTopic&quot;))</span>
<a href="#l1989"></a><span id="l1989">+              return tab.getAttribute(&quot;helpTopic&quot;);</span>
<a href="#l1990"></a><span id="l1990">+          }</span>
<a href="#l1991"></a><span id="l1991">+</span>
<a href="#l1992"></a><span id="l1992">+          // otherwise, return the helpTopic of the current panel</span>
<a href="#l1993"></a><span id="l1993">+          return this.getAttribute(&quot;helpTopic&quot;);</span>
<a href="#l1994"></a><span id="l1994">+        ]]&gt;</span>
<a href="#l1995"></a><span id="l1995">+        &lt;/getter&gt;</span>
<a href="#l1996"></a><span id="l1996">+      &lt;/property&gt;</span>
<a href="#l1997"></a><span id="l1997">+</span>
<a href="#l1998"></a><span id="l1998">+      &lt;field name=&quot;_loaded&quot;&gt;false&lt;/field&gt;</span>
<a href="#l1999"></a><span id="l1999">+      &lt;property name=&quot;loaded&quot;</span>
<a href="#l2000"></a><span id="l2000">+                onget=&quot;return !this.src ? true : this._loaded;&quot;</span>
<a href="#l2001"></a><span id="l2001">+                onset=&quot;this._loaded = val; return val;&quot;/&gt;</span>
<a href="#l2002"></a><span id="l2002">+</span>
<a href="#l2003"></a><span id="l2003">+      &lt;method name=&quot;preferenceForElement&quot;&gt;</span>
<a href="#l2004"></a><span id="l2004">+        &lt;parameter name=&quot;aElement&quot;/&gt;</span>
<a href="#l2005"></a><span id="l2005">+        &lt;body&gt;</span>
<a href="#l2006"></a><span id="l2006">+          return document.getElementById(aElement.getAttribute(&quot;preference&quot;));</span>
<a href="#l2007"></a><span id="l2007">+        &lt;/body&gt;</span>
<a href="#l2008"></a><span id="l2008">+      &lt;/method&gt;</span>
<a href="#l2009"></a><span id="l2009">+</span>
<a href="#l2010"></a><span id="l2010">+      &lt;method name=&quot;getPreferenceElement&quot;&gt;</span>
<a href="#l2011"></a><span id="l2011">+        &lt;parameter name=&quot;aStartElement&quot;/&gt;</span>
<a href="#l2012"></a><span id="l2012">+        &lt;body&gt;</span>
<a href="#l2013"></a><span id="l2013">+        &lt;![CDATA[</span>
<a href="#l2014"></a><span id="l2014">+          var temp = aStartElement;</span>
<a href="#l2015"></a><span id="l2015">+          while (temp &amp;&amp; temp.nodeType == Node.ELEMENT_NODE &amp;&amp;</span>
<a href="#l2016"></a><span id="l2016">+                 !temp.hasAttribute(&quot;preference&quot;))</span>
<a href="#l2017"></a><span id="l2017">+            temp = temp.parentNode;</span>
<a href="#l2018"></a><span id="l2018">+          return temp &amp;&amp; temp.nodeType == Node.ELEMENT_NODE ?</span>
<a href="#l2019"></a><span id="l2019">+                 temp : aStartElement;</span>
<a href="#l2020"></a><span id="l2020">+        ]]&gt;</span>
<a href="#l2021"></a><span id="l2021">+        &lt;/body&gt;</span>
<a href="#l2022"></a><span id="l2022">+      &lt;/method&gt;</span>
<a href="#l2023"></a><span id="l2023">+</span>
<a href="#l2024"></a><span id="l2024">+      &lt;property name=&quot;DeferredTask&quot; readonly=&quot;true&quot;&gt;</span>
<a href="#l2025"></a><span id="l2025">+        &lt;getter&gt;&lt;![CDATA[</span>
<a href="#l2026"></a><span id="l2026">+          let module = {};</span>
<a href="#l2027"></a><span id="l2027">+          Components.utils.import(&quot;resource://gre/modules/DeferredTask.jsm&quot;, module);</span>
<a href="#l2028"></a><span id="l2028">+          Object.defineProperty(this, &quot;DeferredTask&quot;, {</span>
<a href="#l2029"></a><span id="l2029">+            configurable: true,</span>
<a href="#l2030"></a><span id="l2030">+            enumerable: true,</span>
<a href="#l2031"></a><span id="l2031">+            writable: true,</span>
<a href="#l2032"></a><span id="l2032">+            value: module.DeferredTask</span>
<a href="#l2033"></a><span id="l2033">+          });</span>
<a href="#l2034"></a><span id="l2034">+          return module.DeferredTask;</span>
<a href="#l2035"></a><span id="l2035">+        ]]&gt;&lt;/getter&gt;</span>
<a href="#l2036"></a><span id="l2036">+      &lt;/property&gt;</span>
<a href="#l2037"></a><span id="l2037">+      &lt;method name=&quot;_deferredValueUpdate&quot;&gt;</span>
<a href="#l2038"></a><span id="l2038">+        &lt;parameter name=&quot;aElement&quot;/&gt;</span>
<a href="#l2039"></a><span id="l2039">+        &lt;body&gt;</span>
<a href="#l2040"></a><span id="l2040">+        &lt;![CDATA[</span>
<a href="#l2041"></a><span id="l2041">+          delete aElement._deferredValueUpdateTask;</span>
<a href="#l2042"></a><span id="l2042">+          let preference = document.getElementById(aElement.getAttribute(&quot;preference&quot;));</span>
<a href="#l2043"></a><span id="l2043">+          let prefVal = preference.getElementValue(aElement);</span>
<a href="#l2044"></a><span id="l2044">+          preference.value = prefVal;</span>
<a href="#l2045"></a><span id="l2045">+          this._deferredValueUpdateElements.delete(aElement);</span>
<a href="#l2046"></a><span id="l2046">+        ]]&gt;</span>
<a href="#l2047"></a><span id="l2047">+        &lt;/body&gt;</span>
<a href="#l2048"></a><span id="l2048">+      &lt;/method&gt;</span>
<a href="#l2049"></a><span id="l2049">+      &lt;field name=&quot;_deferredValueUpdateElements&quot;&gt;</span>
<a href="#l2050"></a><span id="l2050">+        new Set();</span>
<a href="#l2051"></a><span id="l2051">+      &lt;/field&gt;</span>
<a href="#l2052"></a><span id="l2052">+      &lt;method name=&quot;_finalizeDeferredElements&quot;&gt;</span>
<a href="#l2053"></a><span id="l2053">+        &lt;body&gt;</span>
<a href="#l2054"></a><span id="l2054">+        &lt;![CDATA[</span>
<a href="#l2055"></a><span id="l2055">+          for (let el of this._deferredValueUpdateElements) {</span>
<a href="#l2056"></a><span id="l2056">+            if (el._deferredValueUpdateTask) {</span>
<a href="#l2057"></a><span id="l2057">+              el._deferredValueUpdateTask.finalize();</span>
<a href="#l2058"></a><span id="l2058">+            }</span>
<a href="#l2059"></a><span id="l2059">+          }</span>
<a href="#l2060"></a><span id="l2060">+        ]]&gt;</span>
<a href="#l2061"></a><span id="l2061">+        &lt;/body&gt;</span>
<a href="#l2062"></a><span id="l2062">+      &lt;/method&gt;</span>
<a href="#l2063"></a><span id="l2063">+      &lt;method name=&quot;userChangedValue&quot;&gt;</span>
<a href="#l2064"></a><span id="l2064">+        &lt;parameter name=&quot;aElement&quot;/&gt;</span>
<a href="#l2065"></a><span id="l2065">+        &lt;body&gt;</span>
<a href="#l2066"></a><span id="l2066">+        &lt;![CDATA[</span>
<a href="#l2067"></a><span id="l2067">+          let element = this.getPreferenceElement(aElement);</span>
<a href="#l2068"></a><span id="l2068">+          if (element.hasAttribute(&quot;preference&quot;)) {</span>
<a href="#l2069"></a><span id="l2069">+            if (element.getAttribute(&quot;delayprefsave&quot;) != &quot;true&quot;) {</span>
<a href="#l2070"></a><span id="l2070">+              var preference = document.getElementById(element.getAttribute(&quot;preference&quot;));</span>
<a href="#l2071"></a><span id="l2071">+              var prefVal = preference.getElementValue(element);</span>
<a href="#l2072"></a><span id="l2072">+              preference.value = prefVal;</span>
<a href="#l2073"></a><span id="l2073">+            } else {</span>
<a href="#l2074"></a><span id="l2074">+              if (!element._deferredValueUpdateTask) {</span>
<a href="#l2075"></a><span id="l2075">+                element._deferredValueUpdateTask = new this.DeferredTask(this._deferredValueUpdate.bind(this, element), 1000);</span>
<a href="#l2076"></a><span id="l2076">+                this._deferredValueUpdateElements.add(element);</span>
<a href="#l2077"></a><span id="l2077">+              } else {</span>
<a href="#l2078"></a><span id="l2078">+                // Each time the preference is changed, restart the delay.</span>
<a href="#l2079"></a><span id="l2079">+                element._deferredValueUpdateTask.disarm();</span>
<a href="#l2080"></a><span id="l2080">+              }</span>
<a href="#l2081"></a><span id="l2081">+              element._deferredValueUpdateTask.arm();</span>
<a href="#l2082"></a><span id="l2082">+            }</span>
<a href="#l2083"></a><span id="l2083">+          }</span>
<a href="#l2084"></a><span id="l2084">+        ]]&gt;</span>
<a href="#l2085"></a><span id="l2085">+        &lt;/body&gt;</span>
<a href="#l2086"></a><span id="l2086">+      &lt;/method&gt;</span>
<a href="#l2087"></a><span id="l2087">+</span>
<a href="#l2088"></a><span id="l2088">+      &lt;property name=&quot;contentHeight&quot;&gt;</span>
<a href="#l2089"></a><span id="l2089">+        &lt;getter&gt;</span>
<a href="#l2090"></a><span id="l2090">+          var targetHeight = parseInt(window.getComputedStyle(this._content, &quot;&quot;).height);</span>
<a href="#l2091"></a><span id="l2091">+          targetHeight += parseInt(window.getComputedStyle(this._content, &quot;&quot;).marginTop);</span>
<a href="#l2092"></a><span id="l2092">+          targetHeight += parseInt(window.getComputedStyle(this._content, &quot;&quot;).marginBottom);</span>
<a href="#l2093"></a><span id="l2093">+          return targetHeight;</span>
<a href="#l2094"></a><span id="l2094">+        &lt;/getter&gt;</span>
<a href="#l2095"></a><span id="l2095">+      &lt;/property&gt;</span>
<a href="#l2096"></a><span id="l2096">+      &lt;field name=&quot;_content&quot;&gt;</span>
<a href="#l2097"></a><span id="l2097">+        document.getAnonymousElementByAttribute(this, &quot;class&quot;, &quot;content-box&quot;);</span>
<a href="#l2098"></a><span id="l2098">+      &lt;/field&gt;</span>
<a href="#l2099"></a><span id="l2099">+    &lt;/implementation&gt;</span>
<a href="#l2100"></a><span id="l2100">+    &lt;handlers&gt;</span>
<a href="#l2101"></a><span id="l2101">+      &lt;handler event=&quot;command&quot;&gt;</span>
<a href="#l2102"></a><span id="l2102">+        // This &quot;command&quot; event handler tracks changes made to preferences by</span>
<a href="#l2103"></a><span id="l2103">+        // the user in this window.</span>
<a href="#l2104"></a><span id="l2104">+        if (event.sourceEvent)</span>
<a href="#l2105"></a><span id="l2105">+          event = event.sourceEvent;</span>
<a href="#l2106"></a><span id="l2106">+        this.userChangedValue(event.target);</span>
<a href="#l2107"></a><span id="l2107">+      &lt;/handler&gt;</span>
<a href="#l2108"></a><span id="l2108">+      &lt;handler event=&quot;select&quot;&gt;</span>
<a href="#l2109"></a><span id="l2109">+        // This &quot;select&quot; event handler tracks changes made to colorpicker</span>
<a href="#l2110"></a><span id="l2110">+        // preferences by the user in this window.</span>
<a href="#l2111"></a><span id="l2111">+        if (event.target.localName == &quot;colorpicker&quot;)</span>
<a href="#l2112"></a><span id="l2112">+          this.userChangedValue(event.target);</span>
<a href="#l2113"></a><span id="l2113">+      &lt;/handler&gt;</span>
<a href="#l2114"></a><span id="l2114">+      &lt;handler event=&quot;change&quot;&gt;</span>
<a href="#l2115"></a><span id="l2115">+        // This &quot;change&quot; event handler tracks changes made to preferences by</span>
<a href="#l2116"></a><span id="l2116">+        // the user in this window.</span>
<a href="#l2117"></a><span id="l2117">+        this.userChangedValue(event.target);</span>
<a href="#l2118"></a><span id="l2118">+      &lt;/handler&gt;</span>
<a href="#l2119"></a><span id="l2119">+      &lt;handler event=&quot;input&quot;&gt;</span>
<a href="#l2120"></a><span id="l2120">+        // This &quot;input&quot; event handler tracks changes made to preferences by</span>
<a href="#l2121"></a><span id="l2121">+        // the user in this window.</span>
<a href="#l2122"></a><span id="l2122">+        this.userChangedValue(event.target);</span>
<a href="#l2123"></a><span id="l2123">+      &lt;/handler&gt;</span>
<a href="#l2124"></a><span id="l2124">+      &lt;handler event=&quot;paneload&quot;&gt;</span>
<a href="#l2125"></a><span id="l2125">+      &lt;![CDATA[</span>
<a href="#l2126"></a><span id="l2126">+        // Initialize all values from preferences.</span>
<a href="#l2127"></a><span id="l2127">+        var elements = this.preferenceElements;</span>
<a href="#l2128"></a><span id="l2128">+        for (var i = 0; i &lt; elements.length; ++i) {</span>
<a href="#l2129"></a><span id="l2129">+          try {</span>
<a href="#l2130"></a><span id="l2130">+            var preference = this.preferenceForElement(elements[i]);</span>
<a href="#l2131"></a><span id="l2131">+            preference.setElementValue(elements[i]);</span>
<a href="#l2132"></a><span id="l2132">+          } catch (e) {</span>
<a href="#l2133"></a><span id="l2133">+            dump(&quot;*** No preference found for &quot; + elements[i].getAttribute(&quot;preference&quot;) + &quot;\n&quot;);</span>
<a href="#l2134"></a><span id="l2134">+          }</span>
<a href="#l2135"></a><span id="l2135">+        }</span>
<a href="#l2136"></a><span id="l2136">+      ]]&gt;</span>
<a href="#l2137"></a><span id="l2137">+      &lt;/handler&gt;</span>
<a href="#l2138"></a><span id="l2138">+    &lt;/handlers&gt;</span>
<a href="#l2139"></a><span id="l2139">+  &lt;/binding&gt;</span>
<a href="#l2140"></a><span id="l2140">+</span>
<a href="#l2141"></a><span id="l2141">+  &lt;binding id=&quot;panebutton&quot; role=&quot;xul:listitem&quot;</span>
<a href="#l2142"></a><span id="l2142">+           extends=&quot;chrome://global/content/bindings/radio.xml#radio&quot;&gt;</span>
<a href="#l2143"></a><span id="l2143">+    &lt;resources&gt;</span>
<a href="#l2144"></a><span id="l2144">+      &lt;stylesheet src=&quot;chrome://global/skin/preferences.css&quot;/&gt;</span>
<a href="#l2145"></a><span id="l2145">+    &lt;/resources&gt;</span>
<a href="#l2146"></a><span id="l2146">+    &lt;content&gt;</span>
<a href="#l2147"></a><span id="l2147">+      &lt;xul:image class=&quot;paneButtonIcon&quot; xbl:inherits=&quot;src&quot;/&gt;</span>
<a href="#l2148"></a><span id="l2148">+      &lt;xul:label class=&quot;paneButtonLabel&quot; xbl:inherits=&quot;value=label&quot;/&gt;</span>
<a href="#l2149"></a><span id="l2149">+    &lt;/content&gt;</span>
<a href="#l2150"></a><span id="l2150">+  &lt;/binding&gt;</span>
<a href="#l2151"></a><span id="l2151">+</span>
<a href="#l2152"></a><span id="l2152">+&lt;/bindings&gt;</span>
<a href="#l2153"></a><span id="l2153">+</span>
<a href="#l2154"></a><span id="l2154">+# -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-</span>
<a href="#l2155"></a><span id="l2155">+# This Source Code Form is subject to the terms of the Mozilla Public</span>
<a href="#l2156"></a><span id="l2156">+# License, v. 2.0. If a copy of the MPL was not distributed with this</span>
<a href="#l2157"></a><span id="l2157">+# file, You can obtain one at http://mozilla.org/MPL/2.0/.</span>
<a href="#l2158"></a><span id="l2158">+</span>
<a href="#l2159"></a><span id="l2159">+#</span>
<a href="#l2160"></a><span id="l2160">+# This is PrefWindow 6. The Code Could Well Be Ready, Are You?</span>
<a href="#l2161"></a><span id="l2161">+#</span>
<a href="#l2162"></a><span id="l2162">+#    Historical References:</span>
<a href="#l2163"></a><span id="l2163">+#    PrefWindow V   (February 1, 2003)</span>
<a href="#l2164"></a><span id="l2164">+#    PrefWindow IV  (April 24, 2000)</span>
<a href="#l2165"></a><span id="l2165">+#    PrefWindow III (January 6, 2000)</span>
<a href="#l2166"></a><span id="l2166">+#    PrefWindow II  (???)</span>
<a href="#l2167"></a><span id="l2167">+#    PrefWindow I   (June 4, 1999)</span>
<a href="#l2168"></a><span id="l2168">+#</span>
<a href="#l2169"></a><span id="l2169">diff --git a/toolkit/mozapps/downloads/nsHelperAppDlg.js b/toolkit/mozapps/downloads/nsHelperAppDlg.js</span>
<a href="#l2170"></a><span id="l2170">--- a/toolkit/mozapps/downloads/nsHelperAppDlg.js</span>
<a href="#l2171"></a><span id="l2171">+++ b/toolkit/mozapps/downloads/nsHelperAppDlg.js</span>
<a href="#l2172"></a><span id="l2172">@@ -627,17 +627,17 @@ nsUnknownContentTypeDialog.prototype = {</span>
<a href="#l2173"></a><span id="l2173">       else</span>
<a href="#l2174"></a><span id="l2174">         typeString = mimeInfo.MIMEType;</span>
<a href="#l2175"></a><span id="l2175">     }</span>
<a href="#l2176"></a><span id="l2176">     // When the length is unknown, contentLength would be -1</span>
<a href="#l2177"></a><span id="l2177">     if (this.mLauncher.contentLength &gt;= 0) {</span>
<a href="#l2178"></a><span id="l2178">       let [size, unit] = DownloadUtils.</span>
<a href="#l2179"></a><span id="l2179">                          convertByteUnits(this.mLauncher.contentLength);</span>
<a href="#l2180"></a><span id="l2180">       type.value = this.dialogElement(&quot;strings&quot;)</span>
<a href="#l2181"></a><span id="l2181">-                       .getFormattedString(&quot;orderedFileSizeWithType&quot;, </span>
<a href="#l2182"></a><span id="l2182">+                       .getFormattedString(&quot;orderedFileSizeWithType&quot;,</span>
<a href="#l2183"></a><span id="l2183">                                            [typeString, size, unit]);</span>
<a href="#l2184"></a><span id="l2184">     }</span>
<a href="#l2185"></a><span id="l2185">     else {</span>
<a href="#l2186"></a><span id="l2186">       type.value = typeString;</span>
<a href="#l2187"></a><span id="l2187">     }</span>
<a href="#l2188"></a><span id="l2188">   },</span>
<a href="#l2189"></a><span id="l2189"> </span>
<a href="#l2190"></a><span id="l2190">   // Returns true if opening the default application makes sense.</span>
<a href="#l2191"></a><span id="l2191">@@ -801,17 +801,17 @@ nsUnknownContentTypeDialog.prototype = {</span>
<a href="#l2192"></a><span id="l2192">       switch (this.dialogElement(&quot;openHandler&quot;).selectedIndex) {</span>
<a href="#l2193"></a><span id="l2193">       case 0:</span>
<a href="#l2194"></a><span id="l2194">         // No app need be specified in this case.</span>
<a href="#l2195"></a><span id="l2195">         ok = true;</span>
<a href="#l2196"></a><span id="l2196">         break;</span>
<a href="#l2197"></a><span id="l2197">       case 1:</span>
<a href="#l2198"></a><span id="l2198">         // only enable the OK button if we have a default app to use or if</span>
<a href="#l2199"></a><span id="l2199">         // the user chose an app....</span>
<a href="#l2200"></a><span id="l2200">-        ok = this.chosenApp || /\S/.test(this.dialogElement(&quot;otherHandler&quot;).getAttribute(&quot;path&quot;)); </span>
<a href="#l2201"></a><span id="l2201">+        ok = this.chosenApp || /\S/.test(this.dialogElement(&quot;otherHandler&quot;).getAttribute(&quot;path&quot;));</span>
<a href="#l2202"></a><span id="l2202">         break;</span>
<a href="#l2203"></a><span id="l2203">       }</span>
<a href="#l2204"></a><span id="l2204">     }</span>
<a href="#l2205"></a><span id="l2205"> </span>
<a href="#l2206"></a><span id="l2206">     // Enable Ok button if ok to press.</span>
<a href="#l2207"></a><span id="l2207">     this.mDialog.document.documentElement.getButton(&quot;accept&quot;).disabled = !ok;</span>
<a href="#l2208"></a><span id="l2208">   },</span>
<a href="#l2209"></a><span id="l2209"> </span>
<a href="#l2210"></a><span id="l2210">@@ -1068,30 +1068,56 @@ nsUnknownContentTypeDialog.prototype = {</span>
<a href="#l2211"></a><span id="l2211">           params.handlerApp.executable &amp;&amp;</span>
<a href="#l2212"></a><span id="l2212">           params.handlerApp.executable.isFile()) {</span>
<a href="#l2213"></a><span id="l2213">         // Remember the file they chose to run.</span>
<a href="#l2214"></a><span id="l2214">         this.chosenApp = params.handlerApp;</span>
<a href="#l2215"></a><span id="l2215">       }</span>
<a href="#l2216"></a><span id="l2216">     }</span>
<a href="#l2217"></a><span id="l2217">     else {</span>
<a href="#l2218"></a><span id="l2218"> #if MOZ_WIDGET_GTK == 3</span>
<a href="#l2219"></a><span id="l2219">-      var nsIApplicationChooser = Components.interfaces.nsIApplicationChooser;</span>
<a href="#l2220"></a><span id="l2220">-      var appChooser = Components.classes[&quot;@mozilla.org/applicationchooser;1&quot;]</span>
<a href="#l2221"></a><span id="l2221">-                                 .createInstance(nsIApplicationChooser);</span>
<a href="#l2222"></a><span id="l2222">-      appChooser.init(this.mDialog, this.dialogElement(&quot;strings&quot;).getString(&quot;chooseAppFilePickerTitle&quot;));</span>
<a href="#l2223"></a><span id="l2223">-      var contentTypeDialogObj = this;</span>
<a href="#l2224"></a><span id="l2224">-      let appChooserCallback = function appChooserCallback_done(aResult) {</span>
<a href="#l2225"></a><span id="l2225">-        if (aResult) {</span>
<a href="#l2226"></a><span id="l2226">-           contentTypeDialogObj.chosenApp = aResult.QueryInterface(Components.interfaces.nsILocalHandlerApp);</span>
<a href="#l2227"></a><span id="l2227">+      // handle the KDE case which is implemented in the filepicker</span>
<a href="#l2228"></a><span id="l2228">+      // therefore falling back to Gtk2 like behaviour if KDE is running</span>
<a href="#l2229"></a><span id="l2229">+      // FIXME this should be better handled in the nsIApplicationChooser interface</span>
<a href="#l2230"></a><span id="l2230">+      var env = Components.classes[&quot;@mozilla.org/process/environment;1&quot;]</span>
<a href="#l2231"></a><span id="l2231">+                          .getService(Components.interfaces.nsIEnvironment);</span>
<a href="#l2232"></a><span id="l2232">+      if (env.get('KDE_FULL_SESSION') == &quot;true&quot;)</span>
<a href="#l2233"></a><span id="l2233">+      {</span>
<a href="#l2234"></a><span id="l2234">+        var nsIFilePicker = Components.interfaces.nsIFilePicker;</span>
<a href="#l2235"></a><span id="l2235">+        var fp = Components.classes[&quot;@mozilla.org/filepicker;1&quot;]</span>
<a href="#l2236"></a><span id="l2236">+                           .createInstance(nsIFilePicker);</span>
<a href="#l2237"></a><span id="l2237">+        fp.init(this.mDialog,</span>
<a href="#l2238"></a><span id="l2238">+                this.dialogElement(&quot;strings&quot;).getString(&quot;chooseAppFilePickerTitle&quot;),</span>
<a href="#l2239"></a><span id="l2239">+                nsIFilePicker.modeOpen);</span>
<a href="#l2240"></a><span id="l2240">+</span>
<a href="#l2241"></a><span id="l2241">+        fp.appendFilters(nsIFilePicker.filterApps);</span>
<a href="#l2242"></a><span id="l2242">+</span>
<a href="#l2243"></a><span id="l2243">+        if (fp.show() == nsIFilePicker.returnOK &amp;&amp; fp.file) {</span>
<a href="#l2244"></a><span id="l2244">+          // Remember the file they chose to run.</span>
<a href="#l2245"></a><span id="l2245">+          var localHandlerApp =</span>
<a href="#l2246"></a><span id="l2246">+            Components.classes[&quot;@mozilla.org/uriloader/local-handler-app;1&quot;].</span>
<a href="#l2247"></a><span id="l2247">+                       createInstance(Components.interfaces.nsILocalHandlerApp);</span>
<a href="#l2248"></a><span id="l2248">+          localHandlerApp.executable = fp.file;</span>
<a href="#l2249"></a><span id="l2249">+          this.chosenApp = localHandlerApp;</span>
<a href="#l2250"></a><span id="l2250">         }</span>
<a href="#l2251"></a><span id="l2251">-        contentTypeDialogObj.finishChooseApp();</span>
<a href="#l2252"></a><span id="l2252">-      };</span>
<a href="#l2253"></a><span id="l2253">-      appChooser.open(this.mLauncher.MIMEInfo.MIMEType, appChooserCallback);</span>
<a href="#l2254"></a><span id="l2254">-      // The finishChooseApp is called from appChooserCallback</span>
<a href="#l2255"></a><span id="l2255">-      return;</span>
<a href="#l2256"></a><span id="l2256">+      } else {</span>
<a href="#l2257"></a><span id="l2257">+        var nsIApplicationChooser = Components.interfaces.nsIApplicationChooser;</span>
<a href="#l2258"></a><span id="l2258">+        var appChooser = Components.classes[&quot;@mozilla.org/applicationchooser;1&quot;]</span>
<a href="#l2259"></a><span id="l2259">+                                   .createInstance(nsIApplicationChooser);</span>
<a href="#l2260"></a><span id="l2260">+        appChooser.init(this.mDialog, this.dialogElement(&quot;strings&quot;).getString(&quot;chooseAppFilePickerTitle&quot;));</span>
<a href="#l2261"></a><span id="l2261">+        var contentTypeDialogObj = this;</span>
<a href="#l2262"></a><span id="l2262">+        let appChooserCallback = function appChooserCallback_done(aResult) {</span>
<a href="#l2263"></a><span id="l2263">+          if (aResult) {</span>
<a href="#l2264"></a><span id="l2264">+             contentTypeDialogObj.chosenApp = aResult.QueryInterface(Components.interfaces.nsILocalHandlerApp);</span>
<a href="#l2265"></a><span id="l2265">+          }</span>
<a href="#l2266"></a><span id="l2266">+          contentTypeDialogObj.finishChooseApp();</span>
<a href="#l2267"></a><span id="l2267">+        };</span>
<a href="#l2268"></a><span id="l2268">+        appChooser.open(this.mLauncher.MIMEInfo.MIMEType, appChooserCallback);</span>
<a href="#l2269"></a><span id="l2269">+        // The finishChooseApp is called from appChooserCallback</span>
<a href="#l2270"></a><span id="l2270">+        return;</span>
<a href="#l2271"></a><span id="l2271">+      }</span>
<a href="#l2272"></a><span id="l2272"> #else</span>
<a href="#l2273"></a><span id="l2273">       var nsIFilePicker = Components.interfaces.nsIFilePicker;</span>
<a href="#l2274"></a><span id="l2274">       var fp = Components.classes[&quot;@mozilla.org/filepicker;1&quot;]</span>
<a href="#l2275"></a><span id="l2275">                          .createInstance(nsIFilePicker);</span>
<a href="#l2276"></a><span id="l2276">       fp.init(this.mDialog,</span>
<a href="#l2277"></a><span id="l2277">               this.dialogElement(&quot;strings&quot;).getString(&quot;chooseAppFilePickerTitle&quot;),</span>
<a href="#l2278"></a><span id="l2278">               nsIFilePicker.modeOpen);</span>
<a href="#l2279"></a><span id="l2279"> </span>
<a href="#l2280"></a><span id="l2280">diff --git a/toolkit/system/unixproxy/nsUnixSystemProxySettings.cpp b/toolkit/system/unixproxy/nsUnixSystemProxySettings.cpp</span>
<a href="#l2281"></a><span id="l2281">--- a/toolkit/system/unixproxy/nsUnixSystemProxySettings.cpp</span>
<a href="#l2282"></a><span id="l2282">+++ b/toolkit/system/unixproxy/nsUnixSystemProxySettings.cpp</span>
<a href="#l2283"></a><span id="l2283">@@ -15,16 +15,17 @@</span>
<a href="#l2284"></a><span id="l2284"> #include &quot;nsPrintfCString.h&quot;</span>
<a href="#l2285"></a><span id="l2285"> #include &quot;nsNetCID.h&quot;</span>
<a href="#l2286"></a><span id="l2286"> #include &quot;nsNetUtil.h&quot;</span>
<a href="#l2287"></a><span id="l2287"> #include &quot;nsISupportsPrimitives.h&quot;</span>
<a href="#l2288"></a><span id="l2288"> #include &quot;nsIGSettingsService.h&quot;</span>
<a href="#l2289"></a><span id="l2289"> #include &quot;nsInterfaceHashtable.h&quot;</span>
<a href="#l2290"></a><span id="l2290"> #include &quot;mozilla/Attributes.h&quot;</span>
<a href="#l2291"></a><span id="l2291"> #include &quot;nsIURI.h&quot;</span>
<a href="#l2292"></a><span id="l2292">+#include &quot;nsKDEUtils.h&quot;</span>
<a href="#l2293"></a><span id="l2293"> </span>
<a href="#l2294"></a><span id="l2294"> class nsUnixSystemProxySettings final : public nsISystemProxySettings {</span>
<a href="#l2295"></a><span id="l2295"> public:</span>
<a href="#l2296"></a><span id="l2296">   NS_DECL_ISUPPORTS</span>
<a href="#l2297"></a><span id="l2297">   NS_DECL_NSISYSTEMPROXYSETTINGS</span>
<a href="#l2298"></a><span id="l2298"> </span>
<a href="#l2299"></a><span id="l2299">   nsUnixSystemProxySettings()</span>
<a href="#l2300"></a><span id="l2300">     : mSchemeProxySettings(4)</span>
<a href="#l2301"></a><span id="l2301">@@ -39,16 +40,17 @@ private:</span>
<a href="#l2302"></a><span id="l2302">   nsCOMPtr&lt;nsIGSettingsService&gt; mGSettings;</span>
<a href="#l2303"></a><span id="l2303">   nsCOMPtr&lt;nsIGSettingsCollection&gt; mProxySettings;</span>
<a href="#l2304"></a><span id="l2304">   nsInterfaceHashtable&lt;nsCStringHashKey, nsIGSettingsCollection&gt; mSchemeProxySettings;</span>
<a href="#l2305"></a><span id="l2305">   bool IsProxyMode(const char* aMode);</span>
<a href="#l2306"></a><span id="l2306">   nsresult SetProxyResultFromGConf(const char* aKeyBase, const char* aType, nsACString&amp; aResult);</span>
<a href="#l2307"></a><span id="l2307">   nsresult GetProxyFromGConf(const nsACString&amp; aScheme, const nsACString&amp; aHost, int32_t aPort, nsACString&amp; aResult);</span>
<a href="#l2308"></a><span id="l2308">   nsresult GetProxyFromGSettings(const nsACString&amp; aScheme, const nsACString&amp; aHost, int32_t aPort, nsACString&amp; aResult);</span>
<a href="#l2309"></a><span id="l2309">   nsresult SetProxyResultFromGSettings(const char* aKeyBase, const char* aType, nsACString&amp; aResult);</span>
<a href="#l2310"></a><span id="l2310">+  nsresult GetProxyFromKDE(const nsACString&amp; aScheme, const nsACString&amp; aHost, PRInt32 aPort, nsACString&amp; aResult);</span>
<a href="#l2311"></a><span id="l2311"> };</span>
<a href="#l2312"></a><span id="l2312"> </span>
<a href="#l2313"></a><span id="l2313"> NS_IMPL_ISUPPORTS(nsUnixSystemProxySettings, nsISystemProxySettings)</span>
<a href="#l2314"></a><span id="l2314"> </span>
<a href="#l2315"></a><span id="l2315"> NS_IMETHODIMP</span>
<a href="#l2316"></a><span id="l2316"> nsUnixSystemProxySettings::GetMainThreadOnly(bool *aMainThreadOnly)</span>
<a href="#l2317"></a><span id="l2317"> {</span>
<a href="#l2318"></a><span id="l2318">   // dbus prevents us from being threadsafe, but this routine should not block anyhow</span>
<a href="#l2319"></a><span id="l2319">@@ -505,16 +507,19 @@ nsUnixSystemProxySettings::GetProxyFromG</span>
<a href="#l2320"></a><span id="l2320"> </span>
<a href="#l2321"></a><span id="l2321"> nsresult</span>
<a href="#l2322"></a><span id="l2322"> nsUnixSystemProxySettings::GetProxyForURI(const nsACString &amp; aSpec,</span>
<a href="#l2323"></a><span id="l2323">                                           const nsACString &amp; aScheme,</span>
<a href="#l2324"></a><span id="l2324">                                           const nsACString &amp; aHost,</span>
<a href="#l2325"></a><span id="l2325">                                           const int32_t      aPort,</span>
<a href="#l2326"></a><span id="l2326">                                           nsACString &amp; aResult)</span>
<a href="#l2327"></a><span id="l2327"> {</span>
<a href="#l2328"></a><span id="l2328">+  if (nsKDEUtils::kdeSupport())</span>
<a href="#l2329"></a><span id="l2329">+    return GetProxyFromKDE(aScheme, aHost, aPort, aResult);</span>
<a href="#l2330"></a><span id="l2330">+</span>
<a href="#l2331"></a><span id="l2331">   if (mProxySettings) {</span>
<a href="#l2332"></a><span id="l2332">     nsresult rv = GetProxyFromGSettings(aScheme, aHost, aPort, aResult);</span>
<a href="#l2333"></a><span id="l2333">     if (NS_SUCCEEDED(rv))</span>
<a href="#l2334"></a><span id="l2334">       return rv;</span>
<a href="#l2335"></a><span id="l2335">   }</span>
<a href="#l2336"></a><span id="l2336">   if (mGConf)</span>
<a href="#l2337"></a><span id="l2337">     return GetProxyFromGConf(aScheme, aHost, aPort, aResult);</span>
<a href="#l2338"></a><span id="l2338"> </span>
<a href="#l2339"></a><span id="l2339">@@ -540,8 +545,34 @@ static const mozilla::Module::ContractID</span>
<a href="#l2340"></a><span id="l2340"> </span>
<a href="#l2341"></a><span id="l2341"> static const mozilla::Module kUnixProxyModule = {</span>
<a href="#l2342"></a><span id="l2342">   mozilla::Module::kVersion,</span>
<a href="#l2343"></a><span id="l2343">   kUnixProxyCIDs,</span>
<a href="#l2344"></a><span id="l2344">   kUnixProxyContracts</span>
<a href="#l2345"></a><span id="l2345"> };</span>
<a href="#l2346"></a><span id="l2346"> </span>
<a href="#l2347"></a><span id="l2347"> NSMODULE_DEFN(nsUnixProxyModule) = &amp;kUnixProxyModule;</span>
<a href="#l2348"></a><span id="l2348">+</span>
<a href="#l2349"></a><span id="l2349">+nsresult</span>
<a href="#l2350"></a><span id="l2350">+nsUnixSystemProxySettings::GetProxyFromKDE(const nsACString&amp; aScheme,</span>
<a href="#l2351"></a><span id="l2351">+                                           const nsACString&amp; aHost,</span>
<a href="#l2352"></a><span id="l2352">+                                           PRInt32 aPort,</span>
<a href="#l2353"></a><span id="l2353">+                                           nsACString&amp; aResult)</span>
<a href="#l2354"></a><span id="l2354">+{</span>
<a href="#l2355"></a><span id="l2355">+  nsAutoCString url;</span>
<a href="#l2356"></a><span id="l2356">+  url = aScheme;</span>
<a href="#l2357"></a><span id="l2357">+  url += &quot;://&quot;;</span>
<a href="#l2358"></a><span id="l2358">+  url += aHost;</span>
<a href="#l2359"></a><span id="l2359">+  if( aPort &gt;= 0 )</span>
<a href="#l2360"></a><span id="l2360">+  {</span>
<a href="#l2361"></a><span id="l2361">+    url += &quot;:&quot;;</span>
<a href="#l2362"></a><span id="l2362">+    url += nsPrintfCString(&quot;%d&quot;, aPort);</span>
<a href="#l2363"></a><span id="l2363">+  }</span>
<a href="#l2364"></a><span id="l2364">+  nsTArray&lt;nsCString&gt; command;</span>
<a href="#l2365"></a><span id="l2365">+  command.AppendElement( NS_LITERAL_CSTRING( &quot;GETPROXY&quot; ));</span>
<a href="#l2366"></a><span id="l2366">+  command.AppendElement( url );</span>
<a href="#l2367"></a><span id="l2367">+  nsTArray&lt;nsCString&gt; result;</span>
<a href="#l2368"></a><span id="l2368">+  if( !nsKDEUtils::command( command, &amp;result ) || result.Length() != 1 )</span>
<a href="#l2369"></a><span id="l2369">+    return NS_ERROR_FAILURE;</span>
<a href="#l2370"></a><span id="l2370">+  aResult = result[0];</span>
<a href="#l2371"></a><span id="l2371">+  return NS_OK;</span>
<a href="#l2372"></a><span id="l2372">+}</span>
<a href="#l2373"></a><span id="l2373">+</span>
<a href="#l2374"></a><span id="l2374">diff --git a/toolkit/xre/moz.build b/toolkit/xre/moz.build</span>
<a href="#l2375"></a><span id="l2375">--- a/toolkit/xre/moz.build</span>
<a href="#l2376"></a><span id="l2376">+++ b/toolkit/xre/moz.build</span>
<a href="#l2377"></a><span id="l2377">@@ -53,17 +53,19 @@ elif CONFIG['MOZ_WIDGET_TOOLKIT'] == 'co</span>
<a href="#l2378"></a><span id="l2378">         '../components/printingui/mac',</span>
<a href="#l2379"></a><span id="l2379">     ]</span>
<a href="#l2380"></a><span id="l2380"> elif CONFIG['MOZ_WIDGET_TOOLKIT'] == 'uikit':</span>
<a href="#l2381"></a><span id="l2381">     UNIFIED_SOURCES += [</span>
<a href="#l2382"></a><span id="l2382">         'nsNativeAppSupportDefault.cpp',</span>
<a href="#l2383"></a><span id="l2383">         'UIKitDirProvider.mm',</span>
<a href="#l2384"></a><span id="l2384">     ]</span>
<a href="#l2385"></a><span id="l2385"> elif 'gtk' in CONFIG['MOZ_WIDGET_TOOLKIT']:</span>
<a href="#l2386"></a><span id="l2386">+    EXPORTS += ['nsKDEUtils.h']</span>
<a href="#l2387"></a><span id="l2387">     UNIFIED_SOURCES += [</span>
<a href="#l2388"></a><span id="l2388">+        'nsKDEUtils.cpp',</span>
<a href="#l2389"></a><span id="l2389">         'nsNativeAppSupportUnix.cpp',</span>
<a href="#l2390"></a><span id="l2390">     ]</span>
<a href="#l2391"></a><span id="l2391"> else:</span>
<a href="#l2392"></a><span id="l2392">     UNIFIED_SOURCES += [</span>
<a href="#l2393"></a><span id="l2393">         'nsNativeAppSupportDefault.cpp',</span>
<a href="#l2394"></a><span id="l2394">     ]</span>
<a href="#l2395"></a><span id="l2395"> </span>
<a href="#l2396"></a><span id="l2396"> if CONFIG['MOZ_WIDGET_TOOLKIT'] == 'gtk3':</span>
<a href="#l2397"></a><span id="l2397">diff --git a/toolkit/xre/nsKDEUtils.cpp b/toolkit/xre/nsKDEUtils.cpp</span>
<a href="#l2398"></a><span id="l2398">new file mode 100644</span>
<a href="#l2399"></a><span id="l2399">--- /dev/null</span>
<a href="#l2400"></a><span id="l2400">+++ b/toolkit/xre/nsKDEUtils.cpp</span>
<a href="#l2401"></a><span id="l2401">@@ -0,0 +1,344 @@</span>
<a href="#l2402"></a><span id="l2402">+/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */</span>
<a href="#l2403"></a><span id="l2403">+/* This Source Code Form is subject to the terms of the Mozilla Public</span>
<a href="#l2404"></a><span id="l2404">+ * License, v. 2.0. If a copy of the MPL was not distributed with this</span>
<a href="#l2405"></a><span id="l2405">+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */</span>
<a href="#l2406"></a><span id="l2406">+</span>
<a href="#l2407"></a><span id="l2407">+#include &quot;nsKDEUtils.h&quot;</span>
<a href="#l2408"></a><span id="l2408">+#include &quot;nsIWidget.h&quot;</span>
<a href="#l2409"></a><span id="l2409">+#include &quot;nsISupportsPrimitives.h&quot;</span>
<a href="#l2410"></a><span id="l2410">+#include &quot;nsIMutableArray.h&quot;</span>
<a href="#l2411"></a><span id="l2411">+#include &quot;nsComponentManagerUtils.h&quot;</span>
<a href="#l2412"></a><span id="l2412">+#include &quot;nsArrayUtils.h&quot;</span>
<a href="#l2413"></a><span id="l2413">+</span>
<a href="#l2414"></a><span id="l2414">+#include &lt;gtk/gtk.h&gt;</span>
<a href="#l2415"></a><span id="l2415">+</span>
<a href="#l2416"></a><span id="l2416">+#include &lt;limits.h&gt;</span>
<a href="#l2417"></a><span id="l2417">+#include &lt;stdio.h&gt;</span>
<a href="#l2418"></a><span id="l2418">+#include &lt;sys/wait.h&gt;</span>
<a href="#l2419"></a><span id="l2419">+#include &lt;sys/resource.h&gt;</span>
<a href="#l2420"></a><span id="l2420">+#include &lt;unistd.h&gt;</span>
<a href="#l2421"></a><span id="l2421">+#include &lt;X11/Xlib.h&gt;</span>
<a href="#l2422"></a><span id="l2422">+// copied from X11/X.h as a hack since for an unknown</span>
<a href="#l2423"></a><span id="l2423">+// reason it's not picked up from X11/X.h</span>
<a href="#l2424"></a><span id="l2424">+#ifndef None</span>
<a href="#l2425"></a><span id="l2425">+#define None                 0L /* universal null resource or null atom */</span>
<a href="#l2426"></a><span id="l2426">+#endif</span>
<a href="#l2427"></a><span id="l2427">+</span>
<a href="#l2428"></a><span id="l2428">+//#define DEBUG_KDE</span>
<a href="#l2429"></a><span id="l2429">+#ifdef DEBUG_KDE</span>
<a href="#l2430"></a><span id="l2430">+#define KMOZILLAHELPER &quot;kmozillahelper&quot;</span>
<a href="#l2431"></a><span id="l2431">+#else</span>
<a href="#l2432"></a><span id="l2432">+// not need for lib64, it's a binary</span>
<a href="#l2433"></a><span id="l2433">+#define KMOZILLAHELPER &quot;/usr/lib/mozilla/kmozillahelper&quot;</span>
<a href="#l2434"></a><span id="l2434">+#endif</span>
<a href="#l2435"></a><span id="l2435">+</span>
<a href="#l2436"></a><span id="l2436">+#define KMOZILLAHELPER_VERSION 6</span>
<a href="#l2437"></a><span id="l2437">+#define MAKE_STR2( n ) #n</span>
<a href="#l2438"></a><span id="l2438">+#define MAKE_STR( n ) MAKE_STR2( n )</span>
<a href="#l2439"></a><span id="l2439">+</span>
<a href="#l2440"></a><span id="l2440">+static bool getKdeSession()</span>
<a href="#l2441"></a><span id="l2441">+    {</span>
<a href="#l2442"></a><span id="l2442">+    Display* dpy = XOpenDisplay( NULL );</span>
<a href="#l2443"></a><span id="l2443">+    if( dpy == NULL )</span>
<a href="#l2444"></a><span id="l2444">+        return false;</span>
<a href="#l2445"></a><span id="l2445">+    Atom kde_full_session = XInternAtom( dpy, &quot;KDE_FULL_SESSION&quot;, True );</span>
<a href="#l2446"></a><span id="l2446">+    bool kde = false;</span>
<a href="#l2447"></a><span id="l2447">+    if( kde_full_session != None )</span>
<a href="#l2448"></a><span id="l2448">+        {</span>
<a href="#l2449"></a><span id="l2449">+        int cnt;</span>
<a href="#l2450"></a><span id="l2450">+        if( Atom* props = XListProperties( dpy, DefaultRootWindow( dpy ), &amp;cnt ))</span>
<a href="#l2451"></a><span id="l2451">+            {</span>
<a href="#l2452"></a><span id="l2452">+            for( int i = 0;</span>
<a href="#l2453"></a><span id="l2453">+                 i &lt; cnt;</span>
<a href="#l2454"></a><span id="l2454">+                 ++i )</span>
<a href="#l2455"></a><span id="l2455">+                {</span>
<a href="#l2456"></a><span id="l2456">+                if( props[ i ] == kde_full_session )</span>
<a href="#l2457"></a><span id="l2457">+                    {</span>
<a href="#l2458"></a><span id="l2458">+                    kde = true;</span>
<a href="#l2459"></a><span id="l2459">+#ifdef DEBUG_KDE</span>
<a href="#l2460"></a><span id="l2460">+                    fprintf( stderr, &quot;KDE SESSION %d\n&quot;, kde );</span>
<a href="#l2461"></a><span id="l2461">+#endif</span>
<a href="#l2462"></a><span id="l2462">+                    break;</span>
<a href="#l2463"></a><span id="l2463">+                    }</span>
<a href="#l2464"></a><span id="l2464">+                }</span>
<a href="#l2465"></a><span id="l2465">+            XFree( props );</span>
<a href="#l2466"></a><span id="l2466">+            }</span>
<a href="#l2467"></a><span id="l2467">+        }</span>
<a href="#l2468"></a><span id="l2468">+    XCloseDisplay( dpy );</span>
<a href="#l2469"></a><span id="l2469">+    return kde;</span>
<a href="#l2470"></a><span id="l2470">+    }</span>
<a href="#l2471"></a><span id="l2471">+</span>
<a href="#l2472"></a><span id="l2472">+static bool getKdeSupport()</span>
<a href="#l2473"></a><span id="l2473">+    {</span>
<a href="#l2474"></a><span id="l2474">+    nsTArray&lt;nsCString&gt; command;</span>
<a href="#l2475"></a><span id="l2475">+    command.AppendElement( NS_LITERAL_CSTRING( &quot;CHECK&quot; ));</span>
<a href="#l2476"></a><span id="l2476">+    command.AppendElement( NS_LITERAL_CSTRING( MAKE_STR( KMOZILLAHELPER_VERSION )));</span>
<a href="#l2477"></a><span id="l2477">+    bool kde = nsKDEUtils::command( command );</span>
<a href="#l2478"></a><span id="l2478">+#ifdef DEBUG_KDE</span>
<a href="#l2479"></a><span id="l2479">+    fprintf( stderr, &quot;KDE RUNNING %d\n&quot;, kde );</span>
<a href="#l2480"></a><span id="l2480">+#endif</span>
<a href="#l2481"></a><span id="l2481">+    return kde;</span>
<a href="#l2482"></a><span id="l2482">+    }</span>
<a href="#l2483"></a><span id="l2483">+</span>
<a href="#l2484"></a><span id="l2484">+nsKDEUtils::nsKDEUtils()</span>
<a href="#l2485"></a><span id="l2485">+    : commandFile( NULL )</span>
<a href="#l2486"></a><span id="l2486">+    , replyFile( NULL )</span>
<a href="#l2487"></a><span id="l2487">+    {</span>
<a href="#l2488"></a><span id="l2488">+    }</span>
<a href="#l2489"></a><span id="l2489">+</span>
<a href="#l2490"></a><span id="l2490">+nsKDEUtils::~nsKDEUtils()</span>
<a href="#l2491"></a><span id="l2491">+    {</span>
<a href="#l2492"></a><span id="l2492">+//    closeHelper(); not actually useful, exiting will close the fd too</span>
<a href="#l2493"></a><span id="l2493">+    }</span>
<a href="#l2494"></a><span id="l2494">+</span>
<a href="#l2495"></a><span id="l2495">+nsKDEUtils* nsKDEUtils::self()</span>
<a href="#l2496"></a><span id="l2496">+    {</span>
<a href="#l2497"></a><span id="l2497">+    static nsKDEUtils s;</span>
<a href="#l2498"></a><span id="l2498">+    return &amp;s;</span>
<a href="#l2499"></a><span id="l2499">+    }</span>
<a href="#l2500"></a><span id="l2500">+</span>
<a href="#l2501"></a><span id="l2501">+static bool helperRunning = false;</span>
<a href="#l2502"></a><span id="l2502">+static bool helperFailed = false;</span>
<a href="#l2503"></a><span id="l2503">+</span>
<a href="#l2504"></a><span id="l2504">+bool nsKDEUtils::kdeSession()</span>
<a href="#l2505"></a><span id="l2505">+    {</span>
<a href="#l2506"></a><span id="l2506">+    static bool session = getKdeSession();</span>
<a href="#l2507"></a><span id="l2507">+    return session;</span>
<a href="#l2508"></a><span id="l2508">+    }</span>
<a href="#l2509"></a><span id="l2509">+</span>
<a href="#l2510"></a><span id="l2510">+bool nsKDEUtils::kdeSupport()</span>
<a href="#l2511"></a><span id="l2511">+    {</span>
<a href="#l2512"></a><span id="l2512">+    static bool support = kdeSession() &amp;&amp; getKdeSupport();</span>
<a href="#l2513"></a><span id="l2513">+    return support &amp;&amp; helperRunning;</span>
<a href="#l2514"></a><span id="l2514">+    }</span>
<a href="#l2515"></a><span id="l2515">+</span>
<a href="#l2516"></a><span id="l2516">+struct nsKDECommandData</span>
<a href="#l2517"></a><span id="l2517">+    {</span>
<a href="#l2518"></a><span id="l2518">+    FILE* file;</span>
<a href="#l2519"></a><span id="l2519">+    nsTArray&lt;nsCString&gt;* output;</span>
<a href="#l2520"></a><span id="l2520">+    GMainLoop* loop;</span>
<a href="#l2521"></a><span id="l2521">+    bool success;</span>
<a href="#l2522"></a><span id="l2522">+    };</span>
<a href="#l2523"></a><span id="l2523">+</span>
<a href="#l2524"></a><span id="l2524">+static gboolean kdeReadFunc( GIOChannel*, GIOCondition, gpointer data )</span>
<a href="#l2525"></a><span id="l2525">+    {</span>
<a href="#l2526"></a><span id="l2526">+    nsKDECommandData* p = static_cast&lt; nsKDECommandData* &gt;( data );</span>
<a href="#l2527"></a><span id="l2527">+    char buf[ 8192 ]; // TODO big enough</span>
<a href="#l2528"></a><span id="l2528">+    bool command_done = false;</span>
<a href="#l2529"></a><span id="l2529">+    bool command_failed = false;</span>
<a href="#l2530"></a><span id="l2530">+    while( !command_done &amp;&amp; !command_failed &amp;&amp; fgets( buf, 8192, p-&gt;file ) != NULL )</span>
<a href="#l2531"></a><span id="l2531">+        { // TODO what if the kernel splits a line into two chunks?</span>
<a href="#l2532"></a><span id="l2532">+//#ifdef DEBUG_KDE</span>
<a href="#l2533"></a><span id="l2533">+//        fprintf( stderr, &quot;READ: %s %d\n&quot;, buf, feof( p-&gt;file ));</span>
<a href="#l2534"></a><span id="l2534">+//#endif</span>
<a href="#l2535"></a><span id="l2535">+        if( char* eol = strchr( buf, '\n' ))</span>
<a href="#l2536"></a><span id="l2536">+            *eol = '\0';</span>
<a href="#l2537"></a><span id="l2537">+        command_done = ( strcmp( buf, &quot;\\1&quot; ) == 0 );</span>
<a href="#l2538"></a><span id="l2538">+        command_failed = ( strcmp( buf, &quot;\\0&quot; ) == 0 );</span>
<a href="#l2539"></a><span id="l2539">+        nsAutoCString line( buf );</span>
<a href="#l2540"></a><span id="l2540">+        line.ReplaceSubstring( &quot;\\n&quot;, &quot;\n&quot; );</span>
<a href="#l2541"></a><span id="l2541">+        line.ReplaceSubstring( &quot;\\&quot; &quot;\\&quot;, &quot;\\&quot; ); //  \\ -&gt; \ , i.e. unescape</span>
<a href="#l2542"></a><span id="l2542">+        if( p-&gt;output &amp;&amp; !( command_done || command_failed ))</span>
<a href="#l2543"></a><span id="l2543">+            p-&gt;output-&gt;AppendElement( nsCString( buf )); // TODO utf8?</span>
<a href="#l2544"></a><span id="l2544">+        }</span>
<a href="#l2545"></a><span id="l2545">+    bool quit = false;</span>
<a href="#l2546"></a><span id="l2546">+    if( feof( p-&gt;file ) || command_failed )</span>
<a href="#l2547"></a><span id="l2547">+        {</span>
<a href="#l2548"></a><span id="l2548">+        quit = true;</span>
<a href="#l2549"></a><span id="l2549">+        p-&gt;success = false;</span>
<a href="#l2550"></a><span id="l2550">+        }</span>
<a href="#l2551"></a><span id="l2551">+    if( command_done )</span>
<a href="#l2552"></a><span id="l2552">+        { // reading one reply finished</span>
<a href="#l2553"></a><span id="l2553">+        quit = true;</span>
<a href="#l2554"></a><span id="l2554">+        p-&gt;success = true;</span>
<a href="#l2555"></a><span id="l2555">+        }</span>
<a href="#l2556"></a><span id="l2556">+    if( quit )</span>
<a href="#l2557"></a><span id="l2557">+        {</span>
<a href="#l2558"></a><span id="l2558">+        if( p-&gt;loop )</span>
<a href="#l2559"></a><span id="l2559">+            g_main_loop_quit( p-&gt;loop );</span>
<a href="#l2560"></a><span id="l2560">+        return FALSE;</span>
<a href="#l2561"></a><span id="l2561">+        }</span>
<a href="#l2562"></a><span id="l2562">+    return TRUE;</span>
<a href="#l2563"></a><span id="l2563">+    }</span>
<a href="#l2564"></a><span id="l2564">+</span>
<a href="#l2565"></a><span id="l2565">+bool nsKDEUtils::command( const nsTArray&lt;nsCString&gt;&amp; command, nsTArray&lt;nsCString&gt;* output )</span>
<a href="#l2566"></a><span id="l2566">+    {</span>
<a href="#l2567"></a><span id="l2567">+    return self()-&gt;internalCommand( command, NULL, false, output );</span>
<a href="#l2568"></a><span id="l2568">+    }</span>
<a href="#l2569"></a><span id="l2569">+</span>
<a href="#l2570"></a><span id="l2570">+bool nsKDEUtils::command( nsIArray* command, nsIArray** output)</span>
<a href="#l2571"></a><span id="l2571">+    {</span>
<a href="#l2572"></a><span id="l2572">+    nsTArray&lt;nsCString&gt; in;</span>
<a href="#l2573"></a><span id="l2573">+    PRUint32 length;</span>
<a href="#l2574"></a><span id="l2574">+    command-&gt;GetLength( &amp;length );</span>
<a href="#l2575"></a><span id="l2575">+    for ( PRUint32 i = 0; i &lt; length; i++ )</span>
<a href="#l2576"></a><span id="l2576">+        {</span>
<a href="#l2577"></a><span id="l2577">+        nsCOMPtr&lt;nsISupportsCString&gt; str = do_QueryElementAt( command, i );</span>
<a href="#l2578"></a><span id="l2578">+        if( str )</span>
<a href="#l2579"></a><span id="l2579">+            {</span>
<a href="#l2580"></a><span id="l2580">+            nsAutoCString s;</span>
<a href="#l2581"></a><span id="l2581">+            str-&gt;GetData( s );</span>
<a href="#l2582"></a><span id="l2582">+            in.AppendElement( s );</span>
<a href="#l2583"></a><span id="l2583">+            }</span>
<a href="#l2584"></a><span id="l2584">+        }</span>
<a href="#l2585"></a><span id="l2585">+</span>
<a href="#l2586"></a><span id="l2586">+    nsTArray&lt;nsCString&gt; out;</span>
<a href="#l2587"></a><span id="l2587">+    bool ret = self()-&gt;internalCommand( in, NULL, false, &amp;out );</span>
<a href="#l2588"></a><span id="l2588">+</span>
<a href="#l2589"></a><span id="l2589">+    if ( !output ) return ret;</span>
<a href="#l2590"></a><span id="l2590">+</span>
<a href="#l2591"></a><span id="l2591">+    nsCOMPtr&lt;nsIMutableArray&gt; result = do_CreateInstance( NS_ARRAY_CONTRACTID );</span>
<a href="#l2592"></a><span id="l2592">+    if ( !result ) return false;</span>
<a href="#l2593"></a><span id="l2593">+</span>
<a href="#l2594"></a><span id="l2594">+    for ( PRUint32 i = 0; i &lt; out.Length(); i++ )</span>
<a href="#l2595"></a><span id="l2595">+        {</span>
<a href="#l2596"></a><span id="l2596">+        nsCOMPtr&lt;nsISupportsCString&gt; rstr = do_CreateInstance( NS_SUPPORTS_CSTRING_CONTRACTID );</span>
<a href="#l2597"></a><span id="l2597">+        if ( !rstr ) return false;</span>
<a href="#l2598"></a><span id="l2598">+</span>
<a href="#l2599"></a><span id="l2599">+        rstr-&gt;SetData( out[i] );</span>
<a href="#l2600"></a><span id="l2600">+        result-&gt;AppendElement( rstr, false );</span>
<a href="#l2601"></a><span id="l2601">+        }</span>
<a href="#l2602"></a><span id="l2602">+</span>
<a href="#l2603"></a><span id="l2603">+    NS_ADDREF( *output = result);</span>
<a href="#l2604"></a><span id="l2604">+    return ret;</span>
<a href="#l2605"></a><span id="l2605">+    }</span>
<a href="#l2606"></a><span id="l2606">+</span>
<a href="#l2607"></a><span id="l2607">+</span>
<a href="#l2608"></a><span id="l2608">+bool nsKDEUtils::commandBlockUi( const nsTArray&lt;nsCString&gt;&amp; command, GtkWindow* parent, nsTArray&lt;nsCString&gt;* output )</span>
<a href="#l2609"></a><span id="l2609">+    {</span>
<a href="#l2610"></a><span id="l2610">+    return self()-&gt;internalCommand( command, parent, true, output );</span>
<a href="#l2611"></a><span id="l2611">+    }</span>
<a href="#l2612"></a><span id="l2612">+</span>
<a href="#l2613"></a><span id="l2613">+bool nsKDEUtils::internalCommand( const nsTArray&lt;nsCString&gt;&amp; command, GtkWindow* parent, bool blockUi,</span>
<a href="#l2614"></a><span id="l2614">+    nsTArray&lt;nsCString&gt;* output )</span>
<a href="#l2615"></a><span id="l2615">+    {</span>
<a href="#l2616"></a><span id="l2616">+    if( !startHelper())</span>
<a href="#l2617"></a><span id="l2617">+        return false;</span>
<a href="#l2618"></a><span id="l2618">+    feedCommand( command );</span>
<a href="#l2619"></a><span id="l2619">+    // do not store the data in 'this' but in extra structure, just in case there</span>
<a href="#l2620"></a><span id="l2620">+    // is reentrancy (can there be? the event loop is re-entered)</span>
<a href="#l2621"></a><span id="l2621">+    nsKDECommandData data;</span>
<a href="#l2622"></a><span id="l2622">+    data.file = replyFile;</span>
<a href="#l2623"></a><span id="l2623">+    data.output = output;</span>
<a href="#l2624"></a><span id="l2624">+    data.success = false;</span>
<a href="#l2625"></a><span id="l2625">+    if( blockUi )</span>
<a href="#l2626"></a><span id="l2626">+        {</span>
<a href="#l2627"></a><span id="l2627">+        data.loop = g_main_loop_new( NULL, FALSE );</span>
<a href="#l2628"></a><span id="l2628">+        GtkWidget* window = gtk_window_new( GTK_WINDOW_TOPLEVEL );</span>
<a href="#l2629"></a><span id="l2629">+        if( parent &amp;&amp; gtk_window_get_group(parent) )</span>
<a href="#l2630"></a><span id="l2630">+            gtk_window_group_add_window( gtk_window_get_group(parent), GTK_WINDOW( window ));</span>
<a href="#l2631"></a><span id="l2631">+        gtk_widget_realize( window );</span>
<a href="#l2632"></a><span id="l2632">+        gtk_widget_set_sensitive( window, TRUE );</span>
<a href="#l2633"></a><span id="l2633">+        gtk_grab_add( window );</span>
<a href="#l2634"></a><span id="l2634">+        GIOChannel* channel = g_io_channel_unix_new( fileno( data.file ));</span>
<a href="#l2635"></a><span id="l2635">+        g_io_add_watch( channel, static_cast&lt; GIOCondition &gt;( G_IO_IN | G_IO_ERR | G_IO_HUP ), kdeReadFunc, &amp;data );</span>
<a href="#l2636"></a><span id="l2636">+        g_io_channel_unref( channel );</span>
<a href="#l2637"></a><span id="l2637">+        g_main_loop_run( data.loop );</span>
<a href="#l2638"></a><span id="l2638">+        g_main_loop_unref( data.loop );</span>
<a href="#l2639"></a><span id="l2639">+        gtk_grab_remove( window );</span>
<a href="#l2640"></a><span id="l2640">+        gtk_widget_destroy( window );</span>
<a href="#l2641"></a><span id="l2641">+        }</span>
<a href="#l2642"></a><span id="l2642">+    else</span>
<a href="#l2643"></a><span id="l2643">+        {</span>
<a href="#l2644"></a><span id="l2644">+        data.loop = NULL;</span>
<a href="#l2645"></a><span id="l2645">+        while( kdeReadFunc( NULL, static_cast&lt; GIOCondition &gt;( 0 ), &amp;data ))</span>
<a href="#l2646"></a><span id="l2646">+            ;</span>
<a href="#l2647"></a><span id="l2647">+        }</span>
<a href="#l2648"></a><span id="l2648">+    return data.success;</span>
<a href="#l2649"></a><span id="l2649">+    }</span>
<a href="#l2650"></a><span id="l2650">+</span>
<a href="#l2651"></a><span id="l2651">+bool nsKDEUtils::startHelper()</span>
<a href="#l2652"></a><span id="l2652">+    {</span>
<a href="#l2653"></a><span id="l2653">+    if( helperRunning )</span>
<a href="#l2654"></a><span id="l2654">+        return true;</span>
<a href="#l2655"></a><span id="l2655">+    if( helperFailed )</span>
<a href="#l2656"></a><span id="l2656">+        return false;</span>
<a href="#l2657"></a><span id="l2657">+    helperFailed = true;</span>
<a href="#l2658"></a><span id="l2658">+    int fdcommand[ 2 ];</span>
<a href="#l2659"></a><span id="l2659">+    int fdreply[ 2 ];</span>
<a href="#l2660"></a><span id="l2660">+    if( pipe( fdcommand ) &lt; 0 )</span>
<a href="#l2661"></a><span id="l2661">+        return false;</span>
<a href="#l2662"></a><span id="l2662">+    if( pipe( fdreply ) &lt; 0 )</span>
<a href="#l2663"></a><span id="l2663">+        {</span>
<a href="#l2664"></a><span id="l2664">+        close( fdcommand[ 0 ] );</span>
<a href="#l2665"></a><span id="l2665">+        close( fdcommand[ 1 ] );</span>
<a href="#l2666"></a><span id="l2666">+        return false;</span>
<a href="#l2667"></a><span id="l2667">+        }</span>
<a href="#l2668"></a><span id="l2668">+    char* args[ 2 ] = { const_cast&lt; char* &gt;( KMOZILLAHELPER ), NULL };</span>
<a href="#l2669"></a><span id="l2669">+    switch( fork())</span>
<a href="#l2670"></a><span id="l2670">+        {</span>
<a href="#l2671"></a><span id="l2671">+        case -1:</span>
<a href="#l2672"></a><span id="l2672">+            {</span>
<a href="#l2673"></a><span id="l2673">+            close( fdcommand[ 0 ] );</span>
<a href="#l2674"></a><span id="l2674">+            close( fdcommand[ 1 ] );</span>
<a href="#l2675"></a><span id="l2675">+            close( fdreply[ 0 ] );</span>
<a href="#l2676"></a><span id="l2676">+            close( fdreply[ 1 ] );</span>
<a href="#l2677"></a><span id="l2677">+            return false;</span>
<a href="#l2678"></a><span id="l2678">+            }</span>
<a href="#l2679"></a><span id="l2679">+        case 0: // child</span>
<a href="#l2680"></a><span id="l2680">+            {</span>
<a href="#l2681"></a><span id="l2681">+            if( dup2( fdcommand[ 0 ], STDIN_FILENO ) &lt; 0 )</span>
<a href="#l2682"></a><span id="l2682">+                _exit( 1 );</span>
<a href="#l2683"></a><span id="l2683">+            if( dup2( fdreply[ 1 ], STDOUT_FILENO ) &lt; 0 )</span>
<a href="#l2684"></a><span id="l2684">+                _exit( 1 );</span>
<a href="#l2685"></a><span id="l2685">+            int maxfd = 1024; // close all other fds</span>
<a href="#l2686"></a><span id="l2686">+            struct rlimit rl;</span>
<a href="#l2687"></a><span id="l2687">+            if( getrlimit( RLIMIT_NOFILE, &amp;rl ) == 0 )</span>
<a href="#l2688"></a><span id="l2688">+                maxfd = rl.rlim_max;</span>
<a href="#l2689"></a><span id="l2689">+            for( int i = 3;</span>
<a href="#l2690"></a><span id="l2690">+                 i &lt; maxfd;</span>
<a href="#l2691"></a><span id="l2691">+                 ++i )</span>
<a href="#l2692"></a><span id="l2692">+                close( i );</span>
<a href="#l2693"></a><span id="l2693">+#ifdef DEBUG_KDE</span>
<a href="#l2694"></a><span id="l2694">+            execvp( KMOZILLAHELPER, args );</span>
<a href="#l2695"></a><span id="l2695">+#else</span>
<a href="#l2696"></a><span id="l2696">+            execv( KMOZILLAHELPER, args );</span>
<a href="#l2697"></a><span id="l2697">+#endif</span>
<a href="#l2698"></a><span id="l2698">+            _exit( 1 ); // failed</span>
<a href="#l2699"></a><span id="l2699">+            }</span>
<a href="#l2700"></a><span id="l2700">+        default: // parent</span>
<a href="#l2701"></a><span id="l2701">+            {</span>
<a href="#l2702"></a><span id="l2702">+            commandFile = fdopen( fdcommand[ 1 ], &quot;w&quot; );</span>
<a href="#l2703"></a><span id="l2703">+            replyFile = fdopen( fdreply[ 0 ], &quot;r&quot; );</span>
<a href="#l2704"></a><span id="l2704">+            close( fdcommand[ 0 ] );</span>
<a href="#l2705"></a><span id="l2705">+            close( fdreply[ 1 ] );</span>
<a href="#l2706"></a><span id="l2706">+            if( commandFile == NULL || replyFile == NULL )</span>
<a href="#l2707"></a><span id="l2707">+                {</span>
<a href="#l2708"></a><span id="l2708">+                closeHelper();</span>
<a href="#l2709"></a><span id="l2709">+                return false;</span>
<a href="#l2710"></a><span id="l2710">+                }</span>
<a href="#l2711"></a><span id="l2711">+            // ok, helper ready, getKdeRunning() will check if it works</span>
<a href="#l2712"></a><span id="l2712">+            }</span>
<a href="#l2713"></a><span id="l2713">+        }</span>
<a href="#l2714"></a><span id="l2714">+    helperFailed = false;</span>
<a href="#l2715"></a><span id="l2715">+    helperRunning = true;</span>
<a href="#l2716"></a><span id="l2716">+    return true;</span>
<a href="#l2717"></a><span id="l2717">+    }</span>
<a href="#l2718"></a><span id="l2718">+</span>
<a href="#l2719"></a><span id="l2719">+void nsKDEUtils::closeHelper()</span>
<a href="#l2720"></a><span id="l2720">+    {</span>
<a href="#l2721"></a><span id="l2721">+    if( commandFile != NULL )</span>
<a href="#l2722"></a><span id="l2722">+        fclose( commandFile ); // this will also make the helper quit</span>
<a href="#l2723"></a><span id="l2723">+    if( replyFile != NULL )</span>
<a href="#l2724"></a><span id="l2724">+        fclose( replyFile );</span>
<a href="#l2725"></a><span id="l2725">+    helperRunning = false;</span>
<a href="#l2726"></a><span id="l2726">+    }</span>
<a href="#l2727"></a><span id="l2727">+</span>
<a href="#l2728"></a><span id="l2728">+void nsKDEUtils::feedCommand( const nsTArray&lt;nsCString&gt;&amp; command )</span>
<a href="#l2729"></a><span id="l2729">+    {</span>
<a href="#l2730"></a><span id="l2730">+    for( int i = 0;</span>
<a href="#l2731"></a><span id="l2731">+         i &lt; command.Length();</span>
<a href="#l2732"></a><span id="l2732">+         ++i )</span>
<a href="#l2733"></a><span id="l2733">+        {</span>
<a href="#l2734"></a><span id="l2734">+        nsCString line = command[ i ];</span>
<a href="#l2735"></a><span id="l2735">+        line.ReplaceSubstring( &quot;\\&quot;, &quot;\\&quot; &quot;\\&quot; ); // \ -&gt; \\ , i.e. escape</span>
<a href="#l2736"></a><span id="l2736">+        line.ReplaceSubstring( &quot;\n&quot;, &quot;\\n&quot; );</span>
<a href="#l2737"></a><span id="l2737">+#ifdef DEBUG_KDE</span>
<a href="#l2738"></a><span id="l2738">+        fprintf( stderr, &quot;COMM: %s\n&quot;, line.get());</span>
<a href="#l2739"></a><span id="l2739">+#endif</span>
<a href="#l2740"></a><span id="l2740">+        fputs( line.get(), commandFile );</span>
<a href="#l2741"></a><span id="l2741">+        fputs( &quot;\n&quot;, commandFile );</span>
<a href="#l2742"></a><span id="l2742">+        }</span>
<a href="#l2743"></a><span id="l2743">+    fputs( &quot;\\E\n&quot;, commandFile ); // done as \E, so it cannot happen in normal data</span>
<a href="#l2744"></a><span id="l2744">+    fflush( commandFile );</span>
<a href="#l2745"></a><span id="l2745">+    }</span>
<a href="#l2746"></a><span id="l2746">diff --git a/toolkit/xre/nsKDEUtils.h b/toolkit/xre/nsKDEUtils.h</span>
<a href="#l2747"></a><span id="l2747">new file mode 100644</span>
<a href="#l2748"></a><span id="l2748">--- /dev/null</span>
<a href="#l2749"></a><span id="l2749">+++ b/toolkit/xre/nsKDEUtils.h</span>
<a href="#l2750"></a><span id="l2750">@@ -0,0 +1,48 @@</span>
<a href="#l2751"></a><span id="l2751">+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</span>
<a href="#l2752"></a><span id="l2752">+/* This Source Code Form is subject to the terms of the Mozilla Public</span>
<a href="#l2753"></a><span id="l2753">+ * License, v. 2.0. If a copy of the MPL was not distributed with this</span>
<a href="#l2754"></a><span id="l2754">+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */</span>
<a href="#l2755"></a><span id="l2755">+</span>
<a href="#l2756"></a><span id="l2756">+#ifndef nsKDEUtils_h__</span>
<a href="#l2757"></a><span id="l2757">+#define nsKDEUtils_h__</span>
<a href="#l2758"></a><span id="l2758">+</span>
<a href="#l2759"></a><span id="l2759">+#include &quot;nsStringGlue.h&quot;</span>
<a href="#l2760"></a><span id="l2760">+#include &quot;nsTArray.h&quot;</span>
<a href="#l2761"></a><span id="l2761">+#include &lt;stdio.h&gt;</span>
<a href="#l2762"></a><span id="l2762">+</span>
<a href="#l2763"></a><span id="l2763">+typedef struct _GtkWindow GtkWindow;</span>
<a href="#l2764"></a><span id="l2764">+</span>
<a href="#l2765"></a><span id="l2765">+class nsIArray;</span>
<a href="#l2766"></a><span id="l2766">+</span>
<a href="#l2767"></a><span id="l2767">+class NS_EXPORT nsKDEUtils</span>
<a href="#l2768"></a><span id="l2768">+    {</span>
<a href="#l2769"></a><span id="l2769">+    public:</span>
<a href="#l2770"></a><span id="l2770">+        /* Returns true if running inside a KDE session (regardless of whether there is KDE</span>
<a href="#l2771"></a><span id="l2771">+           support available for Firefox). This should be used e.g. when determining</span>
<a href="#l2772"></a><span id="l2772">+           dialog button order but not for code that requires the KDE support. */</span>
<a href="#l2773"></a><span id="l2773">+        static bool kdeSession();</span>
<a href="#l2774"></a><span id="l2774">+        /* Returns true if running inside a KDE session and KDE support is available</span>
<a href="#l2775"></a><span id="l2775">+           for Firefox. This should be used everywhere where the external helper is needed. */</span>
<a href="#l2776"></a><span id="l2776">+        static bool kdeSupport();</span>
<a href="#l2777"></a><span id="l2777">+        /* Executes the given helper command, returns true if helper returned success. */</span>
<a href="#l2778"></a><span id="l2778">+        static bool command( const nsTArray&lt;nsCString&gt;&amp; command, nsTArray&lt;nsCString&gt;* output = NULL );</span>
<a href="#l2779"></a><span id="l2779">+        static bool command( nsIArray* command, nsIArray** output = NULL );</span>
<a href="#l2780"></a><span id="l2780">+        /* Like command(), but additionally blocks the parent widget like if there was</span>
<a href="#l2781"></a><span id="l2781">+           a modal dialog shown and enters the event loop (i.e. there are still paint updates,</span>
<a href="#l2782"></a><span id="l2782">+           this is for commands that take long). */</span>
<a href="#l2783"></a><span id="l2783">+        static bool commandBlockUi( const nsTArray&lt;nsCString&gt;&amp; command, GtkWindow* parent, nsTArray&lt;nsCString&gt;* output = NULL );</span>
<a href="#l2784"></a><span id="l2784">+</span>
<a href="#l2785"></a><span id="l2785">+    private:</span>
<a href="#l2786"></a><span id="l2786">+        nsKDEUtils();</span>
<a href="#l2787"></a><span id="l2787">+        ~nsKDEUtils();</span>
<a href="#l2788"></a><span id="l2788">+        static nsKDEUtils* self();</span>
<a href="#l2789"></a><span id="l2789">+        bool startHelper();</span>
<a href="#l2790"></a><span id="l2790">+        void closeHelper();</span>
<a href="#l2791"></a><span id="l2791">+        void feedCommand( const nsTArray&lt;nsCString&gt;&amp; command );</span>
<a href="#l2792"></a><span id="l2792">+        bool internalCommand( const nsTArray&lt;nsCString&gt;&amp; command, GtkWindow* parent, bool isParent,</span>
<a href="#l2793"></a><span id="l2793">+            nsTArray&lt;nsCString&gt;* output );</span>
<a href="#l2794"></a><span id="l2794">+        FILE* commandFile;</span>
<a href="#l2795"></a><span id="l2795">+        FILE* replyFile;</span>
<a href="#l2796"></a><span id="l2796">+    };</span>
<a href="#l2797"></a><span id="l2797">+</span>
<a href="#l2798"></a><span id="l2798">+#endif // nsKDEUtils</span>
<a href="#l2799"></a><span id="l2799">diff --git a/uriloader/exthandler/moz.build b/uriloader/exthandler/moz.build</span>
<a href="#l2800"></a><span id="l2800">--- a/uriloader/exthandler/moz.build</span>
<a href="#l2801"></a><span id="l2801">+++ b/uriloader/exthandler/moz.build</span>
<a href="#l2802"></a><span id="l2802">@@ -77,17 +77,19 @@ else:</span>
<a href="#l2803"></a><span id="l2803">     SOURCES += [</span>
<a href="#l2804"></a><span id="l2804">         osdir + '/nsOSHelperAppService.cpp',</span>
<a href="#l2805"></a><span id="l2805">     ]</span>
<a href="#l2806"></a><span id="l2806">     if CONFIG['GNU_CXX']:</span>
<a href="#l2807"></a><span id="l2807">         CXXFLAGS += ['-Wno-error=shadow']</span>
<a href="#l2808"></a><span id="l2808"> </span>
<a href="#l2809"></a><span id="l2809"> if 'gtk' in CONFIG['MOZ_WIDGET_TOOLKIT']:</span>
<a href="#l2810"></a><span id="l2810">     UNIFIED_SOURCES += [</span>
<a href="#l2811"></a><span id="l2811">+        'unix/nsCommonRegistry.cpp',</span>
<a href="#l2812"></a><span id="l2812">         'unix/nsGNOMERegistry.cpp',</span>
<a href="#l2813"></a><span id="l2813">+	'unix/nsKDERegistry.cpp',</span>
<a href="#l2814"></a><span id="l2814">         'unix/nsMIMEInfoUnix.cpp',</span>
<a href="#l2815"></a><span id="l2815">     ]</span>
<a href="#l2816"></a><span id="l2816"> elif CONFIG['MOZ_WIDGET_TOOLKIT'] == 'android':</span>
<a href="#l2817"></a><span id="l2817">     UNIFIED_SOURCES += [</span>
<a href="#l2818"></a><span id="l2818">         'android/nsAndroidHandlerApp.cpp',</span>
<a href="#l2819"></a><span id="l2819">         'android/nsExternalSharingAppService.cpp',</span>
<a href="#l2820"></a><span id="l2820">         'android/nsExternalURLHandlerService.cpp',</span>
<a href="#l2821"></a><span id="l2821">         'android/nsMIMEInfoAndroid.cpp',</span>
<a href="#l2822"></a><span id="l2822">@@ -123,16 +125,17 @@ include('/ipc/chromium/chromium-config.m</span>
<a href="#l2823"></a><span id="l2823"> </span>
<a href="#l2824"></a><span id="l2824"> FINAL_LIBRARY = 'xul'</span>
<a href="#l2825"></a><span id="l2825"> </span>
<a href="#l2826"></a><span id="l2826"> LOCAL_INCLUDES += [</span>
<a href="#l2827"></a><span id="l2827">     '/dom/base',</span>
<a href="#l2828"></a><span id="l2828">     '/dom/ipc',</span>
<a href="#l2829"></a><span id="l2829">     '/netwerk/base',</span>
<a href="#l2830"></a><span id="l2830">     '/netwerk/protocol/http',</span>
<a href="#l2831"></a><span id="l2831">+    '/toolkit/xre',</span>
<a href="#l2832"></a><span id="l2832"> ]</span>
<a href="#l2833"></a><span id="l2833"> </span>
<a href="#l2834"></a><span id="l2834"> if CONFIG['MOZ_ENABLE_DBUS']:</span>
<a href="#l2835"></a><span id="l2835">     CXXFLAGS += CONFIG['TK_CFLAGS']</span>
<a href="#l2836"></a><span id="l2836">     CXXFLAGS += CONFIG['MOZ_DBUS_CFLAGS']</span>
<a href="#l2837"></a><span id="l2837"> </span>
<a href="#l2838"></a><span id="l2838"> if CONFIG['MOZ_WIDGET_TOOLKIT'] in ('gtk2', 'gtk3'):</span>
<a href="#l2839"></a><span id="l2839">     CXXFLAGS += CONFIG['TK_CFLAGS']</span>
<a href="#l2840"></a><span id="l2840">diff --git a/uriloader/exthandler/unix/nsCommonRegistry.cpp b/uriloader/exthandler/unix/nsCommonRegistry.cpp</span>
<a href="#l2841"></a><span id="l2841">new file mode 100644</span>
<a href="#l2842"></a><span id="l2842">--- /dev/null</span>
<a href="#l2843"></a><span id="l2843">+++ b/uriloader/exthandler/unix/nsCommonRegistry.cpp</span>
<a href="#l2844"></a><span id="l2844">@@ -0,0 +1,53 @@</span>
<a href="#l2845"></a><span id="l2845">+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</span>
<a href="#l2846"></a><span id="l2846">+/* This Source Code Form is subject to the terms of the Mozilla Public</span>
<a href="#l2847"></a><span id="l2847">+ * License, v. 2.0. If a copy of the MPL was not distributed with this</span>
<a href="#l2848"></a><span id="l2848">+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */</span>
<a href="#l2849"></a><span id="l2849">+</span>
<a href="#l2850"></a><span id="l2850">+#include &quot;nsCommonRegistry.h&quot;</span>
<a href="#l2851"></a><span id="l2851">+</span>
<a href="#l2852"></a><span id="l2852">+#include &quot;nsGNOMERegistry.h&quot;</span>
<a href="#l2853"></a><span id="l2853">+#include &quot;nsKDERegistry.h&quot;</span>
<a href="#l2854"></a><span id="l2854">+#include &quot;nsString.h&quot;</span>
<a href="#l2855"></a><span id="l2855">+#include &quot;nsKDEUtils.h&quot;</span>
<a href="#l2856"></a><span id="l2856">+</span>
<a href="#l2857"></a><span id="l2857">+/* static */ bool</span>
<a href="#l2858"></a><span id="l2858">+nsCommonRegistry::HandlerExists(const char *aProtocolScheme)</span>
<a href="#l2859"></a><span id="l2859">+{</span>
<a href="#l2860"></a><span id="l2860">+    if( nsKDEUtils::kdeSupport())</span>
<a href="#l2861"></a><span id="l2861">+        return nsKDERegistry::HandlerExists( aProtocolScheme );</span>
<a href="#l2862"></a><span id="l2862">+    return nsGNOMERegistry::HandlerExists( aProtocolScheme );</span>
<a href="#l2863"></a><span id="l2863">+}</span>
<a href="#l2864"></a><span id="l2864">+</span>
<a href="#l2865"></a><span id="l2865">+/* static */ nsresult</span>
<a href="#l2866"></a><span id="l2866">+nsCommonRegistry::LoadURL(nsIURI *aURL)</span>
<a href="#l2867"></a><span id="l2867">+{</span>
<a href="#l2868"></a><span id="l2868">+    if( nsKDEUtils::kdeSupport())</span>
<a href="#l2869"></a><span id="l2869">+        return nsKDERegistry::LoadURL( aURL );</span>
<a href="#l2870"></a><span id="l2870">+    return nsGNOMERegistry::LoadURL( aURL );</span>
<a href="#l2871"></a><span id="l2871">+}</span>
<a href="#l2872"></a><span id="l2872">+</span>
<a href="#l2873"></a><span id="l2873">+/* static */ void</span>
<a href="#l2874"></a><span id="l2874">+nsCommonRegistry::GetAppDescForScheme(const nsACString&amp; aScheme,</span>
<a href="#l2875"></a><span id="l2875">+                                     nsAString&amp; aDesc)</span>
<a href="#l2876"></a><span id="l2876">+{</span>
<a href="#l2877"></a><span id="l2877">+    if( nsKDEUtils::kdeSupport())</span>
<a href="#l2878"></a><span id="l2878">+        return nsKDERegistry::GetAppDescForScheme( aScheme, aDesc );</span>
<a href="#l2879"></a><span id="l2879">+    return nsGNOMERegistry::GetAppDescForScheme( aScheme, aDesc );</span>
<a href="#l2880"></a><span id="l2880">+}</span>
<a href="#l2881"></a><span id="l2881">+</span>
<a href="#l2882"></a><span id="l2882">+</span>
<a href="#l2883"></a><span id="l2883">+/* static */ already_AddRefed&lt;nsMIMEInfoBase&gt;</span>
<a href="#l2884"></a><span id="l2884">+nsCommonRegistry::GetFromExtension(const nsACString&amp; aFileExt)</span>
<a href="#l2885"></a><span id="l2885">+{</span>
<a href="#l2886"></a><span id="l2886">+    if( nsKDEUtils::kdeSupport())</span>
<a href="#l2887"></a><span id="l2887">+        return nsKDERegistry::GetFromExtension( aFileExt );</span>
<a href="#l2888"></a><span id="l2888">+    return nsGNOMERegistry::GetFromExtension( aFileExt );</span>
<a href="#l2889"></a><span id="l2889">+}</span>
<a href="#l2890"></a><span id="l2890">+</span>
<a href="#l2891"></a><span id="l2891">+/* static */ already_AddRefed&lt;nsMIMEInfoBase&gt;</span>
<a href="#l2892"></a><span id="l2892">+nsCommonRegistry::GetFromType(const nsACString&amp; aMIMEType)</span>
<a href="#l2893"></a><span id="l2893">+{</span>
<a href="#l2894"></a><span id="l2894">+    if( nsKDEUtils::kdeSupport())</span>
<a href="#l2895"></a><span id="l2895">+        return nsKDERegistry::GetFromType( aMIMEType );</span>
<a href="#l2896"></a><span id="l2896">+    return nsGNOMERegistry::GetFromType( aMIMEType );</span>
<a href="#l2897"></a><span id="l2897">+}</span>
<a href="#l2898"></a><span id="l2898">diff --git a/uriloader/exthandler/unix/nsCommonRegistry.h b/uriloader/exthandler/unix/nsCommonRegistry.h</span>
<a href="#l2899"></a><span id="l2899">new file mode 100644</span>
<a href="#l2900"></a><span id="l2900">--- /dev/null</span>
<a href="#l2901"></a><span id="l2901">+++ b/uriloader/exthandler/unix/nsCommonRegistry.h</span>
<a href="#l2902"></a><span id="l2902">@@ -0,0 +1,28 @@</span>
<a href="#l2903"></a><span id="l2903">+/* This Source Code Form is subject to the terms of the Mozilla Public</span>
<a href="#l2904"></a><span id="l2904">+ * License, v. 2.0. If a copy of the MPL was not distributed with this</span>
<a href="#l2905"></a><span id="l2905">+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */</span>
<a href="#l2906"></a><span id="l2906">+</span>
<a href="#l2907"></a><span id="l2907">+#ifndef nsCommonRegistry_h__</span>
<a href="#l2908"></a><span id="l2908">+#define nsCommonRegistry_h__</span>
<a href="#l2909"></a><span id="l2909">+</span>
<a href="#l2910"></a><span id="l2910">+#include &quot;nsIURI.h&quot;</span>
<a href="#l2911"></a><span id="l2911">+#include &quot;nsCOMPtr.h&quot;</span>
<a href="#l2912"></a><span id="l2912">+</span>
<a href="#l2913"></a><span id="l2913">+class nsMIMEInfoBase;</span>
<a href="#l2914"></a><span id="l2914">+</span>
<a href="#l2915"></a><span id="l2915">+class nsCommonRegistry</span>
<a href="#l2916"></a><span id="l2916">+{</span>
<a href="#l2917"></a><span id="l2917">+ public:</span>
<a href="#l2918"></a><span id="l2918">+  static bool HandlerExists(const char *aProtocolScheme);</span>
<a href="#l2919"></a><span id="l2919">+</span>
<a href="#l2920"></a><span id="l2920">+  static nsresult LoadURL(nsIURI *aURL);</span>
<a href="#l2921"></a><span id="l2921">+</span>
<a href="#l2922"></a><span id="l2922">+  static void GetAppDescForScheme(const nsACString&amp; aScheme,</span>
<a href="#l2923"></a><span id="l2923">+                                  nsAString&amp; aDesc);</span>
<a href="#l2924"></a><span id="l2924">+</span>
<a href="#l2925"></a><span id="l2925">+  static already_AddRefed&lt;nsMIMEInfoBase&gt; GetFromExtension(const nsACString&amp; aFileExt);</span>
<a href="#l2926"></a><span id="l2926">+</span>
<a href="#l2927"></a><span id="l2927">+  static already_AddRefed&lt;nsMIMEInfoBase&gt; GetFromType(const nsACString&amp; aMIMEType);</span>
<a href="#l2928"></a><span id="l2928">+};</span>
<a href="#l2929"></a><span id="l2929">+</span>
<a href="#l2930"></a><span id="l2930">+#endif</span>
<a href="#l2931"></a><span id="l2931">diff --git a/uriloader/exthandler/unix/nsKDERegistry.cpp b/uriloader/exthandler/unix/nsKDERegistry.cpp</span>
<a href="#l2932"></a><span id="l2932">new file mode 100644</span>
<a href="#l2933"></a><span id="l2933">--- /dev/null</span>
<a href="#l2934"></a><span id="l2934">+++ b/uriloader/exthandler/unix/nsKDERegistry.cpp</span>
<a href="#l2935"></a><span id="l2935">@@ -0,0 +1,88 @@</span>
<a href="#l2936"></a><span id="l2936">+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</span>
<a href="#l2937"></a><span id="l2937">+/* This Source Code Form is subject to the terms of the Mozilla Public</span>
<a href="#l2938"></a><span id="l2938">+ * License, v. 2.0. If a copy of the MPL was not distributed with this</span>
<a href="#l2939"></a><span id="l2939">+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */</span>
<a href="#l2940"></a><span id="l2940">+</span>
<a href="#l2941"></a><span id="l2941">+#include &quot;nsKDERegistry.h&quot;</span>
<a href="#l2942"></a><span id="l2942">+#include &quot;prlink.h&quot;</span>
<a href="#l2943"></a><span id="l2943">+#include &quot;prmem.h&quot;</span>
<a href="#l2944"></a><span id="l2944">+#include &quot;nsString.h&quot;</span>
<a href="#l2945"></a><span id="l2945">+#include &quot;nsILocalFile.h&quot;</span>
<a href="#l2946"></a><span id="l2946">+#include &quot;nsMIMEInfoUnix.h&quot;</span>
<a href="#l2947"></a><span id="l2947">+#include &quot;nsAutoPtr.h&quot;</span>
<a href="#l2948"></a><span id="l2948">+#include &quot;nsKDEUtils.h&quot;</span>
<a href="#l2949"></a><span id="l2949">+</span>
<a href="#l2950"></a><span id="l2950">+/* static */ bool</span>
<a href="#l2951"></a><span id="l2951">+nsKDERegistry::HandlerExists(const char *aProtocolScheme)</span>
<a href="#l2952"></a><span id="l2952">+{</span>
<a href="#l2953"></a><span id="l2953">+    nsTArray&lt;nsCString&gt; command;</span>
<a href="#l2954"></a><span id="l2954">+    command.AppendElement( NS_LITERAL_CSTRING( &quot;HANDLEREXISTS&quot; ));</span>
<a href="#l2955"></a><span id="l2955">+    command.AppendElement( nsAutoCString( aProtocolScheme ));</span>
<a href="#l2956"></a><span id="l2956">+    return nsKDEUtils::command( command );</span>
<a href="#l2957"></a><span id="l2957">+}</span>
<a href="#l2958"></a><span id="l2958">+</span>
<a href="#l2959"></a><span id="l2959">+/* static */ nsresult</span>
<a href="#l2960"></a><span id="l2960">+nsKDERegistry::LoadURL(nsIURI *aURL)</span>
<a href="#l2961"></a><span id="l2961">+{</span>
<a href="#l2962"></a><span id="l2962">+    nsTArray&lt;nsCString&gt; command;</span>
<a href="#l2963"></a><span id="l2963">+    command.AppendElement( NS_LITERAL_CSTRING( &quot;OPEN&quot; ));</span>
<a href="#l2964"></a><span id="l2964">+    nsCString url;</span>
<a href="#l2965"></a><span id="l2965">+    aURL-&gt;GetSpec( url );</span>
<a href="#l2966"></a><span id="l2966">+    command.AppendElement( url );</span>
<a href="#l2967"></a><span id="l2967">+    bool rv = nsKDEUtils::command( command );</span>
<a href="#l2968"></a><span id="l2968">+    if (!rv)</span>
<a href="#l2969"></a><span id="l2969">+      return NS_ERROR_FAILURE;</span>
<a href="#l2970"></a><span id="l2970">+</span>
<a href="#l2971"></a><span id="l2971">+    return NS_OK;</span>
<a href="#l2972"></a><span id="l2972">+}</span>
<a href="#l2973"></a><span id="l2973">+</span>
<a href="#l2974"></a><span id="l2974">+/* static */ void</span>
<a href="#l2975"></a><span id="l2975">+nsKDERegistry::GetAppDescForScheme(const nsACString&amp; aScheme,</span>
<a href="#l2976"></a><span id="l2976">+                                     nsAString&amp; aDesc)</span>
<a href="#l2977"></a><span id="l2977">+{</span>
<a href="#l2978"></a><span id="l2978">+    nsTArray&lt;nsCString&gt; command;</span>
<a href="#l2979"></a><span id="l2979">+    command.AppendElement( NS_LITERAL_CSTRING( &quot;GETAPPDESCFORSCHEME&quot; ));</span>
<a href="#l2980"></a><span id="l2980">+    command.AppendElement( aScheme );</span>
<a href="#l2981"></a><span id="l2981">+    nsTArray&lt;nsCString&gt; output;</span>
<a href="#l2982"></a><span id="l2982">+    if( nsKDEUtils::command( command, &amp;output ) &amp;&amp; output.Length() == 1 )</span>
<a href="#l2983"></a><span id="l2983">+        CopyUTF8toUTF16( output[ 0 ], aDesc );</span>
<a href="#l2984"></a><span id="l2984">+}</span>
<a href="#l2985"></a><span id="l2985">+</span>
<a href="#l2986"></a><span id="l2986">+</span>
<a href="#l2987"></a><span id="l2987">+/* static */ already_AddRefed&lt;nsMIMEInfoBase&gt;</span>
<a href="#l2988"></a><span id="l2988">+nsKDERegistry::GetFromExtension(const nsACString&amp; aFileExt)</span>
<a href="#l2989"></a><span id="l2989">+{</span>
<a href="#l2990"></a><span id="l2990">+    NS_ASSERTION(aFileExt[0] != '.', &quot;aFileExt shouldn't start with a dot&quot;);</span>
<a href="#l2991"></a><span id="l2991">+    nsTArray&lt;nsCString&gt; command;</span>
<a href="#l2992"></a><span id="l2992">+    command.AppendElement( NS_LITERAL_CSTRING( &quot;GETFROMEXTENSION&quot; ));</span>
<a href="#l2993"></a><span id="l2993">+    command.AppendElement( aFileExt );</span>
<a href="#l2994"></a><span id="l2994">+    return GetFromHelper( command );</span>
<a href="#l2995"></a><span id="l2995">+}</span>
<a href="#l2996"></a><span id="l2996">+</span>
<a href="#l2997"></a><span id="l2997">+/* static */ already_AddRefed&lt;nsMIMEInfoBase&gt;</span>
<a href="#l2998"></a><span id="l2998">+nsKDERegistry::GetFromType(const nsACString&amp; aMIMEType)</span>
<a href="#l2999"></a><span id="l2999">+{</span>
<a href="#l3000"></a><span id="l3000">+    nsTArray&lt;nsCString&gt; command;</span>
<a href="#l3001"></a><span id="l3001">+    command.AppendElement( NS_LITERAL_CSTRING( &quot;GETFROMTYPE&quot; ));</span>
<a href="#l3002"></a><span id="l3002">+    command.AppendElement( aMIMEType );</span>
<a href="#l3003"></a><span id="l3003">+    return GetFromHelper( command );</span>
<a href="#l3004"></a><span id="l3004">+}</span>
<a href="#l3005"></a><span id="l3005">+</span>
<a href="#l3006"></a><span id="l3006">+/* static */ already_AddRefed&lt;nsMIMEInfoBase&gt;</span>
<a href="#l3007"></a><span id="l3007">+nsKDERegistry::GetFromHelper(const nsTArray&lt;nsCString&gt;&amp; command)</span>
<a href="#l3008"></a><span id="l3008">+{</span>
<a href="#l3009"></a><span id="l3009">+    nsTArray&lt;nsCString&gt; output;</span>
<a href="#l3010"></a><span id="l3010">+    if( nsKDEUtils::command( command, &amp;output ) &amp;&amp; output.Length() == 3 )</span>
<a href="#l3011"></a><span id="l3011">+        {</span>
<a href="#l3012"></a><span id="l3012">+        nsCString mimetype = output[ 0 ];</span>
<a href="#l3013"></a><span id="l3013">+        RefPtr&lt;nsMIMEInfoUnix&gt; mimeInfo = new nsMIMEInfoUnix( mimetype );</span>
<a href="#l3014"></a><span id="l3014">+        NS_ENSURE_TRUE(mimeInfo, nullptr);</span>
<a href="#l3015"></a><span id="l3015">+        nsCString description = output[ 1 ];</span>
<a href="#l3016"></a><span id="l3016">+        mimeInfo-&gt;SetDescription(NS_ConvertUTF8toUTF16(description));</span>
<a href="#l3017"></a><span id="l3017">+        nsCString handlerAppName = output[ 2 ];</span>
<a href="#l3018"></a><span id="l3018">+        mimeInfo-&gt;SetDefaultDescription(NS_ConvertUTF8toUTF16(handlerAppName));</span>
<a href="#l3019"></a><span id="l3019">+        mimeInfo-&gt;SetPreferredAction(nsIMIMEInfo::useSystemDefault);</span>
<a href="#l3020"></a><span id="l3020">+        return mimeInfo.forget();</span>
<a href="#l3021"></a><span id="l3021">+        }</span>
<a href="#l3022"></a><span id="l3022">+    return nullptr;</span>
<a href="#l3023"></a><span id="l3023">+}</span>
<a href="#l3024"></a><span id="l3024">diff --git a/uriloader/exthandler/unix/nsKDERegistry.h b/uriloader/exthandler/unix/nsKDERegistry.h</span>
<a href="#l3025"></a><span id="l3025">new file mode 100644</span>
<a href="#l3026"></a><span id="l3026">--- /dev/null</span>
<a href="#l3027"></a><span id="l3027">+++ b/uriloader/exthandler/unix/nsKDERegistry.h</span>
<a href="#l3028"></a><span id="l3028">@@ -0,0 +1,34 @@</span>
<a href="#l3029"></a><span id="l3029">+/* This Source Code Form is subject to the terms of the Mozilla Public</span>
<a href="#l3030"></a><span id="l3030">+ * License, v. 2.0. If a copy of the MPL was not distributed with this</span>
<a href="#l3031"></a><span id="l3031">+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */</span>
<a href="#l3032"></a><span id="l3032">+</span>
<a href="#l3033"></a><span id="l3033">+#ifndef nsKDERegistry_h__</span>
<a href="#l3034"></a><span id="l3034">+#define nsKDERegistry_h__</span>
<a href="#l3035"></a><span id="l3035">+</span>
<a href="#l3036"></a><span id="l3036">+#include &quot;nsIURI.h&quot;</span>
<a href="#l3037"></a><span id="l3037">+#include &quot;nsCOMPtr.h&quot;</span>
<a href="#l3038"></a><span id="l3038">+#include &quot;nsTArray.h&quot;</span>
<a href="#l3039"></a><span id="l3039">+</span>
<a href="#l3040"></a><span id="l3040">+class nsMIMEInfoBase;</span>
<a href="#l3041"></a><span id="l3041">+class nsAutoCString;</span>
<a href="#l3042"></a><span id="l3042">+class nsCString;</span>
<a href="#l3043"></a><span id="l3043">+</span>
<a href="#l3044"></a><span id="l3044">+class nsKDERegistry</span>
<a href="#l3045"></a><span id="l3045">+{</span>
<a href="#l3046"></a><span id="l3046">+ public:</span>
<a href="#l3047"></a><span id="l3047">+  static bool HandlerExists(const char *aProtocolScheme);</span>
<a href="#l3048"></a><span id="l3048">+</span>
<a href="#l3049"></a><span id="l3049">+  static nsresult LoadURL(nsIURI *aURL);</span>
<a href="#l3050"></a><span id="l3050">+</span>
<a href="#l3051"></a><span id="l3051">+  static void GetAppDescForScheme(const nsACString&amp; aScheme,</span>
<a href="#l3052"></a><span id="l3052">+                                  nsAString&amp; aDesc);</span>
<a href="#l3053"></a><span id="l3053">+</span>
<a href="#l3054"></a><span id="l3054">+  static already_AddRefed&lt;nsMIMEInfoBase&gt; GetFromExtension(const nsACString&amp; aFileExt);</span>
<a href="#l3055"></a><span id="l3055">+</span>
<a href="#l3056"></a><span id="l3056">+  static already_AddRefed&lt;nsMIMEInfoBase&gt; GetFromType(const nsACString&amp; aMIMEType);</span>
<a href="#l3057"></a><span id="l3057">+ private:</span>
<a href="#l3058"></a><span id="l3058">+  static already_AddRefed&lt;nsMIMEInfoBase&gt; GetFromHelper(const nsTArray&lt;nsCString&gt;&amp; command);</span>
<a href="#l3059"></a><span id="l3059">+</span>
<a href="#l3060"></a><span id="l3060">+};</span>
<a href="#l3061"></a><span id="l3061">+</span>
<a href="#l3062"></a><span id="l3062">+#endif //nsKDERegistry_h__</span>
<a href="#l3063"></a><span id="l3063">diff --git a/uriloader/exthandler/unix/nsMIMEInfoUnix.cpp b/uriloader/exthandler/unix/nsMIMEInfoUnix.cpp</span>
<a href="#l3064"></a><span id="l3064">--- a/uriloader/exthandler/unix/nsMIMEInfoUnix.cpp</span>
<a href="#l3065"></a><span id="l3065">+++ b/uriloader/exthandler/unix/nsMIMEInfoUnix.cpp</span>
<a href="#l3066"></a><span id="l3066">@@ -1,50 +1,53 @@</span>
<a href="#l3067"></a><span id="l3067"> /* -*- Mode: C++; tab-width: 3; indent-tabs-mode: nil; c-basic-offset: 2 -*-</span>
<a href="#l3068"></a><span id="l3068">  *</span>
<a href="#l3069"></a><span id="l3069">  * This Source Code Form is subject to the terms of the Mozilla Public</span>
<a href="#l3070"></a><span id="l3070">  * License, v. 2.0. If a copy of the MPL was not distributed with this</span>
<a href="#l3071"></a><span id="l3071">  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */</span>
<a href="#l3072"></a><span id="l3072"> </span>
<a href="#l3073"></a><span id="l3073"> #include &quot;nsMIMEInfoUnix.h&quot;</span>
<a href="#l3074"></a><span id="l3074">-#include &quot;nsGNOMERegistry.h&quot;</span>
<a href="#l3075"></a><span id="l3075">+#include &quot;nsCommonRegistry.h&quot;</span>
<a href="#l3076"></a><span id="l3076"> #include &quot;nsIGIOService.h&quot;</span>
<a href="#l3077"></a><span id="l3077"> #include &quot;nsNetCID.h&quot;</span>
<a href="#l3078"></a><span id="l3078"> #include &quot;nsIIOService.h&quot;</span>
<a href="#l3079"></a><span id="l3079"> #include &quot;nsAutoPtr.h&quot;</span>
<a href="#l3080"></a><span id="l3080"> #ifdef MOZ_ENABLE_DBUS</span>
<a href="#l3081"></a><span id="l3081"> #include &quot;nsDBusHandlerApp.h&quot;</span>
<a href="#l3082"></a><span id="l3082"> #endif</span>
<a href="#l3083"></a><span id="l3083">+#if defined(XP_UNIX) &amp;&amp; !defined(XP_MACOSX)</span>
<a href="#l3084"></a><span id="l3084">+#include &quot;nsKDEUtils.h&quot;</span>
<a href="#l3085"></a><span id="l3085">+#endif</span>
<a href="#l3086"></a><span id="l3086"> </span>
<a href="#l3087"></a><span id="l3087"> nsresult</span>
<a href="#l3088"></a><span id="l3088"> nsMIMEInfoUnix::LoadUriInternal(nsIURI * aURI)</span>
<a href="#l3089"></a><span id="l3089"> {</span>
<a href="#l3090"></a><span id="l3090">-  return nsGNOMERegistry::LoadURL(aURI);</span>
<a href="#l3091"></a><span id="l3091">+  return nsCommonRegistry::LoadURL(aURI);</span>
<a href="#l3092"></a><span id="l3092"> }</span>
<a href="#l3093"></a><span id="l3093"> </span>
<a href="#l3094"></a><span id="l3094"> NS_IMETHODIMP</span>
<a href="#l3095"></a><span id="l3095"> nsMIMEInfoUnix::GetHasDefaultHandler(bool *_retval)</span>
<a href="#l3096"></a><span id="l3096"> {</span>
<a href="#l3097"></a><span id="l3097">   // if mDefaultApplication is set, it means the application has been set from</span>
<a href="#l3098"></a><span id="l3098">   // either /etc/mailcap or ${HOME}/.mailcap, in which case we don't want to</span>
<a href="#l3099"></a><span id="l3099">   // give the GNOME answer.</span>
<a href="#l3100"></a><span id="l3100">   if (mDefaultApplication)</span>
<a href="#l3101"></a><span id="l3101">     return nsMIMEInfoImpl::GetHasDefaultHandler(_retval);</span>
<a href="#l3102"></a><span id="l3102"> </span>
<a href="#l3103"></a><span id="l3103">   *_retval = false;</span>
<a href="#l3104"></a><span id="l3104"> </span>
<a href="#l3105"></a><span id="l3105">   if (mClass == eProtocolInfo) {</span>
<a href="#l3106"></a><span id="l3106">-    *_retval = nsGNOMERegistry::HandlerExists(mSchemeOrType.get());</span>
<a href="#l3107"></a><span id="l3107">+    *_retval = nsCommonRegistry::HandlerExists(mSchemeOrType.get());</span>
<a href="#l3108"></a><span id="l3108">   } else {</span>
<a href="#l3109"></a><span id="l3109">-    RefPtr&lt;nsMIMEInfoBase&gt; mimeInfo = nsGNOMERegistry::GetFromType(mSchemeOrType);</span>
<a href="#l3110"></a><span id="l3110">+    RefPtr&lt;nsMIMEInfoBase&gt; mimeInfo = nsCommonRegistry::GetFromType(mSchemeOrType);</span>
<a href="#l3111"></a><span id="l3111">     if (!mimeInfo) {</span>
<a href="#l3112"></a><span id="l3112">       nsAutoCString ext;</span>
<a href="#l3113"></a><span id="l3113">       nsresult rv = GetPrimaryExtension(ext);</span>
<a href="#l3114"></a><span id="l3114">       if (NS_SUCCEEDED(rv)) {</span>
<a href="#l3115"></a><span id="l3115">-        mimeInfo = nsGNOMERegistry::GetFromExtension(ext);</span>
<a href="#l3116"></a><span id="l3116">+        mimeInfo = nsCommonRegistry::GetFromExtension(ext);</span>
<a href="#l3117"></a><span id="l3117">       }</span>
<a href="#l3118"></a><span id="l3118">     }</span>
<a href="#l3119"></a><span id="l3119">     if (mimeInfo)</span>
<a href="#l3120"></a><span id="l3120">       *_retval = true;</span>
<a href="#l3121"></a><span id="l3121">   }</span>
<a href="#l3122"></a><span id="l3122"> </span>
<a href="#l3123"></a><span id="l3123">   if (*_retval)</span>
<a href="#l3124"></a><span id="l3124">     return NS_OK;</span>
<a href="#l3125"></a><span id="l3125">@@ -79,16 +82,33 @@ nsMIMEInfoUnix::LaunchDefaultWithFile(ns</span>
<a href="#l3126"></a><span id="l3126">     ContentAction::Action::defaultActionForFile(uri, QString(mSchemeOrType.get()));</span>
<a href="#l3127"></a><span id="l3127">   if (action.isValid()) {</span>
<a href="#l3128"></a><span id="l3128">     action.trigger();</span>
<a href="#l3129"></a><span id="l3129">     return NS_OK;</span>
<a href="#l3130"></a><span id="l3130">   }</span>
<a href="#l3131"></a><span id="l3131">   return NS_ERROR_FAILURE;</span>
<a href="#l3132"></a><span id="l3132"> #endif</span>
<a href="#l3133"></a><span id="l3133"> </span>
<a href="#l3134"></a><span id="l3134">+  if( nsKDEUtils::kdeSupport()) {</span>
<a href="#l3135"></a><span id="l3135">+    bool supports;</span>
<a href="#l3136"></a><span id="l3136">+    if( NS_SUCCEEDED( GetHasDefaultHandler( &amp;supports )) &amp;&amp; supports ) {</span>
<a href="#l3137"></a><span id="l3137">+      nsTArray&lt;nsCString&gt; command;</span>
<a href="#l3138"></a><span id="l3138">+      command.AppendElement( NS_LITERAL_CSTRING( &quot;OPEN&quot; ));</span>
<a href="#l3139"></a><span id="l3139">+      command.AppendElement( nativePath );</span>
<a href="#l3140"></a><span id="l3140">+      command.AppendElement( NS_LITERAL_CSTRING( &quot;MIMETYPE&quot; ));</span>
<a href="#l3141"></a><span id="l3141">+      command.AppendElement( mSchemeOrType );</span>
<a href="#l3142"></a><span id="l3142">+      if( nsKDEUtils::command( command ))</span>
<a href="#l3143"></a><span id="l3143">+        return NS_OK;</span>
<a href="#l3144"></a><span id="l3144">+    }</span>
<a href="#l3145"></a><span id="l3145">+    if (!mDefaultApplication)</span>
<a href="#l3146"></a><span id="l3146">+      return NS_ERROR_FILE_NOT_FOUND;</span>
<a href="#l3147"></a><span id="l3147">+</span>
<a href="#l3148"></a><span id="l3148">+    return LaunchWithIProcess(mDefaultApplication, nativePath);</span>
<a href="#l3149"></a><span id="l3149">+  }</span>
<a href="#l3150"></a><span id="l3150">+</span>
<a href="#l3151"></a><span id="l3151">   nsCOMPtr&lt;nsIGIOService&gt; giovfs = do_GetService(NS_GIOSERVICE_CONTRACTID);</span>
<a href="#l3152"></a><span id="l3152">   if (!giovfs) {</span>
<a href="#l3153"></a><span id="l3153">     return NS_ERROR_FAILURE;</span>
<a href="#l3154"></a><span id="l3154">   }</span>
<a href="#l3155"></a><span id="l3155"> </span>
<a href="#l3156"></a><span id="l3156">   // nsGIOMimeApp-&gt;Launch wants a URI string instead of local file</span>
<a href="#l3157"></a><span id="l3157">   nsresult rv;</span>
<a href="#l3158"></a><span id="l3158">   nsCOMPtr&lt;nsIIOService&gt; ioservice = do_GetService(NS_IOSERVICE_CONTRACTID, &amp;rv);</span>
<a href="#l3159"></a><span id="l3159">diff --git a/uriloader/exthandler/unix/nsOSHelperAppService.cpp b/uriloader/exthandler/unix/nsOSHelperAppService.cpp</span>
<a href="#l3160"></a><span id="l3160">--- a/uriloader/exthandler/unix/nsOSHelperAppService.cpp</span>
<a href="#l3161"></a><span id="l3161">+++ b/uriloader/exthandler/unix/nsOSHelperAppService.cpp</span>
<a href="#l3162"></a><span id="l3162">@@ -10,17 +10,17 @@</span>
<a href="#l3163"></a><span id="l3163"> #if defined(MOZ_ENABLE_CONTENTACTION)</span>
<a href="#l3164"></a><span id="l3164"> #include &lt;contentaction/contentaction.h&gt;</span>
<a href="#l3165"></a><span id="l3165"> #include &lt;QString&gt;</span>
<a href="#l3166"></a><span id="l3166"> #endif</span>
<a href="#l3167"></a><span id="l3167"> </span>
<a href="#l3168"></a><span id="l3168"> #include &quot;nsOSHelperAppService.h&quot;</span>
<a href="#l3169"></a><span id="l3169"> #include &quot;nsMIMEInfoUnix.h&quot;</span>
<a href="#l3170"></a><span id="l3170"> #ifdef MOZ_WIDGET_GTK</span>
<a href="#l3171"></a><span id="l3171">-#include &quot;nsGNOMERegistry.h&quot;</span>
<a href="#l3172"></a><span id="l3172">+#include &quot;nsCommonRegistry.h&quot;</span>
<a href="#l3173"></a><span id="l3173"> #endif</span>
<a href="#l3174"></a><span id="l3174"> #include &quot;nsISupports.h&quot;</span>
<a href="#l3175"></a><span id="l3175"> #include &quot;nsString.h&quot;</span>
<a href="#l3176"></a><span id="l3176"> #include &quot;nsReadableUtils.h&quot;</span>
<a href="#l3177"></a><span id="l3177"> #include &quot;nsUnicharUtils.h&quot;</span>
<a href="#l3178"></a><span id="l3178"> #include &quot;nsXPIDLString.h&quot;</span>
<a href="#l3179"></a><span id="l3179"> #include &quot;nsIURL.h&quot;</span>
<a href="#l3180"></a><span id="l3180"> #include &quot;nsIFileStreams.h&quot;</span>
<a href="#l3181"></a><span id="l3181">@@ -1146,26 +1146,26 @@ nsresult nsOSHelperAppService::OSProtoco</span>
<a href="#l3182"></a><span id="l3182">     ContentAction::Action::defaultActionForScheme(QString(aProtocolScheme) + ':');</span>
<a href="#l3183"></a><span id="l3183"> </span>
<a href="#l3184"></a><span id="l3184">   if (action.isValid())</span>
<a href="#l3185"></a><span id="l3185">     *aHandlerExists = true;</span>
<a href="#l3186"></a><span id="l3186"> #endif</span>
<a href="#l3187"></a><span id="l3187"> </span>
<a href="#l3188"></a><span id="l3188"> #ifdef MOZ_WIDGET_GTK</span>
<a href="#l3189"></a><span id="l3189">   // Check the GNOME registry for a protocol handler</span>
<a href="#l3190"></a><span id="l3190">-  *aHandlerExists = nsGNOMERegistry::HandlerExists(aProtocolScheme);</span>
<a href="#l3191"></a><span id="l3191">+  *aHandlerExists = nsCommonRegistry::HandlerExists(aProtocolScheme);</span>
<a href="#l3192"></a><span id="l3192"> #endif</span>
<a href="#l3193"></a><span id="l3193"> </span>
<a href="#l3194"></a><span id="l3194">   return NS_OK;</span>
<a href="#l3195"></a><span id="l3195"> }</span>
<a href="#l3196"></a><span id="l3196"> </span>
<a href="#l3197"></a><span id="l3197"> NS_IMETHODIMP nsOSHelperAppService::GetApplicationDescription(const nsACString&amp; aScheme, nsAString&amp; _retval)</span>
<a href="#l3198"></a><span id="l3198"> {</span>
<a href="#l3199"></a><span id="l3199"> #ifdef MOZ_WIDGET_GTK</span>
<a href="#l3200"></a><span id="l3200">-  nsGNOMERegistry::GetAppDescForScheme(aScheme, _retval);</span>
<a href="#l3201"></a><span id="l3201">+  nsCommonRegistry::GetAppDescForScheme(aScheme, _retval);</span>
<a href="#l3202"></a><span id="l3202">   return _retval.IsEmpty() ? NS_ERROR_NOT_AVAILABLE : NS_OK;</span>
<a href="#l3203"></a><span id="l3203"> #else</span>
<a href="#l3204"></a><span id="l3204">   return NS_ERROR_NOT_AVAILABLE;</span>
<a href="#l3205"></a><span id="l3205"> #endif</span>
<a href="#l3206"></a><span id="l3206"> }</span>
<a href="#l3207"></a><span id="l3207"> </span>
<a href="#l3208"></a><span id="l3208"> nsresult nsOSHelperAppService::GetFileTokenForPath(const char16_t * platformAppPath, nsIFile ** aFile)</span>
<a href="#l3209"></a><span id="l3209"> {</span>
<a href="#l3210"></a><span id="l3210">@@ -1252,17 +1252,17 @@ nsOSHelperAppService::GetFromExtension(c</span>
<a href="#l3211"></a><span id="l3211">                                          mime_types_description,</span>
<a href="#l3212"></a><span id="l3212">                                          true);</span>
<a href="#l3213"></a><span id="l3213"> </span>
<a href="#l3214"></a><span id="l3214">   if (NS_FAILED(rv) || majorType.IsEmpty()) {</span>
<a href="#l3215"></a><span id="l3215"> </span>
<a href="#l3216"></a><span id="l3216"> #ifdef MOZ_WIDGET_GTK</span>
<a href="#l3217"></a><span id="l3217">     LOG((&quot;Looking in GNOME registry\n&quot;));</span>
<a href="#l3218"></a><span id="l3218">     RefPtr&lt;nsMIMEInfoBase&gt; gnomeInfo =</span>
<a href="#l3219"></a><span id="l3219">-      nsGNOMERegistry::GetFromExtension(aFileExt);</span>
<a href="#l3220"></a><span id="l3220">+      nsCommonRegistry::GetFromExtension(aFileExt);</span>
<a href="#l3221"></a><span id="l3221">     if (gnomeInfo) {</span>
<a href="#l3222"></a><span id="l3222">       LOG((&quot;Got MIMEInfo from GNOME registry\n&quot;));</span>
<a href="#l3223"></a><span id="l3223">       return gnomeInfo.forget();</span>
<a href="#l3224"></a><span id="l3224">     }</span>
<a href="#l3225"></a><span id="l3225"> #endif</span>
<a href="#l3226"></a><span id="l3226"> </span>
<a href="#l3227"></a><span id="l3227">     rv = LookUpTypeAndDescription(NS_ConvertUTF8toUTF16(aFileExt),</span>
<a href="#l3228"></a><span id="l3228">                                   majorType,</span>
<a href="#l3229"></a><span id="l3229">@@ -1373,17 +1373,17 @@ nsOSHelperAppService::GetFromType(const </span>
<a href="#l3230"></a><span id="l3230">   nsAutoString extensions, mime_types_description;</span>
<a href="#l3231"></a><span id="l3231">   LookUpExtensionsAndDescription(majorType,</span>
<a href="#l3232"></a><span id="l3232">                                  minorType,</span>
<a href="#l3233"></a><span id="l3233">                                  extensions,</span>
<a href="#l3234"></a><span id="l3234">                                  mime_types_description);</span>
<a href="#l3235"></a><span id="l3235"> </span>
<a href="#l3236"></a><span id="l3236"> #ifdef MOZ_WIDGET_GTK</span>
<a href="#l3237"></a><span id="l3237">   if (handler.IsEmpty()) {</span>
<a href="#l3238"></a><span id="l3238">-    RefPtr&lt;nsMIMEInfoBase&gt; gnomeInfo = nsGNOMERegistry::GetFromType(aMIMEType);</span>
<a href="#l3239"></a><span id="l3239">+    RefPtr&lt;nsMIMEInfoBase&gt; gnomeInfo = nsCommonRegistry::GetFromType(aMIMEType);</span>
<a href="#l3240"></a><span id="l3240">     if (gnomeInfo) {</span>
<a href="#l3241"></a><span id="l3241">       LOG((&quot;Got MIMEInfo from GNOME registry without extensions; setting them &quot;</span>
<a href="#l3242"></a><span id="l3242">            &quot;to %s\n&quot;, NS_LossyConvertUTF16toASCII(extensions).get()));</span>
<a href="#l3243"></a><span id="l3243"> </span>
<a href="#l3244"></a><span id="l3244">       NS_ASSERTION(!gnomeInfo-&gt;HasExtensions(), &quot;How'd that happen?&quot;);</span>
<a href="#l3245"></a><span id="l3245">       gnomeInfo-&gt;SetFileExtensions(NS_ConvertUTF16toUTF8(extensions));</span>
<a href="#l3246"></a><span id="l3246">       return gnomeInfo.forget();</span>
<a href="#l3247"></a><span id="l3247">     }</span>
<a href="#l3248"></a><span id="l3248">diff --git a/widget/gtk/moz.build b/widget/gtk/moz.build</span>
<a href="#l3249"></a><span id="l3249">--- a/widget/gtk/moz.build</span>
<a href="#l3250"></a><span id="l3250">+++ b/widget/gtk/moz.build</span>
<a href="#l3251"></a><span id="l3251">@@ -101,16 +101,17 @@ else:</span>
<a href="#l3252"></a><span id="l3252"> include('/ipc/chromium/chromium-config.mozbuild')</span>
<a href="#l3253"></a><span id="l3253"> </span>
<a href="#l3254"></a><span id="l3254"> FINAL_LIBRARY = 'xul'</span>
<a href="#l3255"></a><span id="l3255"> </span>
<a href="#l3256"></a><span id="l3256"> LOCAL_INCLUDES += [</span>
<a href="#l3257"></a><span id="l3257">     '/layout/generic',</span>
<a href="#l3258"></a><span id="l3258">     '/layout/xul',</span>
<a href="#l3259"></a><span id="l3259">     '/other-licenses/atk-1.0',</span>
<a href="#l3260"></a><span id="l3260">+    '/toolkit/xre',</span>
<a href="#l3261"></a><span id="l3261">     '/widget',</span>
<a href="#l3262"></a><span id="l3262"> ]</span>
<a href="#l3263"></a><span id="l3263"> </span>
<a href="#l3264"></a><span id="l3264"> if CONFIG['MOZ_X11']:</span>
<a href="#l3265"></a><span id="l3265">     LOCAL_INCLUDES += [</span>
<a href="#l3266"></a><span id="l3266">         '/widget/x11',</span>
<a href="#l3267"></a><span id="l3267">     ]</span>
<a href="#l3268"></a><span id="l3268"> </span>
<a href="#l3269"></a><span id="l3269">diff --git a/widget/gtk/nsFilePicker.cpp b/widget/gtk/nsFilePicker.cpp</span>
<a href="#l3270"></a><span id="l3270">--- a/widget/gtk/nsFilePicker.cpp</span>
<a href="#l3271"></a><span id="l3271">+++ b/widget/gtk/nsFilePicker.cpp</span>
<a href="#l3272"></a><span id="l3272">@@ -4,32 +4,34 @@</span>
<a href="#l3273"></a><span id="l3273">  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */</span>
<a href="#l3274"></a><span id="l3274"> </span>
<a href="#l3275"></a><span id="l3275"> #include &quot;mozilla/Types.h&quot;</span>
<a href="#l3276"></a><span id="l3276"> #include &lt;sys/types.h&gt;</span>
<a href="#l3277"></a><span id="l3277"> #include &lt;sys/stat.h&gt;</span>
<a href="#l3278"></a><span id="l3278"> #include &lt;unistd.h&gt;</span>
<a href="#l3279"></a><span id="l3279"> </span>
<a href="#l3280"></a><span id="l3280"> #include &lt;gtk/gtk.h&gt;</span>
<a href="#l3281"></a><span id="l3281">+#include &lt;gdk/gdkx.h&gt;</span>
<a href="#l3282"></a><span id="l3282"> </span>
<a href="#l3283"></a><span id="l3283"> #include &quot;nsGtkUtils.h&quot;</span>
<a href="#l3284"></a><span id="l3284"> #include &quot;nsIFileURL.h&quot;</span>
<a href="#l3285"></a><span id="l3285"> #include &quot;nsIURI.h&quot;</span>
<a href="#l3286"></a><span id="l3286"> #include &quot;nsIWidget.h&quot;</span>
<a href="#l3287"></a><span id="l3287"> #include &quot;nsIFile.h&quot;</span>
<a href="#l3288"></a><span id="l3288"> #include &quot;nsIStringBundle.h&quot;</span>
<a href="#l3289"></a><span id="l3289"> </span>
<a href="#l3290"></a><span id="l3290"> #include &quot;nsArrayEnumerator.h&quot;</span>
<a href="#l3291"></a><span id="l3291"> #include &quot;nsMemory.h&quot;</span>
<a href="#l3292"></a><span id="l3292"> #include &quot;nsEnumeratorUtils.h&quot;</span>
<a href="#l3293"></a><span id="l3293"> #include &quot;nsNetUtil.h&quot;</span>
<a href="#l3294"></a><span id="l3294"> #include &quot;nsReadableUtils.h&quot;</span>
<a href="#l3295"></a><span id="l3295"> #include &quot;mozcontainer.h&quot;</span>
<a href="#l3296"></a><span id="l3296"> </span>
<a href="#l3297"></a><span id="l3297"> #include &quot;nsFilePicker.h&quot;</span>
<a href="#l3298"></a><span id="l3298">+#include &quot;nsKDEUtils.h&quot;</span>
<a href="#l3299"></a><span id="l3299"> </span>
<a href="#l3300"></a><span id="l3300"> using namespace mozilla;</span>
<a href="#l3301"></a><span id="l3301"> </span>
<a href="#l3302"></a><span id="l3302"> #define MAX_PREVIEW_SIZE 180</span>
<a href="#l3303"></a><span id="l3303"> // bug 1184009</span>
<a href="#l3304"></a><span id="l3304"> #define MAX_PREVIEW_SOURCE_SIZE 4096</span>
<a href="#l3305"></a><span id="l3305"> </span>
<a href="#l3306"></a><span id="l3306"> nsIFile *nsFilePicker::mPrevDisplayDirectory = nullptr;</span>
<a href="#l3307"></a><span id="l3307">@@ -246,17 +248,19 @@ nsFilePicker::AppendFilters(int32_t aFil</span>
<a href="#l3308"></a><span id="l3308">   return nsBaseFilePicker::AppendFilters(aFilterMask);</span>
<a href="#l3309"></a><span id="l3309"> }</span>
<a href="#l3310"></a><span id="l3310"> </span>
<a href="#l3311"></a><span id="l3311"> NS_IMETHODIMP</span>
<a href="#l3312"></a><span id="l3312"> nsFilePicker::AppendFilter(const nsAString&amp; aTitle, const nsAString&amp; aFilter)</span>
<a href="#l3313"></a><span id="l3313"> {</span>
<a href="#l3314"></a><span id="l3314">   if (aFilter.EqualsLiteral(&quot;..apps&quot;)) {</span>
<a href="#l3315"></a><span id="l3315">     // No platform specific thing we can do here, really....</span>
<a href="#l3316"></a><span id="l3316">-    return NS_OK;</span>
<a href="#l3317"></a><span id="l3317">+    // Unless it's KDE.</span>
<a href="#l3318"></a><span id="l3318">+    if( mMode != modeOpen || !nsKDEUtils::kdeSupport())</span>
<a href="#l3319"></a><span id="l3319">+      return NS_OK;</span>
<a href="#l3320"></a><span id="l3320">   }</span>
<a href="#l3321"></a><span id="l3321"> </span>
<a href="#l3322"></a><span id="l3322">   nsAutoCString filter, name;</span>
<a href="#l3323"></a><span id="l3323">   CopyUTF16toUTF8(aFilter, filter);</span>
<a href="#l3324"></a><span id="l3324">   CopyUTF16toUTF8(aTitle, name);</span>
<a href="#l3325"></a><span id="l3325"> </span>
<a href="#l3326"></a><span id="l3326">   mFilters.AppendElement(filter);</span>
<a href="#l3327"></a><span id="l3327">   mFilterNames.AppendElement(name);</span>
<a href="#l3328"></a><span id="l3328">@@ -371,16 +375,34 @@ nsFilePicker::Show(int16_t *aReturn)</span>
<a href="#l3329"></a><span id="l3329"> </span>
<a href="#l3330"></a><span id="l3330"> NS_IMETHODIMP</span>
<a href="#l3331"></a><span id="l3331"> nsFilePicker::Open(nsIFilePickerShownCallback *aCallback)</span>
<a href="#l3332"></a><span id="l3332"> {</span>
<a href="#l3333"></a><span id="l3333">   // Can't show two dialogs concurrently with the same filepicker</span>
<a href="#l3334"></a><span id="l3334">   if (mRunning)</span>
<a href="#l3335"></a><span id="l3335">     return NS_ERROR_NOT_AVAILABLE;</span>
<a href="#l3336"></a><span id="l3336"> </span>
<a href="#l3337"></a><span id="l3337">+  // KDE file picker is not handled via callback</span>
<a href="#l3338"></a><span id="l3338">+  if( nsKDEUtils::kdeSupport()) {</span>
<a href="#l3339"></a><span id="l3339">+    int16_t result;</span>
<a href="#l3340"></a><span id="l3340">+    mCallback = aCallback;</span>
<a href="#l3341"></a><span id="l3341">+    mRunning = true;</span>
<a href="#l3342"></a><span id="l3342">+    NS_ADDREF_THIS();</span>
<a href="#l3343"></a><span id="l3343">+    kdeFileDialog(&amp;result);</span>
<a href="#l3344"></a><span id="l3344">+    if (mCallback) {</span>
<a href="#l3345"></a><span id="l3345">+      mCallback-&gt;Done(result);</span>
<a href="#l3346"></a><span id="l3346">+      mCallback = nullptr;</span>
<a href="#l3347"></a><span id="l3347">+    } else {</span>
<a href="#l3348"></a><span id="l3348">+      mResult = result;</span>
<a href="#l3349"></a><span id="l3349">+    }</span>
<a href="#l3350"></a><span id="l3350">+    mRunning = false;</span>
<a href="#l3351"></a><span id="l3351">+    NS_RELEASE_THIS();</span>
<a href="#l3352"></a><span id="l3352">+    return NS_OK;</span>
<a href="#l3353"></a><span id="l3353">+  }</span>
<a href="#l3354"></a><span id="l3354">+</span>
<a href="#l3355"></a><span id="l3355">   nsXPIDLCString title;</span>
<a href="#l3356"></a><span id="l3356">   title.Adopt(ToNewUTF8String(mTitle));</span>
<a href="#l3357"></a><span id="l3357"> </span>
<a href="#l3358"></a><span id="l3358">   GtkWindow *parent_widget =</span>
<a href="#l3359"></a><span id="l3359">     GTK_WINDOW(mParentWidget-&gt;GetNativeData(NS_NATIVE_SHELLWIDGET));</span>
<a href="#l3360"></a><span id="l3360"> </span>
<a href="#l3361"></a><span id="l3361">   GtkFileChooserAction action = GetGtkFileChooserAction(mMode);</span>
<a href="#l3362"></a><span id="l3362"> </span>
<a href="#l3363"></a><span id="l3363">@@ -603,8 +625,235 @@ nsFilePicker::Done(GtkWidget* file_choos</span>
<a href="#l3364"></a><span id="l3364">   if (mCallback) {</span>
<a href="#l3365"></a><span id="l3365">     mCallback-&gt;Done(result);</span>
<a href="#l3366"></a><span id="l3366">     mCallback = nullptr;</span>
<a href="#l3367"></a><span id="l3367">   } else {</span>
<a href="#l3368"></a><span id="l3368">     mResult = result;</span>
<a href="#l3369"></a><span id="l3369">   }</span>
<a href="#l3370"></a><span id="l3370">   NS_RELEASE_THIS();</span>
<a href="#l3371"></a><span id="l3371"> }</span>
<a href="#l3372"></a><span id="l3372">+</span>
<a href="#l3373"></a><span id="l3373">+nsCString nsFilePicker::kdeMakeFilter( int index )</span>
<a href="#l3374"></a><span id="l3374">+    {</span>
<a href="#l3375"></a><span id="l3375">+    nsCString buf = mFilters[ index ];</span>
<a href="#l3376"></a><span id="l3376">+    for( PRUint32 i = 0;</span>
<a href="#l3377"></a><span id="l3377">+         i &lt; buf.Length();</span>
<a href="#l3378"></a><span id="l3378">+         ++i )</span>
<a href="#l3379"></a><span id="l3379">+        if( buf[ i ] == ';' ) // KDE separates just using spaces</span>
<a href="#l3380"></a><span id="l3380">+            buf.SetCharAt( ' ', i );</span>
<a href="#l3381"></a><span id="l3381">+    if (!mFilterNames[index].IsEmpty())</span>
<a href="#l3382"></a><span id="l3382">+        {</span>
<a href="#l3383"></a><span id="l3383">+        buf += &quot;|&quot;;</span>
<a href="#l3384"></a><span id="l3384">+        buf += mFilterNames[index].get();</span>
<a href="#l3385"></a><span id="l3385">+        }</span>
<a href="#l3386"></a><span id="l3386">+    return buf;</span>
<a href="#l3387"></a><span id="l3387">+    }</span>
<a href="#l3388"></a><span id="l3388">+</span>
<a href="#l3389"></a><span id="l3389">+static PRInt32 windowToXid( nsIWidget* widget )</span>
<a href="#l3390"></a><span id="l3390">+    {</span>
<a href="#l3391"></a><span id="l3391">+    GtkWindow *parent_widget = GTK_WINDOW(widget-&gt;GetNativeData(NS_NATIVE_SHELLWIDGET));</span>
<a href="#l3392"></a><span id="l3392">+    GdkWindow* gdk_window = gtk_widget_get_window( gtk_widget_get_toplevel( GTK_WIDGET( parent_widget )));</span>
<a href="#l3393"></a><span id="l3393">+    return GDK_WINDOW_XID( gdk_window );</span>
<a href="#l3394"></a><span id="l3394">+    }</span>
<a href="#l3395"></a><span id="l3395">+</span>
<a href="#l3396"></a><span id="l3396">+NS_IMETHODIMP nsFilePicker::kdeFileDialog(PRInt16 *aReturn)</span>
<a href="#l3397"></a><span id="l3397">+    {</span>
<a href="#l3398"></a><span id="l3398">+    NS_ENSURE_ARG_POINTER(aReturn);</span>
<a href="#l3399"></a><span id="l3399">+</span>
<a href="#l3400"></a><span id="l3400">+    if( mMode == modeOpen &amp;&amp; mFilters.Length() == 1 &amp;&amp; mFilters[ 0 ].EqualsLiteral( &quot;..apps&quot; ))</span>
<a href="#l3401"></a><span id="l3401">+        return kdeAppsDialog( aReturn );</span>
<a href="#l3402"></a><span id="l3402">+</span>
<a href="#l3403"></a><span id="l3403">+    nsXPIDLCString title;</span>
<a href="#l3404"></a><span id="l3404">+    title.Adopt(ToNewUTF8String(mTitle));</span>
<a href="#l3405"></a><span id="l3405">+</span>
<a href="#l3406"></a><span id="l3406">+    const char* arg = NULL;</span>
<a href="#l3407"></a><span id="l3407">+    if( mAllowURLs )</span>
<a href="#l3408"></a><span id="l3408">+        {</span>
<a href="#l3409"></a><span id="l3409">+        switch( mMode )</span>
<a href="#l3410"></a><span id="l3410">+            {</span>
<a href="#l3411"></a><span id="l3411">+            case nsIFilePicker::modeOpen:</span>
<a href="#l3412"></a><span id="l3412">+            case nsIFilePicker::modeOpenMultiple:</span>
<a href="#l3413"></a><span id="l3413">+                arg = &quot;GETOPENURL&quot;;</span>
<a href="#l3414"></a><span id="l3414">+                break;</span>
<a href="#l3415"></a><span id="l3415">+            case nsIFilePicker::modeSave:</span>
<a href="#l3416"></a><span id="l3416">+                arg = &quot;GETSAVEURL&quot;;</span>
<a href="#l3417"></a><span id="l3417">+                break;</span>
<a href="#l3418"></a><span id="l3418">+            case nsIFilePicker::modeGetFolder:</span>
<a href="#l3419"></a><span id="l3419">+                arg = &quot;GETDIRECTORYURL&quot;;</span>
<a href="#l3420"></a><span id="l3420">+                break;</span>
<a href="#l3421"></a><span id="l3421">+            }</span>
<a href="#l3422"></a><span id="l3422">+        }</span>
<a href="#l3423"></a><span id="l3423">+    else</span>
<a href="#l3424"></a><span id="l3424">+        {</span>
<a href="#l3425"></a><span id="l3425">+        switch( mMode )</span>
<a href="#l3426"></a><span id="l3426">+            {</span>
<a href="#l3427"></a><span id="l3427">+            case nsIFilePicker::modeOpen:</span>
<a href="#l3428"></a><span id="l3428">+            case nsIFilePicker::modeOpenMultiple:</span>
<a href="#l3429"></a><span id="l3429">+                arg = &quot;GETOPENFILENAME&quot;;</span>
<a href="#l3430"></a><span id="l3430">+                break;</span>
<a href="#l3431"></a><span id="l3431">+            case nsIFilePicker::modeSave:</span>
<a href="#l3432"></a><span id="l3432">+                arg = &quot;GETSAVEFILENAME&quot;;</span>
<a href="#l3433"></a><span id="l3433">+                break;</span>
<a href="#l3434"></a><span id="l3434">+            case nsIFilePicker::modeGetFolder:</span>
<a href="#l3435"></a><span id="l3435">+                arg = &quot;GETDIRECTORYFILENAME&quot;;</span>
<a href="#l3436"></a><span id="l3436">+                break;</span>
<a href="#l3437"></a><span id="l3437">+            }</span>
<a href="#l3438"></a><span id="l3438">+        }</span>
<a href="#l3439"></a><span id="l3439">+</span>
<a href="#l3440"></a><span id="l3440">+  nsAutoCString directory;</span>
<a href="#l3441"></a><span id="l3441">+  if (mDisplayDirectory) {</span>
<a href="#l3442"></a><span id="l3442">+    mDisplayDirectory-&gt;GetNativePath(directory);</span>
<a href="#l3443"></a><span id="l3443">+  } else if (mPrevDisplayDirectory) {</span>
<a href="#l3444"></a><span id="l3444">+    mPrevDisplayDirectory-&gt;GetNativePath(directory);</span>
<a href="#l3445"></a><span id="l3445">+  }</span>
<a href="#l3446"></a><span id="l3446">+</span>
<a href="#l3447"></a><span id="l3447">+    nsAutoCString startdir;</span>
<a href="#l3448"></a><span id="l3448">+  if (!directory.IsEmpty()) {</span>
<a href="#l3449"></a><span id="l3449">+    startdir = directory;</span>
<a href="#l3450"></a><span id="l3450">+  }</span>
<a href="#l3451"></a><span id="l3451">+  if (mMode == nsIFilePicker::modeSave) {</span>
<a href="#l3452"></a><span id="l3452">+    if( !startdir.IsEmpty())</span>
<a href="#l3453"></a><span id="l3453">+      {</span>
<a href="#l3454"></a><span id="l3454">+      startdir += &quot;/&quot;;</span>
<a href="#l3455"></a><span id="l3455">+      startdir += ToNewUTF8String(mDefault);</span>
<a href="#l3456"></a><span id="l3456">+      }</span>
<a href="#l3457"></a><span id="l3457">+    else</span>
<a href="#l3458"></a><span id="l3458">+      startdir = ToNewUTF8String(mDefault);</span>
<a href="#l3459"></a><span id="l3459">+  }</span>
<a href="#l3460"></a><span id="l3460">+  if( startdir.IsEmpty())</span>
<a href="#l3461"></a><span id="l3461">+      startdir = &quot;.&quot;;</span>
<a href="#l3462"></a><span id="l3462">+</span>
<a href="#l3463"></a><span id="l3463">+    nsAutoCString filters;</span>
<a href="#l3464"></a><span id="l3464">+    PRInt32 count = mFilters.Length();</span>
<a href="#l3465"></a><span id="l3465">+    if( count == 0 ) //just in case</span>
<a href="#l3466"></a><span id="l3466">+        filters = &quot;*&quot;;</span>
<a href="#l3467"></a><span id="l3467">+    else</span>
<a href="#l3468"></a><span id="l3468">+        {</span>
<a href="#l3469"></a><span id="l3469">+        filters = kdeMakeFilter( 0 );</span>
<a href="#l3470"></a><span id="l3470">+        for (PRInt32 i = 1; i &lt; count; ++i)</span>
<a href="#l3471"></a><span id="l3471">+            {</span>
<a href="#l3472"></a><span id="l3472">+            filters += &quot;\n&quot;;</span>
<a href="#l3473"></a><span id="l3473">+            filters += kdeMakeFilter( i );</span>
<a href="#l3474"></a><span id="l3474">+            }</span>
<a href="#l3475"></a><span id="l3475">+        }</span>
<a href="#l3476"></a><span id="l3476">+</span>
<a href="#l3477"></a><span id="l3477">+    nsTArray&lt;nsCString&gt; command;</span>
<a href="#l3478"></a><span id="l3478">+    command.AppendElement( nsAutoCString( arg ));</span>
<a href="#l3479"></a><span id="l3479">+    command.AppendElement( startdir );</span>
<a href="#l3480"></a><span id="l3480">+    if( mMode != nsIFilePicker::modeGetFolder )</span>
<a href="#l3481"></a><span id="l3481">+        {</span>
<a href="#l3482"></a><span id="l3482">+        command.AppendElement( filters );</span>
<a href="#l3483"></a><span id="l3483">+        nsAutoCString selected;</span>
<a href="#l3484"></a><span id="l3484">+        selected.AppendInt( mSelectedType );</span>
<a href="#l3485"></a><span id="l3485">+        command.AppendElement( selected );</span>
<a href="#l3486"></a><span id="l3486">+        }</span>
<a href="#l3487"></a><span id="l3487">+    command.AppendElement( title );</span>
<a href="#l3488"></a><span id="l3488">+    if( mMode == nsIFilePicker::modeOpenMultiple )</span>
<a href="#l3489"></a><span id="l3489">+        command.AppendElement( NS_LITERAL_CSTRING( &quot;MULTIPLE&quot; ));</span>
<a href="#l3490"></a><span id="l3490">+    if( PRInt32 xid = windowToXid( mParentWidget ))</span>
<a href="#l3491"></a><span id="l3491">+        {</span>
<a href="#l3492"></a><span id="l3492">+        command.AppendElement( NS_LITERAL_CSTRING( &quot;PARENT&quot; ));</span>
<a href="#l3493"></a><span id="l3493">+        nsAutoCString parent;</span>
<a href="#l3494"></a><span id="l3494">+        parent.AppendInt( xid );</span>
<a href="#l3495"></a><span id="l3495">+        command.AppendElement( parent );</span>
<a href="#l3496"></a><span id="l3496">+        }</span>
<a href="#l3497"></a><span id="l3497">+</span>
<a href="#l3498"></a><span id="l3498">+    nsTArray&lt;nsCString&gt; output;</span>
<a href="#l3499"></a><span id="l3499">+    if( nsKDEUtils::commandBlockUi( command, GTK_WINDOW(mParentWidget-&gt;GetNativeData(NS_NATIVE_SHELLWIDGET)), &amp;output ))</span>
<a href="#l3500"></a><span id="l3500">+        {</span>
<a href="#l3501"></a><span id="l3501">+        *aReturn = nsIFilePicker::returnOK;</span>
<a href="#l3502"></a><span id="l3502">+        mFiles.Clear();</span>
<a href="#l3503"></a><span id="l3503">+        if( mMode != nsIFilePicker::modeGetFolder )</span>
<a href="#l3504"></a><span id="l3504">+            {</span>
<a href="#l3505"></a><span id="l3505">+            mSelectedType = atoi( output[ 0 ].get());</span>
<a href="#l3506"></a><span id="l3506">+            output.RemoveElementAt( 0 );</span>
<a href="#l3507"></a><span id="l3507">+            }</span>
<a href="#l3508"></a><span id="l3508">+        if (mMode == nsIFilePicker::modeOpenMultiple)</span>
<a href="#l3509"></a><span id="l3509">+            {</span>
<a href="#l3510"></a><span id="l3510">+            mFileURL.Truncate();</span>
<a href="#l3511"></a><span id="l3511">+            PRUint32 count = output.Length();</span>
<a href="#l3512"></a><span id="l3512">+            for( PRUint32 i = 0;</span>
<a href="#l3513"></a><span id="l3513">+                 i &lt; count;</span>
<a href="#l3514"></a><span id="l3514">+                 ++i )</span>
<a href="#l3515"></a><span id="l3515">+                {</span>
<a href="#l3516"></a><span id="l3516">+                nsCOMPtr&lt;nsIFile&gt; localfile;</span>
<a href="#l3517"></a><span id="l3517">+                nsresult rv = NS_NewNativeLocalFile( output[ i ],</span>
<a href="#l3518"></a><span id="l3518">+                                      PR_FALSE,</span>
<a href="#l3519"></a><span id="l3519">+                                      getter_AddRefs(localfile));</span>
<a href="#l3520"></a><span id="l3520">+                if (NS_SUCCEEDED(rv))</span>
<a href="#l3521"></a><span id="l3521">+                    mFiles.AppendObject(localfile);</span>
<a href="#l3522"></a><span id="l3522">+                }</span>
<a href="#l3523"></a><span id="l3523">+            }</span>
<a href="#l3524"></a><span id="l3524">+        else</span>
<a href="#l3525"></a><span id="l3525">+            {</span>
<a href="#l3526"></a><span id="l3526">+            if( output.Length() == 0 )</span>
<a href="#l3527"></a><span id="l3527">+                mFileURL = nsCString();</span>
<a href="#l3528"></a><span id="l3528">+            else if( mAllowURLs )</span>
<a href="#l3529"></a><span id="l3529">+                mFileURL = output[ 0 ];</span>
<a href="#l3530"></a><span id="l3530">+            else // GetFile() actually requires it to be url even for local files :-/</span>
<a href="#l3531"></a><span id="l3531">+                {</span>
<a href="#l3532"></a><span id="l3532">+                mFileURL = nsCString( &quot;file://&quot; );</span>
<a href="#l3533"></a><span id="l3533">+                mFileURL.Append( output[ 0 ] );</span>
<a href="#l3534"></a><span id="l3534">+                }</span>
<a href="#l3535"></a><span id="l3535">+            }</span>
<a href="#l3536"></a><span id="l3536">+  // Remember last used directory.</span>
<a href="#l3537"></a><span id="l3537">+  nsCOMPtr&lt;nsIFile&gt; file;</span>
<a href="#l3538"></a><span id="l3538">+  GetFile(getter_AddRefs(file));</span>
<a href="#l3539"></a><span id="l3539">+  if (file) {</span>
<a href="#l3540"></a><span id="l3540">+    nsCOMPtr&lt;nsIFile&gt; dir;</span>
<a href="#l3541"></a><span id="l3541">+    file-&gt;GetParent(getter_AddRefs(dir));</span>
<a href="#l3542"></a><span id="l3542">+    nsCOMPtr&lt;nsIFile&gt; localDir(do_QueryInterface(dir));</span>
<a href="#l3543"></a><span id="l3543">+    if (localDir) {</span>
<a href="#l3544"></a><span id="l3544">+      localDir.swap(mPrevDisplayDirectory);</span>
<a href="#l3545"></a><span id="l3545">+    }</span>
<a href="#l3546"></a><span id="l3546">+  }</span>
<a href="#l3547"></a><span id="l3547">+        if (mMode == nsIFilePicker::modeSave)</span>
<a href="#l3548"></a><span id="l3548">+            {</span>
<a href="#l3549"></a><span id="l3549">+            nsCOMPtr&lt;nsIFile&gt; file;</span>
<a href="#l3550"></a><span id="l3550">+            GetFile(getter_AddRefs(file));</span>
<a href="#l3551"></a><span id="l3551">+            if (file)</span>
<a href="#l3552"></a><span id="l3552">+                {</span>
<a href="#l3553"></a><span id="l3553">+                bool exists = false;</span>
<a href="#l3554"></a><span id="l3554">+                file-&gt;Exists(&amp;exists);</span>
<a href="#l3555"></a><span id="l3555">+                if (exists) // TODO do overwrite check in the helper app</span>
<a href="#l3556"></a><span id="l3556">+                    *aReturn = nsIFilePicker::returnReplace;</span>
<a href="#l3557"></a><span id="l3557">+                }</span>
<a href="#l3558"></a><span id="l3558">+            }</span>
<a href="#l3559"></a><span id="l3559">+        }</span>
<a href="#l3560"></a><span id="l3560">+    else</span>
<a href="#l3561"></a><span id="l3561">+        {</span>
<a href="#l3562"></a><span id="l3562">+        *aReturn = nsIFilePicker::returnCancel;</span>
<a href="#l3563"></a><span id="l3563">+        }</span>
<a href="#l3564"></a><span id="l3564">+    return NS_OK;</span>
<a href="#l3565"></a><span id="l3565">+    }</span>
<a href="#l3566"></a><span id="l3566">+</span>
<a href="#l3567"></a><span id="l3567">+</span>
<a href="#l3568"></a><span id="l3568">+NS_IMETHODIMP nsFilePicker::kdeAppsDialog(PRInt16 *aReturn)</span>
<a href="#l3569"></a><span id="l3569">+    {</span>
<a href="#l3570"></a><span id="l3570">+    NS_ENSURE_ARG_POINTER(aReturn);</span>
<a href="#l3571"></a><span id="l3571">+</span>
<a href="#l3572"></a><span id="l3572">+    nsXPIDLCString title;</span>
<a href="#l3573"></a><span id="l3573">+    title.Adopt(ToNewUTF8String(mTitle));</span>
<a href="#l3574"></a><span id="l3574">+</span>
<a href="#l3575"></a><span id="l3575">+    nsTArray&lt;nsCString&gt; command;</span>
<a href="#l3576"></a><span id="l3576">+    command.AppendElement( NS_LITERAL_CSTRING( &quot;APPSDIALOG&quot; ));</span>
<a href="#l3577"></a><span id="l3577">+    command.AppendElement( title );</span>
<a href="#l3578"></a><span id="l3578">+    if( PRInt32 xid = windowToXid( mParentWidget ))</span>
<a href="#l3579"></a><span id="l3579">+        {</span>
<a href="#l3580"></a><span id="l3580">+        command.AppendElement( NS_LITERAL_CSTRING( &quot;PARENT&quot; ));</span>
<a href="#l3581"></a><span id="l3581">+        nsAutoCString parent;</span>
<a href="#l3582"></a><span id="l3582">+        parent.AppendInt( xid );</span>
<a href="#l3583"></a><span id="l3583">+        command.AppendElement( parent );</span>
<a href="#l3584"></a><span id="l3584">+        }</span>
<a href="#l3585"></a><span id="l3585">+</span>
<a href="#l3586"></a><span id="l3586">+    nsTArray&lt;nsCString&gt; output;</span>
<a href="#l3587"></a><span id="l3587">+    if( nsKDEUtils::commandBlockUi( command, GTK_WINDOW(mParentWidget-&gt;GetNativeData(NS_NATIVE_SHELLWIDGET)), &amp;output ))</span>
<a href="#l3588"></a><span id="l3588">+        {</span>
<a href="#l3589"></a><span id="l3589">+        *aReturn = nsIFilePicker::returnOK;</span>
<a href="#l3590"></a><span id="l3590">+        mFileURL = output.Length() &gt; 0 ? output[ 0 ] : nsCString();</span>
<a href="#l3591"></a><span id="l3591">+        }</span>
<a href="#l3592"></a><span id="l3592">+    else</span>
<a href="#l3593"></a><span id="l3593">+        {</span>
<a href="#l3594"></a><span id="l3594">+        *aReturn = nsIFilePicker::returnCancel;</span>
<a href="#l3595"></a><span id="l3595">+        }</span>
<a href="#l3596"></a><span id="l3596">+    return NS_OK;</span>
<a href="#l3597"></a><span id="l3597">+    }</span>
<a href="#l3598"></a><span id="l3598">+</span>
<a href="#l3599"></a><span id="l3599">diff --git a/widget/gtk/nsFilePicker.h b/widget/gtk/nsFilePicker.h</span>
<a href="#l3600"></a><span id="l3600">--- a/widget/gtk/nsFilePicker.h</span>
<a href="#l3601"></a><span id="l3601">+++ b/widget/gtk/nsFilePicker.h</span>
<a href="#l3602"></a><span id="l3602">@@ -69,14 +69,20 @@ protected:</span>
<a href="#l3603"></a><span id="l3603">   nsString  mDefaultExtension;</span>
<a href="#l3604"></a><span id="l3604"> </span>
<a href="#l3605"></a><span id="l3605">   nsTArray&lt;nsCString&gt; mFilters;</span>
<a href="#l3606"></a><span id="l3606">   nsTArray&lt;nsCString&gt; mFilterNames;</span>
<a href="#l3607"></a><span id="l3607"> </span>
<a href="#l3608"></a><span id="l3608"> private:</span>
<a href="#l3609"></a><span id="l3609">   static nsIFile *mPrevDisplayDirectory;</span>
<a href="#l3610"></a><span id="l3610"> </span>
<a href="#l3611"></a><span id="l3611">+  bool kdeRunning();</span>
<a href="#l3612"></a><span id="l3612">+  bool getKdeRunning();</span>
<a href="#l3613"></a><span id="l3613">+  NS_IMETHODIMP kdeFileDialog(PRInt16 *aReturn);</span>
<a href="#l3614"></a><span id="l3614">+  NS_IMETHODIMP kdeAppsDialog(PRInt16 *aReturn);</span>
<a href="#l3615"></a><span id="l3615">+  nsCString kdeMakeFilter( int index );</span>
<a href="#l3616"></a><span id="l3616">+</span>
<a href="#l3617"></a><span id="l3617"> #if (MOZ_WIDGET_GTK == 3)</span>
<a href="#l3618"></a><span id="l3618">   GtkFileChooserWidget *mFileChooserDelegate;</span>
<a href="#l3619"></a><span id="l3619"> #endif</span>
<a href="#l3620"></a><span id="l3620"> };</span>
<a href="#l3621"></a><span id="l3621"> </span>
<a href="#l3622"></a><span id="l3622"> #endif</span>
<a href="#l3623"></a><span id="l3623">diff --git a/xpcom/components/ManifestParser.cpp b/xpcom/components/ManifestParser.cpp</span>
<a href="#l3624"></a><span id="l3624">--- a/xpcom/components/ManifestParser.cpp</span>
<a href="#l3625"></a><span id="l3625">+++ b/xpcom/components/ManifestParser.cpp</span>
<a href="#l3626"></a><span id="l3626">@@ -32,16 +32,17 @@</span>
<a href="#l3627"></a><span id="l3627"> #include &quot;nsTextFormatter.h&quot;</span>
<a href="#l3628"></a><span id="l3628"> #include &quot;nsVersionComparator.h&quot;</span>
<a href="#l3629"></a><span id="l3629"> #include &quot;nsXPCOMCIDInternal.h&quot;</span>
<a href="#l3630"></a><span id="l3630"> </span>
<a href="#l3631"></a><span id="l3631"> #include &quot;nsIConsoleService.h&quot;</span>
<a href="#l3632"></a><span id="l3632"> #include &quot;nsIScriptError.h&quot;</span>
<a href="#l3633"></a><span id="l3633"> #include &quot;nsIXULAppInfo.h&quot;</span>
<a href="#l3634"></a><span id="l3634"> #include &quot;nsIXULRuntime.h&quot;</span>
<a href="#l3635"></a><span id="l3635">+#include &quot;nsKDEUtils.h&quot;</span>
<a href="#l3636"></a><span id="l3636"> </span>
<a href="#l3637"></a><span id="l3637"> using namespace mozilla;</span>
<a href="#l3638"></a><span id="l3638"> </span>
<a href="#l3639"></a><span id="l3639"> struct ManifestDirective</span>
<a href="#l3640"></a><span id="l3640"> {</span>
<a href="#l3641"></a><span id="l3641">   const char* directive;</span>
<a href="#l3642"></a><span id="l3642">   int argc;</span>
<a href="#l3643"></a><span id="l3643"> </span>
<a href="#l3644"></a><span id="l3644">@@ -472,16 +473,17 @@ ParseManifest(NSLocationType aType, File</span>
<a href="#l3645"></a><span id="l3645">   NS_NAMED_LITERAL_STRING(kRemoteEnabled, &quot;remoteenabled&quot;);</span>
<a href="#l3646"></a><span id="l3646">   NS_NAMED_LITERAL_STRING(kRemoteRequired, &quot;remoterequired&quot;);</span>
<a href="#l3647"></a><span id="l3647">   NS_NAMED_LITERAL_STRING(kApplication, &quot;application&quot;);</span>
<a href="#l3648"></a><span id="l3648">   NS_NAMED_LITERAL_STRING(kAppVersion, &quot;appversion&quot;);</span>
<a href="#l3649"></a><span id="l3649">   NS_NAMED_LITERAL_STRING(kGeckoVersion, &quot;platformversion&quot;);</span>
<a href="#l3650"></a><span id="l3650">   NS_NAMED_LITERAL_STRING(kOs, &quot;os&quot;);</span>
<a href="#l3651"></a><span id="l3651">   NS_NAMED_LITERAL_STRING(kOsVersion, &quot;osversion&quot;);</span>
<a href="#l3652"></a><span id="l3652">   NS_NAMED_LITERAL_STRING(kABI, &quot;abi&quot;);</span>
<a href="#l3653"></a><span id="l3653">+  NS_NAMED_LITERAL_STRING(kDesktop, &quot;desktop&quot;);</span>
<a href="#l3654"></a><span id="l3654">   NS_NAMED_LITERAL_STRING(kProcess, &quot;process&quot;);</span>
<a href="#l3655"></a><span id="l3655"> #if defined(MOZ_WIDGET_ANDROID)</span>
<a href="#l3656"></a><span id="l3656">   NS_NAMED_LITERAL_STRING(kTablet, &quot;tablet&quot;);</span>
<a href="#l3657"></a><span id="l3657"> #endif</span>
<a href="#l3658"></a><span id="l3658"> </span>
<a href="#l3659"></a><span id="l3659">   NS_NAMED_LITERAL_STRING(kMain, &quot;main&quot;);</span>
<a href="#l3660"></a><span id="l3660">   NS_NAMED_LITERAL_STRING(kContent, &quot;content&quot;);</span>
<a href="#l3661"></a><span id="l3661"> </span>
<a href="#l3662"></a><span id="l3662">@@ -532,44 +534,49 @@ ParseManifest(NSLocationType aType, File</span>
<a href="#l3663"></a><span id="l3663">         CopyUTF8toUTF16(s, abi);</span>
<a href="#l3664"></a><span id="l3664">         abi.Insert(char16_t('_'), 0);</span>
<a href="#l3665"></a><span id="l3665">         abi.Insert(osTarget, 0);</span>
<a href="#l3666"></a><span id="l3666">       }</span>
<a href="#l3667"></a><span id="l3667">     }</span>
<a href="#l3668"></a><span id="l3668">   }</span>
<a href="#l3669"></a><span id="l3669"> </span>
<a href="#l3670"></a><span id="l3670">   nsAutoString osVersion;</span>
<a href="#l3671"></a><span id="l3671">+  nsAutoString desktop;</span>
<a href="#l3672"></a><span id="l3672"> #if defined(XP_WIN)</span>
<a href="#l3673"></a><span id="l3673"> #pragma warning(push)</span>
<a href="#l3674"></a><span id="l3674"> #pragma warning(disable:4996) // VC12+ deprecates GetVersionEx</span>
<a href="#l3675"></a><span id="l3675">   OSVERSIONINFO info = { sizeof(OSVERSIONINFO) };</span>
<a href="#l3676"></a><span id="l3676">   if (GetVersionEx(&amp;info)) {</span>
<a href="#l3677"></a><span id="l3677">     nsTextFormatter::ssprintf(osVersion, u&quot;%ld.%ld&quot;,</span>
<a href="#l3678"></a><span id="l3678">                               info.dwMajorVersion,</span>
<a href="#l3679"></a><span id="l3679">                               info.dwMinorVersion);</span>
<a href="#l3680"></a><span id="l3680">   }</span>
<a href="#l3681"></a><span id="l3681">+  desktop = NS_LITERAL_STRING(&quot;win&quot;);</span>
<a href="#l3682"></a><span id="l3682"> #pragma warning(pop)</span>
<a href="#l3683"></a><span id="l3683"> #elif defined(MOZ_WIDGET_COCOA)</span>
<a href="#l3684"></a><span id="l3684">   SInt32 majorVersion = nsCocoaFeatures::OSXVersionMajor();</span>
<a href="#l3685"></a><span id="l3685">   SInt32 minorVersion = nsCocoaFeatures::OSXVersionMinor();</span>
<a href="#l3686"></a><span id="l3686">   nsTextFormatter::ssprintf(osVersion, u&quot;%ld.%ld&quot;,</span>
<a href="#l3687"></a><span id="l3687">                             majorVersion,</span>
<a href="#l3688"></a><span id="l3688">                             minorVersion);</span>
<a href="#l3689"></a><span id="l3689">+  desktop = NS_LITERAL_STRING(&quot;macosx&quot;);</span>
<a href="#l3690"></a><span id="l3690"> #elif defined(MOZ_WIDGET_GTK)</span>
<a href="#l3691"></a><span id="l3691">   nsTextFormatter::ssprintf(osVersion, u&quot;%ld.%ld&quot;,</span>
<a href="#l3692"></a><span id="l3692">                             gtk_major_version,</span>
<a href="#l3693"></a><span id="l3693">                             gtk_minor_version);</span>
<a href="#l3694"></a><span id="l3694">+  desktop = nsKDEUtils::kdeSession() ? NS_LITERAL_STRING(&quot;kde&quot;) : NS_LITERAL_STRING(&quot;gnome&quot;);</span>
<a href="#l3695"></a><span id="l3695"> #elif defined(MOZ_WIDGET_ANDROID)</span>
<a href="#l3696"></a><span id="l3696">   bool isTablet = false;</span>
<a href="#l3697"></a><span id="l3697">   if (mozilla::AndroidBridge::Bridge()) {</span>
<a href="#l3698"></a><span id="l3698">     mozilla::AndroidBridge::Bridge()-&gt;GetStaticStringField(&quot;android/os/Build$VERSION&quot;,</span>
<a href="#l3699"></a><span id="l3699">                                                            &quot;RELEASE&quot;,</span>
<a href="#l3700"></a><span id="l3700">                                                            osVersion);</span>
<a href="#l3701"></a><span id="l3701">     isTablet = java::GeckoAppShell::IsTablet();</span>
<a href="#l3702"></a><span id="l3702">   }</span>
<a href="#l3703"></a><span id="l3703">+  desktop = NS_LITERAL_STRING(&quot;android&quot;);</span>
<a href="#l3704"></a><span id="l3704"> #endif</span>
<a href="#l3705"></a><span id="l3705"> </span>
<a href="#l3706"></a><span id="l3706">   if (XRE_IsContentProcess()) {</span>
<a href="#l3707"></a><span id="l3707">     process = kContent;</span>
<a href="#l3708"></a><span id="l3708">   } else {</span>
<a href="#l3709"></a><span id="l3709">     process = kMain;</span>
<a href="#l3710"></a><span id="l3710">   }</span>
<a href="#l3711"></a><span id="l3711"> </span>
<a href="#l3712"></a><span id="l3712">@@ -672,25 +679,27 @@ ParseManifest(NSLocationType aType, File</span>
<a href="#l3713"></a><span id="l3713">     TriState stOsVersion = eUnspecified;</span>
<a href="#l3714"></a><span id="l3714">     TriState stOs = eUnspecified;</span>
<a href="#l3715"></a><span id="l3715">     TriState stABI = eUnspecified;</span>
<a href="#l3716"></a><span id="l3716">     TriState stProcess = eUnspecified;</span>
<a href="#l3717"></a><span id="l3717"> #if defined(MOZ_WIDGET_ANDROID)</span>
<a href="#l3718"></a><span id="l3718">     TriState stTablet = eUnspecified;</span>
<a href="#l3719"></a><span id="l3719"> #endif</span>
<a href="#l3720"></a><span id="l3720">     int flags = 0;</span>
<a href="#l3721"></a><span id="l3721">+    TriState stDesktop = eUnspecified;</span>
<a href="#l3722"></a><span id="l3722"> </span>
<a href="#l3723"></a><span id="l3723">     while ((token = nsCRT::strtok(whitespace, kWhitespace, &amp;whitespace)) &amp;&amp;</span>
<a href="#l3724"></a><span id="l3724">            ok) {</span>
<a href="#l3725"></a><span id="l3725">       ToLowerCase(token);</span>
<a href="#l3726"></a><span id="l3726">       NS_ConvertASCIItoUTF16 wtoken(token);</span>
<a href="#l3727"></a><span id="l3727"> </span>
<a href="#l3728"></a><span id="l3728">       if (CheckStringFlag(kApplication, wtoken, appID, stApp) ||</span>
<a href="#l3729"></a><span id="l3729">           CheckStringFlag(kOs, wtoken, osTarget, stOs) ||</span>
<a href="#l3730"></a><span id="l3730">           CheckStringFlag(kABI, wtoken, abi, stABI) ||</span>
<a href="#l3731"></a><span id="l3731">+          CheckStringFlag(kDesktop, wtoken, desktop, stDesktop) ||</span>
<a href="#l3732"></a><span id="l3732">           CheckStringFlag(kProcess, wtoken, process, stProcess) ||</span>
<a href="#l3733"></a><span id="l3733">           CheckVersionFlag(kOsVersion, wtoken, osVersion, stOsVersion) ||</span>
<a href="#l3734"></a><span id="l3734">           CheckVersionFlag(kAppVersion, wtoken, appVersion, stAppVersion) ||</span>
<a href="#l3735"></a><span id="l3735">           CheckVersionFlag(kGeckoVersion, wtoken, geckoVersion, stGeckoVersion)) {</span>
<a href="#l3736"></a><span id="l3736">         continue;</span>
<a href="#l3737"></a><span id="l3737">       }</span>
<a href="#l3738"></a><span id="l3738"> </span>
<a href="#l3739"></a><span id="l3739"> #if defined(MOZ_WIDGET_ANDROID)</span>
<a href="#l3740"></a><span id="l3740">@@ -740,16 +749,17 @@ ParseManifest(NSLocationType aType, File</span>
<a href="#l3741"></a><span id="l3741">     }</span>
<a href="#l3742"></a><span id="l3742"> </span>
<a href="#l3743"></a><span id="l3743">     if (!ok ||</span>
<a href="#l3744"></a><span id="l3744">         stApp == eBad ||</span>
<a href="#l3745"></a><span id="l3745">         stAppVersion == eBad ||</span>
<a href="#l3746"></a><span id="l3746">         stGeckoVersion == eBad ||</span>
<a href="#l3747"></a><span id="l3747">         stOs == eBad ||</span>
<a href="#l3748"></a><span id="l3748">         stOsVersion == eBad ||</span>
<a href="#l3749"></a><span id="l3749">+        stDesktop == eBad ||</span>
<a href="#l3750"></a><span id="l3750"> #ifdef MOZ_WIDGET_ANDROID</span>
<a href="#l3751"></a><span id="l3751">         stTablet == eBad ||</span>
<a href="#l3752"></a><span id="l3752"> #endif</span>
<a href="#l3753"></a><span id="l3753">         stABI == eBad ||</span>
<a href="#l3754"></a><span id="l3754">         stProcess == eBad) {</span>
<a href="#l3755"></a><span id="l3755">       continue;</span>
<a href="#l3756"></a><span id="l3756">     }</span>
<a href="#l3757"></a><span id="l3757"> </span>
<a href="#l3758"></a><span id="l3758">diff --git a/xpcom/components/moz.build b/xpcom/components/moz.build</span>
<a href="#l3759"></a><span id="l3759">--- a/xpcom/components/moz.build</span>
<a href="#l3760"></a><span id="l3760">+++ b/xpcom/components/moz.build</span>
<a href="#l3761"></a><span id="l3761">@@ -43,12 +43,13 @@ FINAL_LIBRARY = 'xul'</span>
<a href="#l3762"></a><span id="l3762"> LOCAL_INCLUDES += [</span>
<a href="#l3763"></a><span id="l3763">     '!..',</span>
<a href="#l3764"></a><span id="l3764">     '../base',</span>
<a href="#l3765"></a><span id="l3765">     '../build',</span>
<a href="#l3766"></a><span id="l3766">     '../ds',</span>
<a href="#l3767"></a><span id="l3767">     '../reflect/xptinfo',</span>
<a href="#l3768"></a><span id="l3768">     '/chrome',</span>
<a href="#l3769"></a><span id="l3769">     '/modules/libjar',</span>
<a href="#l3770"></a><span id="l3770">+    '/toolkit/xre'</span>
<a href="#l3771"></a><span id="l3771"> ]</span>
<a href="#l3772"></a><span id="l3772"> </span>
<a href="#l3773"></a><span id="l3773"> if 'gtk' in CONFIG['MOZ_WIDGET_TOOLKIT']:</span>
<a href="#l3774"></a><span id="l3774">     CXXFLAGS += CONFIG['TK_CFLAGS']</span>
<a href="#l3775"></a><span id="l3775">diff --git a/xpcom/io/nsLocalFileUnix.cpp b/xpcom/io/nsLocalFileUnix.cpp</span>
<a href="#l3776"></a><span id="l3776">--- a/xpcom/io/nsLocalFileUnix.cpp</span>
<a href="#l3777"></a><span id="l3777">+++ b/xpcom/io/nsLocalFileUnix.cpp</span>
<a href="#l3778"></a><span id="l3778">@@ -46,16 +46,17 @@</span>
<a href="#l3779"></a><span id="l3779"> #include &quot;prproces.h&quot;</span>
<a href="#l3780"></a><span id="l3780"> #include &quot;nsIDirectoryEnumerator.h&quot;</span>
<a href="#l3781"></a><span id="l3781"> #include &quot;nsISimpleEnumerator.h&quot;</span>
<a href="#l3782"></a><span id="l3782"> #include &quot;private/pprio.h&quot;</span>
<a href="#l3783"></a><span id="l3783"> #include &quot;prlink.h&quot;</span>
<a href="#l3784"></a><span id="l3784"> </span>
<a href="#l3785"></a><span id="l3785"> #ifdef MOZ_WIDGET_GTK</span>
<a href="#l3786"></a><span id="l3786"> #include &quot;nsIGIOService.h&quot;</span>
<a href="#l3787"></a><span id="l3787">+#include &quot;nsKDEUtils.h&quot;</span>
<a href="#l3788"></a><span id="l3788"> #endif</span>
<a href="#l3789"></a><span id="l3789"> </span>
<a href="#l3790"></a><span id="l3790"> #ifdef MOZ_WIDGET_COCOA</span>
<a href="#l3791"></a><span id="l3791"> #include &lt;Carbon/Carbon.h&gt;</span>
<a href="#l3792"></a><span id="l3792"> #include &quot;CocoaFileUtils.h&quot;</span>
<a href="#l3793"></a><span id="l3793"> #include &quot;prmem.h&quot;</span>
<a href="#l3794"></a><span id="l3794"> #include &quot;plbase64.h&quot;</span>
<a href="#l3795"></a><span id="l3795"> </span>
<a href="#l3796"></a><span id="l3796">@@ -1949,42 +1950,52 @@ nsLocalFile::SetPersistentDescriptor(con</span>
<a href="#l3797"></a><span id="l3797">   return InitWithNativePath(aPersistentDescriptor);</span>
<a href="#l3798"></a><span id="l3798"> #endif</span>
<a href="#l3799"></a><span id="l3799"> }</span>
<a href="#l3800"></a><span id="l3800"> </span>
<a href="#l3801"></a><span id="l3801"> NS_IMETHODIMP</span>
<a href="#l3802"></a><span id="l3802"> nsLocalFile::Reveal()</span>
<a href="#l3803"></a><span id="l3803"> {</span>
<a href="#l3804"></a><span id="l3804"> #ifdef MOZ_WIDGET_GTK</span>
<a href="#l3805"></a><span id="l3805">-  nsCOMPtr&lt;nsIGIOService&gt; giovfs = do_GetService(NS_GIOSERVICE_CONTRACTID);</span>
<a href="#l3806"></a><span id="l3806">-  if (!giovfs) {</span>
<a href="#l3807"></a><span id="l3807">-    return NS_ERROR_FAILURE;</span>
<a href="#l3808"></a><span id="l3808">-  }</span>
<a href="#l3809"></a><span id="l3809">+  nsAutoCString url;</span>
<a href="#l3810"></a><span id="l3810"> </span>
<a href="#l3811"></a><span id="l3811">   bool isDirectory;</span>
<a href="#l3812"></a><span id="l3812">   if (NS_FAILED(IsDirectory(&amp;isDirectory))) {</span>
<a href="#l3813"></a><span id="l3813">     return NS_ERROR_FAILURE;</span>
<a href="#l3814"></a><span id="l3814">   }</span>
<a href="#l3815"></a><span id="l3815"> </span>
<a href="#l3816"></a><span id="l3816">+  nsCOMPtr&lt;nsIGIOService&gt; giovfs = do_GetService(NS_GIOSERVICE_CONTRACTID);</span>
<a href="#l3817"></a><span id="l3817">   if (isDirectory) {</span>
<a href="#l3818"></a><span id="l3818">-    return giovfs-&gt;ShowURIForInput(mPath);</span>
<a href="#l3819"></a><span id="l3819">+    url = mPath;</span>
<a href="#l3820"></a><span id="l3820">   } else if (NS_SUCCEEDED(giovfs-&gt;OrgFreedesktopFileManager1ShowItems(mPath))) {</span>
<a href="#l3821"></a><span id="l3821">     return NS_OK;</span>
<a href="#l3822"></a><span id="l3822">   } else {</span>
<a href="#l3823"></a><span id="l3823">     nsCOMPtr&lt;nsIFile&gt; parentDir;</span>
<a href="#l3824"></a><span id="l3824">     nsAutoCString dirPath;</span>
<a href="#l3825"></a><span id="l3825">     if (NS_FAILED(GetParent(getter_AddRefs(parentDir)))) {</span>
<a href="#l3826"></a><span id="l3826">       return NS_ERROR_FAILURE;</span>
<a href="#l3827"></a><span id="l3827">     }</span>
<a href="#l3828"></a><span id="l3828">     if (NS_FAILED(parentDir-&gt;GetNativePath(dirPath))) {</span>
<a href="#l3829"></a><span id="l3829">       return NS_ERROR_FAILURE;</span>
<a href="#l3830"></a><span id="l3830">     }</span>
<a href="#l3831"></a><span id="l3831"> </span>
<a href="#l3832"></a><span id="l3832">-    return giovfs-&gt;ShowURIForInput(dirPath);</span>
<a href="#l3833"></a><span id="l3833">+    url = dirPath;</span>
<a href="#l3834"></a><span id="l3834">   }</span>
<a href="#l3835"></a><span id="l3835">+</span>
<a href="#l3836"></a><span id="l3836">+  if(nsKDEUtils::kdeSupport()) {</span>
<a href="#l3837"></a><span id="l3837">+    nsTArray&lt;nsCString&gt; command;</span>
<a href="#l3838"></a><span id="l3838">+    command.AppendElement( NS_LITERAL_CSTRING(&quot;REVEAL&quot;) );</span>
<a href="#l3839"></a><span id="l3839">+    command.AppendElement( mPath );</span>
<a href="#l3840"></a><span id="l3840">+    return nsKDEUtils::command( command ) ? NS_OK : NS_ERROR_FAILURE;</span>
<a href="#l3841"></a><span id="l3841">+  }</span>
<a href="#l3842"></a><span id="l3842">+</span>
<a href="#l3843"></a><span id="l3843">+  if (!giovfs)</span>
<a href="#l3844"></a><span id="l3844">+    return NS_ERROR_FAILURE;</span>
<a href="#l3845"></a><span id="l3845">+</span>
<a href="#l3846"></a><span id="l3846">+  return giovfs-&gt;ShowURIForInput(url);</span>
<a href="#l3847"></a><span id="l3847"> #elif defined(MOZ_WIDGET_COCOA)</span>
<a href="#l3848"></a><span id="l3848">   CFURLRef url;</span>
<a href="#l3849"></a><span id="l3849">   if (NS_SUCCEEDED(GetCFURL(&amp;url))) {</span>
<a href="#l3850"></a><span id="l3850">     nsresult rv = CocoaFileUtils::RevealFileInFinder(url);</span>
<a href="#l3851"></a><span id="l3851">     ::CFRelease(url);</span>
<a href="#l3852"></a><span id="l3852">     return rv;</span>
<a href="#l3853"></a><span id="l3853">   }</span>
<a href="#l3854"></a><span id="l3854">   return NS_ERROR_FAILURE;</span>
<a href="#l3855"></a><span id="l3855">@@ -1992,16 +2003,22 @@ nsLocalFile::Reveal()</span>
<a href="#l3856"></a><span id="l3856">   return NS_ERROR_FAILURE;</span>
<a href="#l3857"></a><span id="l3857"> #endif</span>
<a href="#l3858"></a><span id="l3858"> }</span>
<a href="#l3859"></a><span id="l3859"> </span>
<a href="#l3860"></a><span id="l3860"> NS_IMETHODIMP</span>
<a href="#l3861"></a><span id="l3861"> nsLocalFile::Launch()</span>
<a href="#l3862"></a><span id="l3862"> {</span>
<a href="#l3863"></a><span id="l3863"> #ifdef MOZ_WIDGET_GTK</span>
<a href="#l3864"></a><span id="l3864">+  if( nsKDEUtils::kdeSupport()) {</span>
<a href="#l3865"></a><span id="l3865">+    nsTArray&lt;nsCString&gt; command;</span>
<a href="#l3866"></a><span id="l3866">+    command.AppendElement( NS_LITERAL_CSTRING(&quot;OPEN&quot;) );</span>
<a href="#l3867"></a><span id="l3867">+    command.AppendElement( mPath );</span>
<a href="#l3868"></a><span id="l3868">+    return nsKDEUtils::command( command ) ? NS_OK : NS_ERROR_FAILURE;</span>
<a href="#l3869"></a><span id="l3869">+  }</span>
<a href="#l3870"></a><span id="l3870">   nsCOMPtr&lt;nsIGIOService&gt; giovfs = do_GetService(NS_GIOSERVICE_CONTRACTID);</span>
<a href="#l3871"></a><span id="l3871">   if (!giovfs) {</span>
<a href="#l3872"></a><span id="l3872">     return NS_ERROR_FAILURE;</span>
<a href="#l3873"></a><span id="l3873">   }</span>
<a href="#l3874"></a><span id="l3874"> </span>
<a href="#l3875"></a><span id="l3875">   return giovfs-&gt;ShowURIForInput(mPath);</span>
<a href="#l3876"></a><span id="l3876"> #elif defined(MOZ_ENABLE_CONTENTACTION)</span>
<a href="#l3877"></a><span id="l3877">   QUrl uri = QUrl::fromLocalFile(QString::fromUtf8(mPath.get()));</span></pre>
</div>

<div class="page_footer">
<div class="page_footer_text">mozilla</div>
<div class="rss_logo">
<a href="/hg/mozilla/rss-log">RSS</a>
<a href="/hg/mozilla/atom-log">Atom</a>
</div>
<br />

</div>
</body>
</html>


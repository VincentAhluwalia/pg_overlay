Description: Allow .js preference files to set locked prefs
Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=440908

diff --git a/modules/libpref/Preferences.cpp b/modules/libpref/Preferences.cpp
--- a/modules/libpref/Preferences.cpp
+++ b/modules/libpref/Preferences.cpp
@@ -287,16 +287,18 @@ StrEscape(const char* aOriginal, nsCStri
     }
   }
 
   aResult.Append('"');
 }
 
 static ArenaAllocator<8192, 1> gPrefNameArena;
 
+static bool gIsAnyPrefLocked = false;
+
 class Pref : public PLDHashEntryHdr
 {
 public:
   explicit Pref(const char* aName)
   {
     mName = ArenaStrdup(aName, gPrefNameArena);
 
     // We don't set the other fields because PLDHashTable always zeroes new
@@ -529,16 +531,17 @@ public:
     }
 
     mHasUserValue = false;
   }
 
   nsresult SetDefaultValue(PrefType aType,
                            PrefValue aValue,
                            bool aIsSticky,
+                           bool aIsLocked,
                            bool* aValueChanged)
   {
     // Types must always match when setting the default value.
     if (!IsType(aType)) {
       return NS_ERROR_UNEXPECTED;
     }
 
     // Should we set the default value? Only if the pref is not locked, and
@@ -547,16 +550,20 @@ public:
       mDefaultValue.Replace(Type(), aType, aValue);
       mHasDefaultValue = true;
       if (aIsSticky) {
         mIsSticky = true;
       }
       if (!mHasUserValue) {
         *aValueChanged = true;
       }
+      if (aIsLocked) {
+          SetIsLocked(true);
+          gIsAnyPrefLocked = true;
+      }
       // What if we change the default to be the same as the user value?
       // Should we clear the user value? Currently we don't.
     }
     return NS_OK;
   }
 
   nsresult SetUserValue(PrefType aType,
                         PrefValue aValue,
@@ -676,18 +683,16 @@ struct CallbackNode
 
 static PLDHashTable* gHashTable;
 
 // The callback list contains all the priority callbacks followed by the
 // non-priority callbacks. gLastPriorityNode records where the first part ends.
 static CallbackNode* gFirstCallback = nullptr;
 static CallbackNode* gLastPriorityNode = nullptr;
 
-static bool gIsAnyPrefLocked = false;
-
 // These are only used during the call to NotifyCallbacks().
 static bool gCallbacksInProgress = false;
 static bool gShouldCleanupDeadNodes = false;
 
 static PLDHashTableOps pref_HashTableOps = {
   PLDHashTable::HashStringKey,
   Pref::MatchEntry,
   PLDHashTable::MoveEntryStub,
@@ -815,16 +820,17 @@ pref_HashTableLookup(const char* aPrefNa
 }
 
 static nsresult
 pref_SetPref(const char* aPrefName,
              PrefType aType,
              PrefValueKind aKind,
              PrefValue aValue,
              bool aIsSticky,
+             bool aIsLocked,
              bool aFromFile)
 {
   MOZ_ASSERT(NS_IsMainThread());
 
   if (!gHashTable) {
     return NS_ERROR_OUT_OF_MEMORY;
   }
 
@@ -837,17 +843,17 @@ pref_SetPref(const char* aPrefName,
     // New (zeroed) entry. Partially initialize it.
     new (pref) Pref(aPrefName);
     pref->SetType(aType);
   }
 
   bool valueChanged = false;
   nsresult rv;
   if (aKind == PrefValueKind::Default) {
-    rv = pref->SetDefaultValue(aType, aValue, aIsSticky, &valueChanged);
+    rv = pref->SetDefaultValue(aType, aValue, aIsSticky, aIsLocked, &valueChanged);
   } else {
     rv = pref->SetUserValue(aType, aValue, aFromFile, &valueChanged);
   }
   if (NS_FAILED(rv)) {
     NS_WARNING(
       nsPrintfCString(
         "Rejected attempt to change type of pref %s's %s value from %s to %s",
         aPrefName,
@@ -966,17 +972,18 @@ public:
              size_t aBufLen);
 
   bool GrowBuf();
 
   void HandleValue(const char* aPrefName,
                    PrefType aType,
                    PrefValue aValue,
                    bool aIsDefault,
-                   bool aIsSticky);
+                   bool aIsSticky,
+                   bool aIsLocked);
 
   void ReportProblem(const char* aMessage, int aLine, bool aError);
 
 private:
   // Pref parser states.
   enum class State
   {
     eInit,
@@ -1000,16 +1007,17 @@ private:
 
   static const int kUTF16EscapeNumDigits = 4;
   static const int kHexEscapeNumDigits = 2;
   static const int KBitsPerHexDigit = 4;
 
   static constexpr const char* kUserPref = "user_pref";
   static constexpr const char* kPref = "pref";
   static constexpr const char* kStickyPref = "sticky_pref";
+  static constexpr const char* kLockedPref = "locked_pref";
   static constexpr const char* kTrue = "true";
   static constexpr const char* kFalse = "false";
 
   State mState;           // current parse state
   State mNextState;       // sometimes used...
   const char* mStrMatch;  // string to match
   int mStrIndex;          // next char of smatch to check;
                           // also, counter in \u parsing
@@ -1019,16 +1027,17 @@ private:
   char mQuoteChar;        // char delimiter for quotations
   char* mLb;              // line buffer (only allocation)
   char* mLbCur;           // line buffer cursor
   char* mLbEnd;           // line buffer end
   char* mVb;              // value buffer (ptr into mLb)
   Maybe<PrefType> mVtype; // pref value type
   bool mIsDefault;        // true if (default) pref
   bool mIsSticky;         // true if (sticky) pref
+  bool mIsLocked;         // true if (locked) pref
 };
 
 // This function will increase the size of the buffer owned by the given pref
 // parse state. We currently use a simple doubling algorithm, but the only hard
 // requirement is that it increase the buffer by at least the size of the
 // mEscTmp buffer used for escape processing (currently 6 bytes).
 //
 // The buffer is used to store partial pref lines. It is freed when the parse
@@ -1065,21 +1074,22 @@ Parser::GrowBuf()
   return true;
 }
 
 void
 Parser::HandleValue(const char* aPrefName,
                     PrefType aType,
                     PrefValue aValue,
                     bool aIsDefault,
-                    bool aIsSticky)
+                    bool aIsSticky,
+                    bool aIsLocked)
 {
   PrefValueKind kind =
     aIsDefault ? PrefValueKind::Default : PrefValueKind::User;
-  pref_SetPref(aPrefName, aType, kind, aValue, aIsSticky, /* fromFile */ true);
+  pref_SetPref(aPrefName, aType, kind, aValue, aIsSticky, aIsLocked, /* fromFile */ true);
 }
 
 // Report an error or a warning. If not specified, just dump to stderr.
 void
 Parser::ReportProblem(const char* aMessage, int aLine, bool aError)
 {
   nsPrintfCString message("** Preference parsing %s (line %d) = %s **\n",
                           (aError ? "error" : "warning"),
@@ -1138,31 +1148,35 @@ Parser::Parse(const char* aBuf, int aBuf
       // initial state
       case State::eInit:
         if (mLbCur != mLb) { // reset state
           mLbCur = mLb;
           mVb = nullptr;
           mVtype = Nothing();
           mIsDefault = false;
           mIsSticky = false;
+          mIsLocked = false;
         }
         switch (c) {
           case '/': // begin comment block or line?
             state = State::eCommentMaybeStart;
             break;
           case '#': // accept shell style comments
             state = State::eUntilEOL;
             break;
           case 'u': // indicating user_pref
           case 's': // indicating sticky_pref
           case 'p': // indicating pref
+          case 'l': // indicating locked_pref
             if (c == 'u') {
               mStrMatch = kUserPref;
             } else if (c == 's') {
               mStrMatch = kStickyPref;
+            } else if (c == 'l') {
+              mStrMatch = kLockedPref;
             } else {
               mStrMatch = kPref;
             }
             mStrIndex = 1;
             mNextState = State::eUntilOpenParen;
             state = State::eMatchString;
             break;
             // else skip char
@@ -1200,18 +1214,20 @@ Parser::Parse(const char* aBuf, int aBuf
         } else {
           *mLbCur++ = c;
         }
         break;
 
       // name parsing
       case State::eUntilName:
         if (c == '\"' || c == '\'') {
-          mIsDefault = (mStrMatch == kPref || mStrMatch == kStickyPref);
+          mIsDefault = (mStrMatch == kPref || mStrMatch == kStickyPref ||
+                        mStrMatch == kLockedPref);
           mIsSticky = (mStrMatch == kStickyPref);
+          mIsLocked = (mStrMatch == kLockedPref);
           mQuoteChar = c;
           mNextState = State::eUntilComma; // return here when done
           state = State::eQuotedString;
         } else if (c == '/') { // allow embedded comment
           mNextState = state;  // return here when done with comment
           state = State::eCommentMaybeStart;
         } else if (!isspace(c)) {
           ReportProblem("need space, comment or quote", lineNum, true);
@@ -1518,17 +1534,17 @@ Parser::Parse(const char* aBuf, int aBuf
               value.mBoolVal = (mVb == kTrue);
               break;
 
             default:
               MOZ_CRASH();
           }
 
           // We've extracted a complete name/value pair.
-          HandleValue(mLb, *mVtype, value, mIsDefault, mIsSticky);
+          HandleValue(mLb, *mVtype, value, mIsDefault, mIsSticky, mIsLocked);
           numPrefs++;
 
           state = State::eInit;
         } else if (c == '/') {
           mNextState = state; // return here when done with comment
           state = State::eCommentMaybeStart;
         } else if (!isspace(c)) {
           ReportProblem("need space, comment or semicolon", lineNum, true);
@@ -4438,16 +4454,17 @@ Preferences::SetCStringInAnyProcess(cons
   PrefValue prefValue;
   const nsCString& flat = PromiseFlatCString(aValue);
   prefValue.mStringVal = flat.get();
   return pref_SetPref(aPrefName,
                       PrefType::String,
                       aKind,
                       prefValue,
                       /* isSticky */ false,
+                      /* isLocked */ false,
                       /* fromFile */ false);
 }
 
 /* static */ nsresult
 Preferences::SetCString(const char* aPrefName,
                         const nsACString& aValue,
                         PrefValueKind aKind)
 {
@@ -4464,16 +4481,17 @@ Preferences::SetBoolInAnyProcess(const c
 
   PrefValue prefValue;
   prefValue.mBoolVal = aValue;
   return pref_SetPref(aPrefName,
                       PrefType::Bool,
                       aKind,
                       prefValue,
                       /* isSticky */ false,
+                      /* isLocked */ false,
                       /* fromFile */ false);
 }
 
 /* static */ nsresult
 Preferences::SetBool(const char* aPrefName, bool aValue, PrefValueKind aKind)
 {
   ENSURE_PARENT_PROCESS("SetBool", aPrefName);
   return SetBoolInAnyProcess(aPrefName, aValue, aKind);
@@ -4488,16 +4506,17 @@ Preferences::SetIntInAnyProcess(const ch
 
   PrefValue prefValue;
   prefValue.mIntVal = aValue;
   return pref_SetPref(aPrefName,
                       PrefType::Int,
                       aKind,
                       prefValue,
                       /* isSticky */ false,
+                      /* isLocked */ false,
                       /* fromFile */ false);
 }
 
 /* static */ nsresult
 Preferences::SetInt(const char* aPrefName, int32_t aValue, PrefValueKind aKind)
 {
   ENSURE_PARENT_PROCESS("SetInt", aPrefName);
   return SetIntInAnyProcess(aPrefName, aValue, aKind);
diff --git a/modules/libpref/test/unit/data/testPrefLocked.js b/modules/libpref/test/unit/data/testPrefLocked.js
new file mode 100644
--- /dev/null
+++ b/modules/libpref/test/unit/data/testPrefLocked.js
@@ -0,0 +1,2 @@
+pref("testPref.unlocked.bool", true);
+locked_pref("testPref.locked.bool", false);
diff --git a/modules/libpref/test/unit/data/testPrefLockedUser.js b/modules/libpref/test/unit/data/testPrefLockedUser.js
new file mode 100644
--- /dev/null
+++ b/modules/libpref/test/unit/data/testPrefLockedUser.js
@@ -0,0 +1,3 @@
+// testPrefLocked.js defined this pref as a locked_pref().
+// Changing a locked pref has no effect.
+user_pref("testPref.locked.bool", true);
diff --git a/modules/libpref/test/unit/test_lockedprefs.js b/modules/libpref/test/unit/test_lockedprefs.js
new file mode 100644
--- /dev/null
+++ b/modules/libpref/test/unit/test_lockedprefs.js
@@ -0,0 +1,41 @@
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/licenses/publicdomain/  */
+
+Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");
+Components.utils.import("resource://gre/modules/Services.jsm");
+
+const ps = Services.prefs;
+
+// A little helper to reset the service and load some pref files
+function resetAndLoad(filenames=[]) {
+  ps.resetPrefs();
+  for (let filename of filenames) {
+    ps.readUserPrefsFromFile(do_get_file(filename));
+  }
+}
+
+add_test(function notChangedFromAPI() {
+  resetAndLoad(["data/testPrefLocked.js"]);
+  Assert.strictEqual(ps.getBoolPref("testPref.unlocked.bool"), true);
+  Assert.strictEqual(ps.getBoolPref("testPref.locked.bool"), false);
+
+  ps.setBoolPref("testPref.unlocked.bool", false);
+  Assert.ok(ps.prefHasUserValue("testPref.unlocked.bool"),
+            "should be able to set an unlocked pref");
+  Assert.strictEqual(ps.getBoolPref("testPref.unlocked.bool"), false);
+
+  ps.setBoolPref("testPref.locked.bool", true);
+  Assert.ok(ps.prefHasUserValue("testPref.locked.bool"),
+            "somehow, the user value is still set");
+  // But the user value is ignored on a get()
+  Assert.strictEqual(ps.getBoolPref("testPref.locked.bool"), false);
+  run_next_test();
+});
+
+add_test(function notChangedFromUserPrefs() {
+  resetAndLoad(["data/testPrefLocked.js", "data/testPrefLockedUser.js"]);
+  Assert.strictEqual(ps.getBoolPref("testPref.unlocked.bool"), true);
+  Assert.strictEqual(ps.getBoolPref("testPref.locked.bool"), false);
+
+  run_next_test();
+});
diff --git a/modules/libpref/test/unit/xpcshell.ini b/modules/libpref/test/unit/xpcshell.ini
--- a/modules/libpref/test/unit/xpcshell.ini
+++ b/modules/libpref/test/unit/xpcshell.ini
@@ -6,13 +6,15 @@ support-files =
 
 [test_warnings.js]
 [test_bug345529.js]
 [test_bug506224.js]
 [test_bug577950.js]
 [test_bug790374.js]
 [test_stickyprefs.js]
 support-files = data/testPrefSticky.js data/testPrefStickyUser.js
+[test_lockedprefs.js]
+support-files = data/testPrefLocked.js data/testPrefLockedUser.js
 [test_changeType.js]
 [test_defaultValues.js]
 [test_dirtyPrefs.js]
 [test_libPrefs.js]
 [test_bug1354613.js]
